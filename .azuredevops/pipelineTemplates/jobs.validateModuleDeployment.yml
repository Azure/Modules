#########################################################
## DEPLOYMENT PIPELINE                                 ##
#########################################################
##
## This pipeline template contains the logic to deploy a given module's ARM template using the provided parameter file(s)
##
## Enabled levels of deployment
## - Resource-Group-Level
## - Subscription-Level
## - Management-Group-Level
## - Tenant-Level
##
########################################################
##
##---------------------------------------------##
## TEMPLATE PARAMETERS                         ##
##---------------------------------------------##
##
## By default it uses the variables specified in the below [parameters] section. However, you can overwrite these variables in the
##    referencing pipeline by providing the parameter explicitly.
##
## NOTE: If you don't need to overwrite a shared value, you can IGNORE this section
##
##   |============================================================================================================================================================================================================================================|
##   | Parameter                       | Default Value                        | Description                                                                                               | Example                                               |
##   |---------------------------------|--------------------------------------|-----------------------------------------------------------------------------------------------------------|-------------------------------------------------------|
##   | serviceConnection               | '$(serviceConnection)'               | The service connection that connects to Azure.                                                            | 'demo-internal'                                       |
##   | poolName                        | '$(poolName)'                        | You can provide either a [poolname] or [vmImage] to run the job on.                                       | 'Custom Deployment Pool'                              |
##   | vmImage                         | '$(vmImage)'                         | You can provide either a [poolname] or [vmImage] to run the job on.                                       | 'ubuntu20.04'                                         |
##   | defaultJobTimeoutInMinutes      | 120                                  | The timeout for the job in this pipeline.                                                                 | 120                                                   |
##   | checkoutRepositories            | ''                                   | An optional list of repositories to check out at the beginning of this job in addition to the source.     | 'Components'                                          |
##   | removeDeployment                | 'true'                               | Set to [true] to flag resources for removal. If not provided, defaults to true.                           | 'true'                                                |
##   | templateFilePath                | ''                                   | Path to the template file to deploy.                                                                      | 'arm/Microsoft.AnalysisServices/servers/deploy.bicep' |
##   | customParameterFileTokens       | ''                                   |                                                                                                           |                                                       |
##   | jobDisplayName                  | ''                                   | The display name of the job.                                                                              | 'Deploy module'                                       |
##   | modulePath                      | '$(modulePath)'                      | The path to the module to deploy.                                                                         | 'c:/KeyVault'                                         |
##   | location                        | '$(location)'                        | The location to deploy resources to.                                                                      | 'EastUs2'                                             |
##   | resourceGroupName               | '$(resourceGroupName)'               | The resourcegroup to deploy into. Required only for Resource-Group-Level deployments.                     | 'validation-rg'                                       |
##   | subscriptionId                  | '$(ARM_SUBSCRIPTION_ID)'             | The id of the subscription to deploy into when using a Management group service connection.               | 'aed7c000-6387-412e-bed0-24dfddf4bbc6'                |
##   | managementGroupId               | '$(ARM_MGMTGROUP_ID)'                | The id of the management group to deploy into. Required only for Management-Group-Level deployments.      | '6ycc9620-cb01-454f-9ebc-fc6b1df48d64'                |
##   | parametersRepository            | '$(Build.Repository.Name)'           | The respository with the parameter files. Defaults to the triggering repository.                          | 'Solutions'                                           |
##   | modulesRepository               | '$(modulesRepository)'               | The respository with the modules.                                                                         | 'Components'                                          |
##   | azurePowerShellVersion          | '$(azurePowerShellVersion)'          | Used for configuring the Azure PowerShellModules Version, one of the example values.                      | 'latestVersion' or 'OtherVersion'                     |
##   | preferredAzurePowerShellVersion | '$(preferredAzurePowerShellVersion)' | Used for configuring the Azure PowerShellModules Version, either an empty string or the specific version. | '4.4.0'                                               |
##   |============================================================================================================================================================================================================================================|
##
##---------------------------------------------##

parameters:
  # Pipeline-related parameters
  serviceConnection: '$(serviceConnection)'
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120
  checkoutRepositories: ''
  # Logic-related parameters
  removeDeployment: false
  templateFilePath: ''
  customParameterFileTokens: ''
  modulePath: '$(modulePath)'
  location: '$(location)'
  resourceGroupName: '$(resourceGroupName)'
  subscriptionId: '$(ARM_SUBSCRIPTION_ID)'
  managementGroupId: '$(ARM_MGMTGROUP_ID)'
  parametersRepository: '$(Build.Repository.Name)'
  modulesRepository: '$(modulesRepository)'
  # Azure PowerShell Version parameters
  azurePowerShellVersion: '$(azurePowerShellVersion)'
  preferredAzurePowerShellVersion: '$(preferredAzurePowerShellVersion)'

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##
jobs:
  - template: /.azuredevops/pipelineTemplates/jobs.getParameterFiles.yml
  - job: deploy
    displayName: Deploy with [${{ replace('$(parameterFilePath)', '$(modulePath)', '') }}]
    timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: ${{ parameters.vmImage }}
      ${{ if ne(parameters.poolName, '') }}:
        name: ${{ parameters.poolName }}
      dependsOn:
        - getParameterFilePaths
      strategy:
        matrix: $[ dependencies.getParameterFilePaths.outputs['getParameterFilePathsTask.parameterTests'] ]
    ##---------------------------------------------##
    ## TEMPLATE LOGIC                              ##
    ##---------------------------------------------##
    steps:
      # [Agent] Prepare environment
      #----------------------------
      - task: PowerShell@2
        displayName: 'Setup agent for deployment'
        inputs:
          targetType: inline
          pwsh: true
          script: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

            # Define PS modules to install on the runner
            $Modules = @(
                @{ Name = 'Az.Accounts' },
                @{ Name = 'Az.Resources' }
            )

            # Additional PS modules need to be installed for the removal step in case it is enabled
            if ('${{ parameters.removeDeployment}}' -eq 'true') {
              $Modules += @(
                @{ Name = 'Az.CognitiveServices' },
                @{ Name = 'Az.Compute' },
                @{ Name = 'Az.KeyVault' },
                @{ Name = 'Az.Monitor' },
                @{ Name = 'Az.OperationalInsights' },
                @{ Name = 'Az.RecoveryServices' }
              )
            }

            # Set agent up
            Set-EnvironmentOnAgent -PSModules $Modules

      # [Agent] Replace tokens
      #-----------------------
      - ${{ if not(contains( parameters.templateFilePath, '.dependencies')) }}:
          - task: AzurePowerShell@5
            displayName: 'Replace Tokens [$(parameterFilePath)] via connection [${{ parameters.serviceConnection }}]'
            inputs:
              azureSubscription: ${{ parameters.serviceConnection }}
              azurePowerShellVersion: 'latestVersion'
              preferredAzurePowerShellVersion: ''
              ScriptType: InlineScript
              pwsh: true
              inline: |
                # Load used functions
                . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'tokensReplacement' 'Convert-TokensInFile.ps1')

                # Load Settings File
                $Settings = Get-Content -Path (Join-Path '$(System.DefaultWorkingDirectory)' 'settings.json') | ConvertFrom-Json -AsHashTable

                if((Split-Path '$(parameterFilePath)' -Extension) -ne '.json') {
                  Write-Verbose 'Skipping token replacement as the deployment test file is no JSON-Parameter file' -Verbose
                }

                # Construct Token Function Input
                $ConvertTokensInputs = @{
                    Tokens      = @{}
                    FilePath    = Join-Path '$(System.DefaultWorkingDirectory)' '$(modulePath)' '$(parameterFilePath)'
                    TokenPrefix = $Settings.parameterFileTokens.tokenPrefix
                    TokenSuffix = $Settings.parameterFileTokens.tokenSuffix
                }

                # Add defaults
                $ConvertTokensInputs.Tokens += @{
                  resourceGroupName = '${{ parameters.resourceGroupName }}'
                  subscriptionId    = '${{ parameters.subscriptionId }}'
                  managementGroupId = '${{ parameters.managementGroupId }}'
                  tenantId          = '$(ARM_TENANT_ID)'
                  deploymentSpId    = '$(DEPLOYMENT_SP_ID)'
                }

                # Add local tokens
                if ($Settings.parameterFileTokens.localTokens) {
                  $tokenMap = @{}
                  foreach ($token in $Settings.parameterFileTokens.localTokens) {
                    $tokenMap += @{ $token.name = $token.value }
                  }
                  Write-Verbose ('Using local tokens [{0}]' -f ($tokenMap.Keys -join ', ')) -Verbose
                  $ConvertTokensInputs.Tokens += $tokenMap
                }

                # Add custom tokens (passed in via the pipeline)
                if(-not [String]::IsNullOrEmpty('${{ parameters.customParameterFileTokens }}')) {
                  $customTokens = '${{ parameters.customParameterFileTokens }}' | ConvertFrom-Json -AsHashTable
                  Write-Verbose ('Using custom parameter file tokens [{0}]' -f  ($customTokens.Keys -join ', ')) -Verbose
                  $ConvertTokensInputs.Tokens += $customTokens
                }

                # Invoke Token Replacement Functionality
                $null = Convert-TokensInFile @ConvertTokensInputs

      # [Validation] task(s)
      #---------------------
      - task: AzurePowerShell@5
        ${{ if not(contains( parameters.templateFilePath, '.dependencies')) }}:
          displayName: 'Validate parameter file via connection [${{ parameters.serviceConnection }}]'
        ${{ if contains( parameters.templateFilePath, '.dependencies') }}:
          displayName: 'Validate template file via connection [${{ parameters.serviceConnection }}]'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          azurePowerShellVersion: 'latestVersion'
          preferredAzurePowerShellVersion: ''
          ScriptType: InlineScript
          pwsh: true
          inline: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourceDeployment' 'Test-TemplateDeployment.ps1')
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'sharedScripts' 'Get-ScopeOfTemplateFile.ps1')

            # ----------- #
            # INVOKE TEST #
            # ----------- #

            if((Split-Path '$(parameterFilePath)' -Extension) -ne '.json') {
              $templateFilePath = Join-Path '$(System.DefaultWorkingDirectory)' '$(parameterFilePath)'
            } else {
              $templateFilePath = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.templateFilePath }}'
            }

            $functionInput    = @{
              templateFilePath     = $templateFilePath
              location             = '${{ parameters.location }}'
              resourceGroupName    = '${{ parameters.resourceGroupName }}'
              subscriptionId       = '${{ parameters.subscriptionId }}'
              managementGroupId    = '${{ parameters.managementGroupId }}'
              additionalParameters = @{}
            }

            if((Split-Path '$(parameterFilePath)' -Extension) -eq '.json') {
              $functionInput['parameterFilePath'] = Join-Path '$(System.DefaultWorkingDirectory)' '$(modulePath)' '$(parameterFilePath)'
            }

            # Passing the resource group name as a deployment parameter if accepted
            $deploymentScope = Get-ScopeOfTemplateFile -TemplateFilePath $templateFilePath
            if ($deploymentScope -ne 'resourceGroup' -and -not [String]::IsNullOrEmpty('${{ parameters.resourceGroupName }}')) {
              $templateContent = az bicep build --file $templateFilePath --stdout | ConvertFrom-Json -AsHashtable
              $parameters = $templateContent.parameters.Keys
              if($parameters -contains 'resourceGroupName') {
                $functionInput['additionalParameters'] = @{
                  resourceGroupName = '${{ parameters.resourceGroupName }}'
                }
              }
            }

            $projectSettings = Get-Content -Path 'settings.json' | ConvertFrom-Json
            if (-not [String]::IsNullOrEmpty($projectSettings.enableDefaultTelemetry) -and (Get-Content -Path $functionInput.templateFilePath -Raw) -like '*param enableDefaultTelemetry*') {
                $functionInput['additionalParameters'] += @{
                    enableDefaultTelemetry = $projectSettings.enableDefaultTelemetry
                }
            }

            Write-Verbose "Invoke task with" -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            Test-TemplateDeployment @functionInput -Verbose

      # [Deployment] task(s)
      #---------------------
      - task: AzurePowerShell@5
        name: deployModule
        ${{ if not(contains( parameters.templateFilePath, '.dependencies')) }}:
          displayName: 'Deploy parameter file via connection [${{ parameters.serviceConnection }}]'
        ${{ if contains( parameters.templateFilePath, '.dependencies') }}:
          displayName: 'Deploy template file via connection [${{ parameters.serviceConnection }}]'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          azurePowerShellVersion: 'latestVersion'
          preferredAzurePowerShellVersion: ''
          pwsh: true
          ScriptType: InlineScript
          inline: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourceDeployment' 'New-TemplateDeployment.ps1')
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'sharedScripts' 'Get-ScopeOfTemplateFile.ps1')

            # ----------------- #
            # INVOKE DEPLOYMENT #
            # ----------------- #
            if((Split-Path '$(parameterFilePath)' -Extension) -ne '.json') {
              $templateFilePath = Join-Path '$(System.DefaultWorkingDirectory)' '$(parameterFilePath)'
            } else {
              $templateFilePath = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.templateFilePath }}'
            }

            $templateFilePath     = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.templateFilePath }}'
            $functionInput = @{
              templateFilePath     = $templateFilePath
              location             = '${{ parameters.location }}'
              resourceGroupName    = '${{ parameters.resourceGroupName }}'
              subscriptionId       = '${{ parameters.subscriptionId }}'
              managementGroupId    = '${{ parameters.managementGroupId }}'
              doNotThrow           = $true
              additionalParameters = @{}
            }

            if((Split-Path '$(parameterFilePath)' -Extension) -eq '.json') {
              $functionInput['parameterFilePath'] = Join-Path '$(System.DefaultWorkingDirectory)' '$(modulePath)' '$(parameterFilePath)'
            }

            # Passing the resource group name as a deployment parameter if accepted
            $deploymentScope = Get-ScopeOfTemplateFile -TemplateFilePath $templateFilePath
            if ($deploymentScope -ne 'resourceGroup' -and -not [String]::IsNullOrEmpty('${{ parameters.resourceGroupName }}')) {
              $templateContent = az bicep build --file $templateFilePath --stdout | ConvertFrom-Json -AsHashtable
              $parameters = $templateContent.parameters.Keys
              if($parameters -contains 'resourceGroupName') {
                $functionInput['additionalParameters'] = @{
                  resourceGroupName = '${{ parameters.resourceGroupName }}'
                }
              }
            }

            $projectSettings = Get-Content -Path 'settings.json' | ConvertFrom-Json
            if (-not [String]::IsNullOrEmpty($projectSettings.enableDefaultTelemetry) -and (Get-Content -Path $functionInput.templateFilePath -Raw) -like '*param enableDefaultTelemetry*') {
                $functionInput['additionalParameters'] += @{
                    enableDefaultTelemetry = $projectSettings.enableDefaultTelemetry
                }
            }

            Write-Verbose "Invoke task with" -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            # Invoke deployment
            $res = New-TemplateDeployment @functionInput -Verbose

            # Get deployment name
            Write-Host ('##vso[task.setvariable variable=deploymentName]{0}' -f $res.deploymentName)
            $deploymentName=$res.deploymentName
            Write-Verbose "Deployment name: $deploymentName" -Verbose
            Write-Output ('##vso[task.setvariable variable={0};isOutput=true]{1}' -f 'deploymentName', $deploymentName)

            # Populate further outputs
            $deploymentOutputHash=@{}

            foreach ($outputKey in $res.deploymentOutput.Keys) {
              Write-Output ('##vso[task.setvariable variable={0}]{1}' -f $outputKey, $res.deploymentOutput[$outputKey].Value)
              $deploymentOutputHash.add($outputKey,$res.deploymentOutput[$outputKey].Value)
            }

            $deploymentOutput = $deploymentOutputHash | ConvertTo-Json -Compress -Depth 100
            Write-Verbose "Deployment output: $deploymentOutput" -Verbose
            Write-Output ('##vso[task.setvariable variable={0};isOutput=true]{1}' -f 'deploymentOutput', $deploymentOutput)

            if ($res.ContainsKey('exception')) {
              # Happens only if there is an exception
              throw $res.exception
            }

      # [Removal] task(s)
      #------------------
      - task: AzurePowerShell@5
        displayName: 'Remove deployed resources via [${{ parameters.serviceConnection }}]'
        condition: and(succeededOrFailed(), eq('${{ parameters.removeDeployment }}', 'true'), and(not(eq( '$(deploymentName)', '' )), not(startsWith( '$(deploymentName)', '$(deploymentName' ))))
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
          preferredAzurePowerShellVersion: ${{ parameters.preferredAzurePowerShellVersion }}
          ScriptType: InlineScript
          failOnStandardError: false
          pwsh: true
          inline: |
            # Load used function
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourceRemoval' 'Initialize-DeploymentRemoval.ps1')

            if((Split-Path '$(parameterFilePath)' -Extension) -ne '.json') {
              $templateFilePath = Join-Path '$(System.DefaultWorkingDirectory)' '$(parameterFilePath)'
            } else {
              # Use default path
              $templateFilePath = (Test-Path (Join-Path '$(System.DefaultWorkingDirectory)' '$(modulePath)' 'deploy.bicep')) ?
                (Join-Path '$(System.DefaultWorkingDirectory)' '$(modulePath)' 'deploy.bicep') :
                (Join-Path '$(System.DefaultWorkingDirectory)' '$(modulePath)' 'deploy.json')
            }

            $functionInput = @{
              TemplateFilePath  = $templateFilePath
              ResourceGroupName = '${{ parameters.resourceGroupName }}'
              subscriptionId    = '${{ parameters.subscriptionId }}'
              ManagementGroupId = '${{ parameters.managementGroupId }}'
              deploymentName    = '$(deploymentName)'
              Verbose           = $true
            }

            Write-Verbose 'Invoke task with' -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            Initialize-DeploymentRemoval @functionInput
