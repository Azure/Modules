name: 'AnalysisServices - Servers'

parameters:
  - name: removeDeployment
    displayName: Remove deployed module
    type: boolean
    default: true
  - name: prerelease
    displayName: Publish prerelease module
    type: boolean
    default: false

pr: none

trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - '/.azuredevops/modulePipelines/ms.analysisservices.servers.yml'
      - '/.azuredevops/pipelineTemplates/module.*.yml'
      - '/arm/Microsoft.AnalysisServices/servers/*'
      - '/arm/.global/global.module.tests.ps1'
    exclude:
      - '/**/*.md'

variables:
  - template: '../../global.variables.yml'
  - group: 'PLATFORM_VARIABLES'
  - name: modulePath
    value: '/arm/Microsoft.AnalysisServices/servers'

stages:
  - stage: dummyTest
    displayName: Dummy test
    jobs:
      - job:
        displayName: Run global tests
        timeoutInMinutes: 180
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: PowerShell@2
            displayName: 'Setup agent'
            inputs:
              targetType: inline
              pwsh: true
              script: |
                $stopwatch = [system.diagnostics.stopwatch]::StartNew()
                # Load used functions
                . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

                # Define PS modules to install on the runner
                $Modules = @(
                    @{ Name = 'Az.Accounts' },
                    @{ Name = 'Az.Resources' }
                )

                # Additional PS modules need to be installed for the removal step in case it is enabled
                if ('${{ parameters.removeDeployment}}' -eq 'true') {
                  $Modules += @(
                    @{ Name = 'Az.CognitiveServices' },
                    @{ Name = 'Az.Compute' },
                    @{ Name = 'Az.KeyVault' },
                    @{ Name = 'Az.Monitor' },
                    @{ Name = 'Az.OperationalInsights' },
                    @{ Name = 'Az.RecoveryServices' }
                  )
                }

                # Set agent up
                Set-EnvironmentOnAgent -PSModules $Modules

                Write-Verbose ($stopwatch.Elapsed | Out-String) -Verbose
                $stopwatch.Stop()
  # - stage: Validation
  #   displayName: Static validation
  #   jobs:
  #     - template: /.azuredevops/pipelineTemplates/jobs.validateModulePester.yml

  # - stage: Deployment
  #   displayName: Deployment validation
  #   jobs:
  #     - template: /.azuredevops/pipelineTemplates/jobs.validateModuleDeployment.yml
  #       parameters:
  #         removeDeployment: '${{ parameters.removeDeployment }}'
  #         deploymentBlocks:
  #           - path: $(modulePath)/.parameters/min.parameters.json
  #           - path: $(modulePath)/.parameters/parameters.json
  #           - path: $(modulePath)/.parameters/max.parameters.json

  # - stage: Publishing
  #   displayName: Publishing
  #   condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq('${{ parameters.prerelease }}', 'true')))
  #   jobs:
  #     - template: /.azuredevops/pipelineTemplates/jobs.publishModule.yml
