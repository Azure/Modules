{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1008.15138",
      "templateHash": "1085474347546050881"
    }
  },
  "parameters": {
    "appName": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the Web Application Portal Name"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "maxValue": 365,
      "minValue": 0,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of the Diagnostic Storage Account."
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of Log Analytics."
      }
    },
    "eventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "eventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "enableMonitoring": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. If true, ApplicationInsights will be configured for the Function App."
      }
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Mandatory 'managedServiceIdentity' contains UserAssigned. The identy to assign to the resource."
      }
    },
    "lockForDeletion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Switch to lock Key Vault from deletion."
      }
    },
    "privateEndpoints": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Configuration Details for private endpoints."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
      }
    },
    "roleAssignments": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the storage account to managing triggers and logging function executions."
      }
    },
    "storageAccountResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Optional. Resource group of the storage account to use. Required if the storage account is in a different resource group than the function app itself."
      }
    },
    "functionsWorkerRuntime": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "dotnet",
        "node",
        "python",
        "java",
        "powershell",
        ""
      ],
      "metadata": {
        "description": "Optional. Runtime of the function worker."
      }
    },
    "functionsExtensionVersion": {
      "type": "string",
      "defaultValue": "~3",
      "metadata": {
        "description": "Optional. Version if the function extension."
      }
    },
    "appServicePlanName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Required if no appServicePlanId is provided to deploy a new app service plan."
      }
    },
    "appServicePlanSkuName": {
      "type": "string",
      "defaultValue": "F1",
      "allowedValues": [
        "F1",
        "D1",
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1",
        "P1v2",
        "P2",
        "P3",
        "P4"
      ],
      "metadata": {
        "description": "Optional. The pricing tier for the hosting plan."
      }
    },
    "appServicePlanWorkerSize": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Optional. Defines the number of workers from the worker pool that will be used by the app service plan"
      }
    },
    "appServicePlanTier": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. SkuTier of app service plan deployed if no appServicePlanId was provided."
      }
    },
    "appServicePlanSize": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. SkuSize of app service plan deployed if no appServicePlanId was provided."
      }
    },
    "appServicePlanFamily": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. SkuFamily of app service plan deployed if no appServicePlanId was provided."
      }
    },
    "appServicePlanType": {
      "type": "string",
      "defaultValue": "linux",
      "allowedValues": [
        "linux",
        "windows"
      ],
      "metadata": {
        "description": "Optional. SkuType of app service plan deployed if no appServicePlanId was provided."
      }
    },
    "appServicePlanId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Resource Id of the App Service Plan to use for the App. If not provided, the hosting plan name is used to create a new plan."
      }
    },
    "appServiceEnvironmentId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Resource Id of the App Service Environment to use for the Function App."
      }
    },
    "appType": {
      "type": "string",
      "allowedValues": [
        "functionapp",
        "app"
      ],
      "metadata": {
        "description": "Required. Type of site to deploy"
      }
    },
    "managedServiceIdentity": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "None",
        "SystemAssigned",
        "SystemAssigned, UserAssigned",
        "UserAssigned"
      ],
      "metadata": {
        "description": "Optional. Type of managed service identity."
      }
    },
    "httpsOnly": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Configures a web site to accept only https requests. Issues redirect for http requests."
      }
    },
    "clientAffinityEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. If Client Affinity is enabled."
      }
    },
    "siteConfig": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Required. Configuration of the app."
      }
    },
    "logsToEnable": {
      "type": "array",
      "defaultValue": [
        "AppServiceHTTPLogs",
        "AppServiceConsoleLogs",
        "AppServiceAppLogs",
        "AppServiceFileAuditLogs",
        "AppServiceAuditLogs"
      ],
      "allowedValues": [
        "AppServiceHTTPLogs",
        "AppServiceConsoleLogs",
        "AppServiceAppLogs",
        "AppServiceFileAuditLogs",
        "AppServiceAuditLogs"
      ],
      "metadata": {
        "description": "Optional. The name of logs that will be streamed."
      }
    },
    "metricsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllMetrics"
      ],
      "allowedValues": [
        "AllMetrics"
      ],
      "metadata": {
        "description": "Optional. The name of metrics that will be streamed."
      }
    }
  },
  "functions": [],
  "variables": {
    "copy": [
      {
        "name": "diagnosticsLogs",
        "count": "[length(parameters('logsToEnable'))]",
        "input": {
          "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      },
      {
        "name": "diagnosticsMetrics",
        "count": "[length(parameters('metricsToEnable'))]",
        "input": {
          "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
          "timeGrain": null,
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      }
    ],
    "builtInRoleNames": {
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
      "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
      "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
    },
    "hostingEnvironment": {
      "id": "[parameters('appServiceEnvironmentId')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2019-08-01",
      "name": "[format('{0}/{1}', parameters('appName'), 'appsettings')]",
      "properties": {
        "AzureWebJobsStorage": "[if(not(empty(parameters('storageAccountName'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', parameters('storageAccountName'), listkeys(resourceId(subscription().subscriptionId, parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-06-01').keys[0].value), json('null'))]",
        "AzureWebJobsDashboard": "[if(not(empty(parameters('storageAccountName'))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', parameters('storageAccountName'), listkeys(resourceId(subscription().subscriptionId, parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-06-01').keys[0].value), json('null'))]",
        "FUNCTIONS_EXTENSION_VERSION": "[if(and(equals(parameters('appServicePlanType'), 'functionApp'), not(empty(parameters('functionsExtensionVersion')))), parameters('functionsExtensionVersion'), json('null'))]",
        "FUNCTIONS_WORKER_RUNTIME": "[if(and(equals(parameters('appServicePlanType'), 'functionApp'), not(empty(parameters('functionsWorkerRuntime')))), parameters('functionsWorkerRuntime'), json('null'))]",
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[if(parameters('enableMonitoring'), reference(format('microsoft.insights/components/{0}', parameters('appName')), '2015-05-01').InstrumentationKey, json('null'))]",
        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[if(parameters('enableMonitoring'), reference(format('microsoft.insights/components/{0}', parameters('appName')), '2015-05-01').ConnectionString, json('null'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('appName'))]"
      ]
    },
    {
      "condition": "[empty(parameters('appServicePlanId'))]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[if(not(empty(parameters('appServicePlanName'))), parameters('appServicePlanName'), 'dummyAppServicePlanName')]",
      "kind": "[parameters('appServicePlanType')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[parameters('appServicePlanSkuName')]",
        "capacity": "[parameters('appServicePlanWorkerSize')]",
        "tier": "[parameters('appServicePlanTier')]",
        "size": "[parameters('appServicePlanSize')]",
        "family": "[parameters('appServicePlanFamily')]"
      },
      "properties": {
        "hostingEnvironmentProfile": "[if(empty(parameters('appServiceEnvironmentId')), json('null'), json(format('{{ id: {0} }}', variables('hostingEnvironment'))))]"
      }
    },
    {
      "condition": "[and(parameters('lockForDeletion'), empty(parameters('appServicePlanId')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2016-09-01",
      "scope": "[format('Microsoft.Web/serverfarms/{0}', if(not(empty(parameters('appServicePlanName'))), parameters('appServicePlanName'), 'dummyAppServicePlanName'))]",
      "name": "[format('{0}-doNotDelete', if(not(empty(parameters('appServicePlanName'))), parameters('appServicePlanName'), 'dummyAppServicePlanName'))]",
      "properties": {
        "level": "CanNotDelete"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', if(not(empty(parameters('appServicePlanName'))), parameters('appServicePlanName'), 'dummyAppServicePlanName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-12-01",
      "name": "[parameters('appName')]",
      "location": "[parameters('location')]",
      "kind": "[parameters('appType')]",
      "tags": "[parameters('tags')]",
      "identity": {
        "type": "[parameters('managedServiceIdentity')]",
        "userAssignedIdentities": "[if(empty(parameters('userAssignedIdentities')), json('null'), parameters('userAssignedIdentities'))]"
      },
      "properties": {
        "serverFarmId": "[if(not(empty(parameters('appServicePlanId'))), parameters('appServicePlanId'), resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName')))]",
        "httpsOnly": "[parameters('httpsOnly')]",
        "hostingEnvironmentProfile": "[if(empty(parameters('appServiceEnvironmentId')), json('null'), json(format('{{ id: {0} }}', variables('hostingEnvironment'))))]",
        "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
        "siteConfig": "[parameters('siteConfig')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', if(not(empty(parameters('appServicePlanName'))), parameters('appServicePlanName'), 'dummyAppServicePlanName'))]"
      ]
    },
    {
      "condition": "[parameters('lockForDeletion')]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2016-09-01",
      "scope": "[format('Microsoft.Web/sites/{0}', parameters('appName'))]",
      "name": "[format('{0}-doNotDelete', parameters('appName'))]",
      "properties": {
        "level": "CanNotDelete"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('appName'))]"
      ]
    },
    {
      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Web/sites/{0}', parameters('appName'))]",
      "name": "[format('{0}-diagnosticSettings', parameters('appName'))]",
      "properties": {
        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
        "metrics": "[if(and(and(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId'))), empty(parameters('eventHubAuthorizationRuleId'))), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]",
        "logs": "[if(and(and(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId'))), empty(parameters('eventHubAuthorizationRuleId'))), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('appName'))]"
      ]
    },
    {
      "condition": "[parameters('enableMonitoring')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[parameters('appName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "tags": "[parameters('tags')]",
      "properties": {
        "Application_Type": "web",
        "Request_Source": "rest"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('appName'))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('cuaId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('pid-{0}', parameters('cuaId'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "14669053462841078328"
            }
          },
          "functions": [],
          "resources": []
        }
      }
    },
    {
      "copy": {
        "name": "app_rbac",
        "count": "[length(parameters('roleAssignments'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('rbac-{0}{1}', deployment().name, copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "roleAssignmentObj": {
            "value": "[parameters('roleAssignments')[copyIndex()]]"
          },
          "builtInRoleNames": {
            "value": "[variables('builtInRoleNames')]"
          },
          "resourceName": {
            "value": "[parameters('appName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "6134948871451795574"
            }
          },
          "parameters": {
            "roleAssignmentObj": {
              "type": "object"
            },
            "builtInRoleNames": {
              "type": "object"
            },
            "resourceName": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "copy": {
                "name": "roleAssigment",
                "count": "[length(parameters('roleAssignmentObj').principalIds)]"
              },
              "type": "Microsoft.Web/sites/providers/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[format('{0}/Microsoft.Authorization/{1}', parameters('resourceName'), guid(parameters('resourceName'), parameters('roleAssignmentObj').principalIds[copyIndex()], parameters('roleAssignmentObj').roleDefinitionIdOrName))]",
              "properties": {
                "roleDefinitionId": "[if(contains(parameters('builtInRoleNames'), parameters('roleAssignmentObj').roleDefinitionIdOrName), parameters('builtInRoleNames')[parameters('roleAssignmentObj').roleDefinitionIdOrName], parameters('roleAssignmentObj').roleDefinitionIdOrName)]",
                "principalId": "[parameters('roleAssignmentObj').principalIds[copyIndex()]]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('appName'))]"
      ]
    },
    {
      "copy": {
        "name": "app_privateEndpoint",
        "count": "[length(parameters('privateEndpoints'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}-AppService-PrivateEndpoints-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateEndpointResourceId": {
            "value": "[resourceId('Microsoft.Web/sites', parameters('appName'))]"
          },
          "privateEndpointVnetLocation": {
            "value": "[if(empty(parameters('privateEndpoints')), 'dummy', reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
          },
          "privateEndpointObj": {
            "value": "[parameters('privateEndpoints')[copyIndex()]]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "12894076382841963327"
            }
          },
          "parameters": {
            "privateEndpointResourceId": {
              "type": "string"
            },
            "privateEndpointVnetLocation": {
              "type": "string"
            },
            "privateEndpointObj": {
              "type": "object"
            },
            "tags": {
              "type": "object"
            }
          },
          "functions": [],
          "variables": {
            "privateEndpointResourceName": "[last(split(parameters('privateEndpointResourceId'), '/'))]",
            "privateEndpoint_var": {
              "name": "[if(contains(parameters('privateEndpointObj'), 'name'), if(empty(parameters('privateEndpointObj').name), format('{0}-{1}', variables('privateEndpointResourceName'), parameters('privateEndpointObj').service), parameters('privateEndpointObj').name), format('{0}-{1}', variables('privateEndpointResourceName'), parameters('privateEndpointObj').service))]",
              "subnetResourceId": "[parameters('privateEndpointObj').subnetResourceId]",
              "service": [
                "[parameters('privateEndpointObj').service]"
              ],
              "privateDnsZoneResourceIds": "[if(contains(parameters('privateEndpointObj'), 'privateDnsZoneResourceIds'), if(empty(parameters('privateEndpointObj').privateDnsZoneResourceIds), createArray(), parameters('privateEndpointObj').privateDnsZoneResourceIds), createArray())]",
              "customDnsConfigs": "[if(contains(parameters('privateEndpointObj'), 'customDnsConfigs'), if(empty(parameters('privateEndpointObj').customDnsConfigs), json('null'), parameters('privateEndpointObj').customDnsConfigs), json('null'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2020-05-01",
              "name": "[variables('privateEndpoint_var').name]",
              "location": "[parameters('privateEndpointVnetLocation')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[variables('privateEndpoint_var').name]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateEndpointResourceId')]",
                      "groupIds": "[variables('privateEndpoint_var').service]"
                    }
                  }
                ],
                "manualPrivateLinkServiceConnections": [],
                "subnet": {
                  "id": "[variables('privateEndpoint_var').subnetResourceId]"
                },
                "customDnsConfigs": "[variables('privateEndpoint_var').customDnsConfigs]"
              }
            },
            {
              "condition": "[not(empty(variables('privateEndpoint_var').privateDnsZoneResourceIds))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-05-01",
              "name": "[format('{0}/default', variables('privateEndpoint_var').name)]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(range(0, length(variables('privateEndpoint_var').privateDnsZoneResourceIds)))]",
                    "input": {
                      "name": "[last(split(variables('privateEndpoint_var').privateDnsZoneResourceIds[range(0, length(variables('privateEndpoint_var').privateDnsZoneResourceIds))[copyIndex('privateDnsZoneConfigs')]], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('privateEndpoint_var').privateDnsZoneResourceIds[range(0, length(variables('privateEndpoint_var').privateDnsZoneResourceIds))[copyIndex('privateDnsZoneConfigs')]]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpoint_var').name)]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('appName'))]"
      ]
    }
  ],
  "outputs": {
    "siteName": {
      "type": "string",
      "value": "[parameters('appName')]"
    },
    "siteResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Web/sites', parameters('appName'))]"
    },
    "siteResourceGroup": {
      "type": "string",
      "value": "[resourceGroup().name]"
    }
  }
}