{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vNetName": {
            "type": "string",
            "metadata": {
                "description": "Required. The Virtual Network (vNet) Name."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Optional. Location for all resources."
            }
        },
        "vNetAddressPrefixes": {
            "type": "array",
            "metadata": {
                "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
            }
        },
        "subnets": {
            "type": "array",
            "minLength": 1,
            "metadata": {
                "description": "Required. An Array of subnets to deploy to the Virual Network."
            }
        },
        "dnsServers": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. DNS Servers associated to the Virtual Network."
            }
        },
        "ddosProtectionPlanId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource Id of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
            }
        },
        "diagnosticLogsRetentionInDays": {
            "type": "int",
            "defaultValue": 365,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
            }
        },
        "diagnosticStorageAccountId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of the Diagnostic Storage Account."
            }
        },
        "workspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of Log Analytics."
            }
        },
        "eventHubAuthorizationRuleId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
            }
        },
        "lockForDeletion": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Switch to lock Virtual Network from deletion."
            }
        },
        "roleAssignments": {
            "defaultValue": [
            ],
            "type": "array",
            "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Tags of the resource."
            }
        },
        "cuaId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
            }
        }
    },
    "variables": {
        "subnetNamesToOutput": {
            "copy": [
                {
                    "name": "subnetNamesOutput",
                    "count": "[length(parameters('subnets'))]",
                    "input": "[parameters('subnets')[copyIndex('subnetNamesOutput')].name]"
                }
            ]
        },
        "subnetIdsToOutput": {
            "copy": [
                {
                    "name": "subnetIdsOutput",
                    "count": "[length(parameters('subnets'))]",
                    "input": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('subnets')[copyIndex('subnetIdsOutput')].name)]"
                }
            ]
        },
        "dnsServers": {
            "dnsServers": "[array(parameters('dnsServers'))]"
        },
        "ddosProtectionPlan": {
            "id": "[parameters('ddosProtectionPlanId')]"
        },
        "diagnosticsMetrics": [
            {
                "category": "AllMetrics",
                "timeGrain": null,
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            }
        ],
        "diagnosticsLogs": [
            {
                "category": "VMProtectionAlerts",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            }
        ],
        "builtInRoleNames": {
            "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
            "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','b24988ac-6180-42a0-ab88-20f7382dd24c')]",
            "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
            "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
            "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
            "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','5e467623-bb1f-42f4-a55d-6e525e11384b')]",
            "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','00c29273-979b-4161-815c-10b084fb9324')]",
            "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','230815da-be43-4aae-9cb4-875f7bd000aa')]",
            "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','76283e04-6283-4c54-8f91-bcf1374a3c64')]",
            "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','5bd9cd88-fe45-4216-938b-f97437e15450')]",
            "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
            "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','73c42c96-874c-492b-b04d-ab87d138a893')]",
            "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','641177b8-a67a-45b9-a033-47bc880bb21e')]",
            "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
            "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
            "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
            "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','3913510d-42f4-4e42-8a64-420c390055eb')]",
            "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
            "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
            "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
            "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','36243c78-bf99-498c-9df9-86d9f8d28608')]",
            "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
            "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','494ae006-db33-4328-bf46-533a6560a3ca')]",
            "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
            "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
            "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
            "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
            "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
            "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
            "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','fb879df8-f326-4884-b1cf-06f3ad86be52')]"
        }
    },
    "resources": [
        {
            "condition": "[not(empty(parameters('cuaId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-01-01",
            "name": "[concat('pid-', parameters('cuaId'))]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2021-05-01",
            "name": "[parameters('vNetName')]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": "[parameters('vNetAddressPrefixes')]"
                },
                "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanId'))), variables('ddosProtectionPlan'), json('null'))]",
                "dhcpOptions": "[if(empty(parameters('dnsServers')), json('null'), variables('dnsServers'))]",
                "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanId')))]",
                "copy": [
                    {
                        "name": "subnets",
                        "count": "[length(parameters('subnets'))]",
                        "input": {
                            "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                            "properties": {
                                "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                                "networkSecurityGroup": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'networkSecurityGroupName'), if(empty(parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/networkSecurityGroups', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName), '\"}'))), json('null'))]",
                                "routeTable": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'routeTableName'), if(empty(parameters('subnets')[copyIndex('subnets')].routeTableName), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/routeTables', parameters('subnets')[copyIndex('subnets')].routeTableName), '\"}'))), json('null'))]",
                                "serviceEndpoints": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpoints'), if(empty(parameters('subnets')[copyIndex('subnets')].serviceEndpoints), json('null'), parameters('subnets')[copyIndex('subnets')].serviceEndpoints), json('null'))]",
                                "delegations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'delegations'), if(empty(parameters('subnets')[copyIndex('subnets')].delegations), json('null'), parameters('subnets')[copyIndex('subnets')].delegations), json('null'))]",
                                "natGateway": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'natGatewayName'), if(empty(parameters('subnets')[copyIndex('subnets')].natGatewayName), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/natGateways', parameters('subnets')[copyIndex('subnets')].natGatewayName), '\"}'))), json('null'))]",
                                "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateEndpointNetworkPolicies'), if(empty(parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies), json('null'), parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies), json('null'))]",
                                "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateLinkServiceNetworkPolicies'), if(empty(parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies), json('null'), parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies), json('null'))]"
                            }
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "providers/locks",
                    "apiVersion": "2016-09-01",
                    "condition": "[parameters('lockForDeletion')]",
                    "name": "Microsoft.Authorization/virtualNetworkDoNotDelete",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks/', parameters('vNetName'))]"
                    ],
                    "comments": "Resource lock on virtual network",
                    "properties": {
                        "level": "CannotDelete"
                    }
                },
                {
                    "type": "Microsoft.Network/virtualNetworks/providers/diagnosticsettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "[concat(parameters('vNetName'), '/Microsoft.Insights/service')]",
                    "location": "[parameters('location')]",
                    "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
                    "dependsOn": [
                        "[concat('Microsoft.Network/virtualNetworks/', parameters('vNetName'))]"
                    ],
                    "properties": {
                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]",
                        "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
                    }
                }
            ]
        },
        {
            "name": "[concat('rbac-',deployment().name, copyIndex())]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-01-01",
            "condition": "[not(empty(parameters('roleAssignments')))]",
            "dependsOn": [
                "[parameters('vNetName')]"
            ],
            "copy": {
                "name": "rbacDeplCopy",
                "count": "[length(parameters('roleAssignments'))]"
            },
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "parameters": {
                    "roleAssignment": {
                        "value": "[parameters('roleAssignments')[copyIndex()]]"
                    },
                    "builtInRoleNames": {
                        "value": "[variables('builtInRoleNames')]"
                    },
                    "vNetName": {
                        "value": "[parameters('vNetName')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "roleAssignment": {
                            "type": "object"
                        },
                        "builtInRoleNames": {
                            "type": "object"
                        },
                        "vNetName": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Network/virtualNetworks/providers/roleAssignments",
                            "apiVersion": "2020-04-01-preview",
                            "name": "[concat(parameters('vNetName'), '/Microsoft.Authorization/', guid(uniqueString(concat(parameters('vNetName'), array(parameters('roleAssignment').principalIds)[copyIndex('innerRbacCopy')], parameters('roleAssignment').roleDefinitionIdOrName ) )))]",
                            "dependsOn": [
                            ],
                            "copy": {
                                "name": "innerRbacCopy",
                                "count": "[length(parameters('roleAssignment').principalIds)]"
                            },
                            "properties": {
                                "roleDefinitionId": "[if(contains(parameters('builtInRoleNames'), parameters('roleAssignment').roleDefinitionIdOrName ), parameters('builtInRoleNames')[parameters('roleAssignment').roleDefinitionIdOrName] , parameters('roleAssignment').roleDefinitionIdOrName )]",
                                "principalId": "[array(parameters('roleAssignment').principalIds)[copyIndex()]]"
                            }
                        }
                    ]
                }
            }
        }
    ],
    "functions": [
    ],
    "outputs": {
        "virtualNetworkResourceGroup": {
            "type": "string",
            "value": "[resourceGroup().name]",
            "metadata": {
                "description": "The name of the Resource Group the Virtual Network was created in."
            }
        },
        "virtualNetworkResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetName'))]",
            "metadata": {
                "description": "The Resource id of the Virtual Network deployed."
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "value": "[parameters('vNetName')]",
            "metadata": {
                "description": "The name of the Virtual Network deployed."
            }
        },
        "subnetNames": {
            "type": "array",
            "value": "[variables('subnetNamesToOutput').subnetNamesOutput]",
            "metadata": {
                "description": "The Names of the Subnets deployed to the Virtual Network."
            }
        },
        "subnetIds": {
            "type": "array",
            "value": "[variables('subnetIdsToOutput').subnetIdsOutput]",
            "metadata": {
                "description": "The Resource Ids of the Subnets deployed to the Virtual Network."
            }
        }
    }
}