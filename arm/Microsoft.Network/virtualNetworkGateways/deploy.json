{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "virtualNetworkGatewayName": {
            "type": "string",
            "metadata": {
                "description": "Required. Specifies the Virtual Network Gateway name."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Optional. Location for all resources."
            }
        },
        "gatewayPipName": {
            "type": "array",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Specifies the name of the Public IP used by the Virtual Network Gateway. If it's not provided, a '-pip' suffix will be appended to the gateway's name."
            }
        },
        "publicIPPrefixId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource Id of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
            }
        },
        "publicIpZones": {
            "type": "array",
            "defaultValue": [ "1" ],
            "metadata": {
                "description": "Optional. Specifies the zones of the Public IP address."
            }
        },
        "domainNameLabel": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. DNS name(s) of the Public IP resource(s). If you enabled active-active configuration, you need to provide 2 DNS names, if you want to use this feature. A region specific suffix will be appended to it, e.g.: your-DNS-name.westeurope.cloudapp.azure.com"
            }
        },
        "virtualNetworkGatewayType": {
            "type": "string",
            "allowedValues": [
                "Vpn",
                "ExpressRoute"
            ],
            "metadata": {
                "description": "Required. Specifies the gateway type. E.g. VPN, ExpressRoute"
            }
        },
        "virtualNetworkGatewaySku": {
            "type": "string",
            "allowedValues": [
                "Basic",
                "VpnGw1",
                "VpnGw2",
                "VpnGw3",
                "VpnGw1AZ",
                "VpnGw2AZ",
                "VpnGw3AZ",
                "ErGw1AZ",
                "ErGw2AZ",
                "ErGw3AZ"
            ],
            "metadata": {
                "description": "Required. The Sku of the Gateway."
            }
        },
        "vpnType": {
            "type": "string",
            "allowedValues": [
                "PolicyBased",
                "RouteBased"
            ],
            "defaultValue": "RouteBased",
            "metadata": {
                "description": "Required. Specifies the VPN type"
            }
        },
        "vNetId": {
            "type": "string",
            "metadata": {
                "description": "Required. Virtual Network resource Id"
            }
        },
        "activeActive": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Optional. Value to specify if the Gateway should be deployed in active-active or active-passive configuration"
            }
        },
        "enableBgp": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Optional. Value to specify if BGP is enabled or not"
            }
        },
        "asn": {
            "type": "int",
            "defaultValue": 65815,
            "metadata": {
                "description": "Optional. ASN value"
            }
        },
        "vpnClientAddressPoolPrefix": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. The IP address range from which VPN clients will receive an IP address when connected. Range specified must not overlap with on-premise network."
            }
        },
        "clientRootCertData": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Client root certificate data used to authenticate VPN clients."
            }
        },
        "clientRevokedCertThumbprint": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Thumbprint of the revoked certificate. This would revoke VPN client certificates matching this thumbprint from connecting to the VNet."
            }
        },
        "diagnosticLogsRetentionInDays": {
            "type": "int",
            "defaultValue": 365,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
            }
        },
        "diagnosticStorageAccountId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Required. Resource identifier of the Diagnostic Storage Account."
            }
        },
        "workspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Required. Resource identifier of Log Analytics."
            }
        },
        "eventHubAuthorizationRuleId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
            }
        },
        "roleAssignments": {
            "defaultValue": [
            ],
            "type": "array",
            "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
            }
        },
        "lockForDeletion": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Switch to lock Virtual Network Gateway from deletion."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Tags of the resource."
            }
        },
        "cuaId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
            }
        }
    },
    "variables": {
        "zoneRedundantSkus": [
            "VpnGw1AZ",
            "VpnGw2AZ",
            "VpnGw3AZ",
            "ErGw1AZ",
            "ErGw2AZ",
            "ErGw3AZ"
        ],
        "gatewayPipSku": "[if(contains(variables('zoneRedundantSkus'), parameters('virtualNetworkGatewaySku')), 'Standard', 'Basic')]",
        "gatewayPipAllocationMethod": "[if(contains(variables('zoneRedundantSkus'), parameters('virtualNetworkGatewaySku')), 'Static', 'Dynamic')]",
        "gatewaySubnetId": "[concat(parameters('vNetId'), '/subnets/GatewaySubnet')]",

        "gatewayPipName1": "[if( equals(length(parameters('gatewayPipName')),0), concat(parameters('virtualNetworkGatewayName'), '-pip1'), parameters('gatewayPipName')[0])]",
        "gatewayPipName2": "[if( variables('activeActive'), if (equals(length(parameters('gatewayPipName')),1), concat(parameters('virtualNetworkGatewayName'), '-pip2'), parameters('gatewayPipName')[1]), '')]",
        "gatewayPipName": "[if( not(empty(variables('gatewayPipName2'))), createArray(variables('gatewayPipName1'), variables('gatewayPipName2')), createArray(variables('gatewayPipName1')))]",
        "gatewayPipId1": "[resourceId('Microsoft.Network/publicIPAddresses', variables('gatewayPipName1'))]",
        "gatewayPipId2": "[if( variables('activeActive'), resourceId('Microsoft.Network/publicIPAddresses', variables('gatewayPipName2')), resourceId('Microsoft.Network/publicIPAddresses', variables('gatewayPipName1')))]",
        "enableBgp": "[if(equals(parameters('virtualNetworkGatewayType'), 'ExpressRoute'), bool('false'), parameters('enableBgp'))]",
        "vpnType": "[if(equals(parameters('virtualNetworkGatewayType'), 'ExpressRoute'), 'PolicyBased', parameters('vpnType'))]",
        "activeActive": "[if(equals(parameters('virtualNetworkGatewayType'), 'ExpressRoute'), bool('false'), parameters('activeActive'))]",
        "bgpSettings": {
            "asn": "[parameters('asn')]"
        },
        "publicIPPrefix": {
            "id": "[parameters('publicIPPrefixId')]"
        },
        "activePassiveIpConfiguration": [
            {
                "properties": {
                    "privateIPAllocationMethod": "Dynamic",
                    "subnet": {
                        "id": "[variables('gatewaySubnetId')]"
                    },
                    "publicIPAddress": {
                        "id": "[variables('gatewayPipId1')]"
                    }
                },
                "name": "vNetGatewayConfig1"
            }
        ],
        "activeActiveIpConfiguration": [
            {
                "properties": {
                    "privateIPAllocationMethod": "Dynamic",
                    "subnet": {
                        "id": "[variables('gatewaySubnetId')]"
                    },
                    "publicIPAddress": {
                        "id": "[variables('gatewayPipId1')]"
                    }
                },
                "name": "vNetGatewayConfig1"
            },
            {
                "properties": {
                    "privateIPAllocationMethod": "Dynamic",
                    "subnet": {
                        "id": "[variables('gatewaySubnetId')]"
                    },
                    "publicIPAddress": {
                        "id": "[variables('gatewayPipId2')]"
                    }
                },
                "name": "vNetGatewayConfig2"
            }
        ],
        "vpnClientRootCertificates": [
            {
                "name": "RootCert1",
                "properties": {
                    "PublicCertData": "[parameters('clientRootCertData')]"
                }
            }
        ],
        "vpmClientRevokedCertificates": [
            {
                "name": "RevokedCert1",
                "properties": {
                    "Thumbprint": "[parameters('clientRevokedCertThumbprint')]"
                }
            }
        ],
        "vpnClientConfiguration": {
            "vpnClientAddressPool": {
                "addressPrefixes": [
                    "[parameters('vpnClientAddressPoolPrefix')]"
                ]
            },
            "vpnClientRootCertificates": "[if(empty(parameters('clientRootCertData')), json('null'), variables('vpnClientRootCertificates'))]",
            "vpnClientRevokedCertificates": "[if(empty(parameters('clientRevokedCertThumbprint')), json('null'), variables('vpmClientRevokedCertificates'))]"
        },
        "diagnosticsMetrics": [
            {
                "category": "AllMetrics",
                "timeGrain": null,
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            }
        ],
        "publicIpDiagnosticsLogs": [
            {
                "category": "DDoSProtectionNotifications",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            },
            {
                "category": "DDoSMitigationFlowLogs",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            },
            {
                "category": "DDoSMitigationReports",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            }
        ],
        "virtualNetworkGatewayDiagnosticsLogs": [
            {
                "category": "GatewayDiagnosticLog",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            },
            {
                "category": "TunnelDiagnosticLog",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            },
            {
                "category": "RouteDiagnosticLog",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            },
            {
                "category": "IKEDiagnosticLog",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            },
            {
                "category": "P2SDiagnosticLog",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            }
        ],
        "builtInRoleNames": {
            "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
            "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','b24988ac-6180-42a0-ab88-20f7382dd24c')]",
            "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
            "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
            "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
            "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','73c42c96-874c-492b-b04d-ab87d138a893')]",
            "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','641177b8-a67a-45b9-a033-47bc880bb21e')]",
            "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
            "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
            "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
            "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','3913510d-42f4-4e42-8a64-420c390055eb')]",
            "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
            "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','4d97b98b-1d4f-4787-a291-c67834d212e7')]",
            "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','36243c78-bf99-498c-9df9-86d9f8d28608')]",
            "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
        }
    },
    "resources": [
        {
            "condition": "[not(empty(parameters('cuaId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-01-01",
            "name": "[concat('pid-', parameters('cuaId'))]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2021-02-01",
            "name": "[variables('gatewayPipName')[copyindex()]]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "copy": {
                "name": "pipCopy",
                "count": "[length(variables('gatewayPipName'))]",
                "mode": "Serial"
            },
            "sku": {
                "name": "[variables('gatewayPipSku')]"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('gatewayPipAllocationMethod')]",
                "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixId'))), variables('publicIPPrefix'), json('null'))]",
                "dnsSettings": "[if(equals(length(variables('gatewayPipName')),length(parameters('domainNameLabel'))), json(concat('{\"domainNameLabel\": \"', parameters('domainNameLabel')[copyindex()], '\"}')), json('null'))]"
            },
            "zones": "[parameters('publicIpZones')]",
            "resources": [
                {
                    "type": "providers/locks",
                    "apiVersion": "2016-09-01",
                    "condition": "[parameters('lockForDeletion')]",
                    "name": "Microsoft.Authorization/publicIpDoNotDelete",
                    "dependsOn": [
                        "[concat('Microsoft.Network/publicIPAddresses/', variables('gatewayPipName')[copyindex()])]"
                    ],
                    "comments": "Resource lock on Public IP",
                    "properties": {
                        "level": "CannotDelete"
                    }
                },
                {
                    "type": "Microsoft.Network/publicIPAddresses/providers/diagnosticSettings",
                    "apiVersion": "2017-05-01-preview",
                    "location": "[parameters('location')]",
                    "name": "[concat(variables('gatewayPipName')[copyindex()], '/Microsoft.Insights/service')]",
                    "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
                    "dependsOn": [
                        "[concat('Microsoft.Network/publicIPAddresses/', variables('gatewayPipName')[copyindex()])]"
                    ],
                    "properties": {
                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]",
                        "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('publicIpDiagnosticsLogs'))]"
                    }

                }
            ]
        },
        {
            "type": "Microsoft.Network/virtualNetworkGateways",
            "apiVersion": "2021-02-01",
            "name": "[parameters('virtualNetworkGatewayName')]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "pipCopy"
            ],
            "properties": {
                "ipConfigurations": "[if(variables('activeActive'), variables('activeActiveIpConfiguration'), variables('activePassiveIpConfiguration'))]",
                "activeActive": "[variables('activeActive')]",
                "enableBgp": "[variables('enableBgp')]",
                "bgpSettings": "[if(equals(parameters('virtualNetworkGatewayType'), 'ExpressRoute'), json('null'), variables('bgpSettings'))]",
                "sku": {
                    "name": "[parameters('virtualNetworkGatewaySku')]",
                    "tier": "[parameters('virtualNetworkGatewaySku')]"
                },
                "gatewayType": "[parameters('virtualNetworkGatewayType')]",
                "vpnType": "[variables('vpnType')]",
                "vpnClientConfiguration": "[if(empty(parameters('vpnClientAddressPoolPrefix')), json('null'), variables('vpnClientConfiguration'))]"
            },
            "resources": [
                {
                    "type": "providers/locks",
                    "apiVersion": "2016-09-01",
                    "condition": "[parameters('lockForDeletion')]",
                    "name": "Microsoft.Authorization/virtualNetworkGatewayDoNotDelete",
                    "dependsOn": [
                        "[concat('Microsoft.Network/virtualNetworkGateways/', parameters('virtualNetworkGatewayName'))]"
                    ],
                    "comments": "Resource lock on Virtual Network Gateway",
                    "properties": {
                        "level": "CannotDelete"
                    }
                },
                {
                    "type": "Microsoft.Network/virtualNetworkGateways/providers/diagnosticSettings",
                    "apiVersion": "2017-05-01-preview",
                    "location": "[parameters('location')]",
                    "name": "[concat(parameters('virtualNetworkGatewayName'), '/Microsoft.Insights/service')]",
                    "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
                    "dependsOn": [
                        "[concat('Microsoft.Network/virtualNetworkGateways/', parameters('virtualNetworkGatewayName'))]"
                    ],
                    "properties": {
                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId'))), json('null'), variables('diagnosticsMetrics'))]",
                        "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId'))), json('null'), variables('virtualNetworkGatewayDiagnosticsLogs'))]"
                    }
                }
            ]
        },
        {
            "name": "[concat('rbac-',deployment().name, copyIndex())]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2021-01-01",
            "condition": "[not(empty(parameters('roleAssignments')))]",
            "dependsOn": [
                "[parameters('virtualNetworkGatewayName')]"
            ],
            "copy": {
                "name": "rbacDeplCopy",
                "count": "[length(parameters('roleAssignments'))]"
            },
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "parameters": {
                    "roleAssignment": {
                        "value": "[parameters('roleAssignments')[copyIndex()]]"
                    },
                    "builtInRoleNames": {
                        "value": "[variables('builtInRoleNames')]"
                    },
                    "virtualNetworkGatewayName": {
                        "value": "[parameters('virtualNetworkGatewayName')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "roleAssignment": {
                            "type": "object"
                        },
                        "builtInRoleNames": {
                            "type": "object"
                        },
                        "virtualNetworkGatewayName": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Network/virtualNetworkGateways/providers/roleAssignments",
                            "apiVersion": "2020-04-01-preview",
                            "name": "[concat(parameters('virtualNetworkGatewayName'), '/Microsoft.Authorization/', guid(uniqueString(concat(parameters('virtualNetworkGatewayName'), array(parameters('roleAssignment').principalIds)[copyIndex('innerRbacCopy')], parameters('roleAssignment').roleDefinitionIdOrName ) )))]",
                            "dependsOn": [
                            ],
                            "copy": {
                                "name": "innerRbacCopy",
                                "count": "[length(parameters('roleAssignment').principalIds)]"
                            },
                            "properties": {
                                "roleDefinitionId": "[if(contains(parameters('builtInRoleNames'), parameters('roleAssignment').roleDefinitionIdOrName ), parameters('builtInRoleNames')[parameters('roleAssignment').roleDefinitionIdOrName] , parameters('roleAssignment').roleDefinitionIdOrName )]",
                                "principalId": "[array(parameters('roleAssignment').principalIds)[copyIndex()]]"
                            }
                        }
                    ]
                }
            }
        }
    ],
    "functions": [
    ],
    "outputs": {
        "virtualNetworkGatewayResourceGroup": {
            "type": "string",
            "value": "[resourceGroup().name]",
            "metadata": {
                "description": "The Resource Group the Virtual Network Gateway was deployed."
            }
        },
        "virtualNetworkGatewayName": {
            "type": "string",
            "value": "[parameters('virtualNetworkGatewayName')]",
            "metadata": {
                "description": "The Name of the Virtual Network Gateway."
            }
        },
        "virtualNetworkGatewayResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('virtualNetworkGatewayName'))]",
            "metadata": {
                "description": "The Resource Id of the Virtual Network Gateway."
            }
        },
        "activeActive": {
            "type": "bool",
            "value": "[variables('activeActive')]",
            "metadata": {
                "description": "Shows if the VNet gateway is configured in active-active mode."
            }
        }
    }
}