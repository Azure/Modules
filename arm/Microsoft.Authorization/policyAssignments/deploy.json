{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "policyAssignmentName": {
            "type": "string",
            "maxLength": 24,
            "metadata": {
                "description": "Required. Specifies the name of the policy assignment."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[deployment().location]",
            "metadata": {
                "description": "Optional. Location for all resources."
            }
        },
        "policyDefinitionID": {
            "type": "string",
            "metadata": {
                "description": "Required. Specifies the ID of the policy definition or policy set definition being assigned."
            }
        },
        "parameters": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Parameters for the policy assignment if needed."
            }
        },
        "identity": {
            "type": "string",
            "defaultValue": "SystemAssigned",
            "allowedValues": [
                "SystemAssigned",
                "None"
            ],
            "metadata": {
                "description": "Optional. The managed identity associated with the policy assignment. Policy assignments must include a resource identity when assigning 'Modify' policy definitions."
            }
        },
        "roleDefinitionIds": {
            "type": "Array",
            "defaultValue": [],
            "metadata": {
                "description": "Required. The IDs Of the Azure Role Definition list that is used to assign permissions to the identity. You need to provide either the fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'.. See https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles for the list IDs for built in Roles. They must match on what is on the policy definition"
            }
        },
        "policyAssignmentDescription": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. This message will be part of response in case of policy violation. If not provided, will be replaced with the Policy Assignment Name"
            }
        },
        "displayName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. The display name of the policy assignment. If not provided, will be replaced with the Policy Assignment Name"
            }
        },
        "metadata": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Optional. The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs."
            }
        },
        "nonComplianceMessage": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. The messages that describe why a resource is non-compliant with the policy. If not provided will be replaced with empty"
            }
        },
        "enforcementMode": {
            "type": "string",
            "defaultValue": "Default",
            "allowedValues": [
                "Default",
                "DoNotEnforce"
            ],
            "metadata": {
                "description": "Optional. The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. - Default or DoNotEnforce"
            }
        },
        "managementGroupId": {
            "type": "string",
            "defaultValue":"",
            "metadata": {
                "description":"Optional. The Target Scope for the Policy. The name of the management group for the policy assignment"
            }
        },
        "notScopes": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. The policy's excluded scopes"
            }
        }
    },
    "variables": {
        "emptyArray": [],
        "nonComplianceMessage": {
            "message": "[if(empty(parameters('nonComplianceMessage')),'null',parameters('nonComplianceMessage'))]"
        }
    },
    "resources": [
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "name": "[parameters('policyAssignmentName')]",
            "location": "[parameters('location')]",
            "apiVersion": "2020-09-01",
            "properties": {
                "scope":"[tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId'))]",
                "displayName": "[if(empty(parameters('displayName')),json('null'),parameters('displayName'))]",
                "metadata": "[if(empty(parameters('metadata')),json('null'),parameters('metadata'))]",
                "description": "[if(empty(parameters('policyAssignmentDescription')),json('null'),parameters('policyAssignmentDescription'))]",
                "policyDefinitionId": "[parameters('policyDefinitionID')]",
                "parameters": "[parameters('parameters')]",
                "nonComplianceMessages": "[if(empty(parameters('nonComplianceMessage')),variables('emptyArray'),array(variables('nonComplianceMessage')))]",
                "enforcementMode": "[parameters('enforcementMode')]",
                "notScopes": "[if(empty(parameters('notScopes')),variables('emptyArray'),parameters('notScopes'))]"
            },
            "identity": {
                "type": "[parameters('identity')]"
            }
        },
        {
            "condition": "[and(equals(parameters('identity'),'SystemAssigned'),not(empty(parameters('roleDefinitionIds'))))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "copy": {
                "name": "innerRbacSubCopy",
                "count": "[length(parameters('roleDefinitionIds'))]"
            },
            "name": "[guid(parameters('policyAssignmentName'),parameters('managementGroupId'),parameters('policyDefinitionID'),if(not(empty(parameters('roleDefinitionIds'))),parameters('roleDefinitionIds')[copyIndex('innerRbacSubCopy')],'placeholder'))]",
            "properties": {
                "roleDefinitionId": "[parameters('roleDefinitionIds')[copyIndex('innerRbacSubCopy')]]",
                "principalId": "[reference(concat('Microsoft.Authorization/policyAssignments/',parameters('policyAssignmentName')),'2020-09-01','Full').identity.principalId]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/policyAssignments',parameters('policyAssignmentName'))]"
            ]
        }
    ],
    "outputs": {
        "policyAssignmentName": {
            "type": "string",
            "value": "[parameters('policyAssignmentName')]",
            "metadata": {
                "description": "Name of the policy assignment."
            }
        },
        "policyAssignmentPrincipalId": {
            "type": "string",
            "value": "[if(and(equals(parameters('identity'),'SystemAssigned'),not(empty(parameters('roleDefinitionIds')))),reference(concat('Microsoft.Authorization/policyAssignments/',parameters('policyAssignmentName')),'2020-09-01','Full').identity.principalId,'null')]",
            "metadata": {
                "description": "The Principal ID of the managed Identity of the Policy Assigment"
            }
        }
    }
}