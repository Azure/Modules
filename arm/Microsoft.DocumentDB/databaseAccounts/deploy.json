{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1008.15138",
      "templateHash": "7844997883481758961"
    }
  },
  "parameters": {
    "databaseAccountName": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the Database Account"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags of the Database Account resource."
      }
    },
    "managedServiceIdentity": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "None",
        "SystemAssigned",
        "SystemAssigned, UserAssigned",
        "UserAssigned"
      ],
      "metadata": {
        "description": "Optional. The type of identity used for the database account. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' (default) will remove any identities from the database account."
      }
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Mandatory if 'managedServiceIdentity' contains UserAssigned. The list of user identities associated with the database account."
      }
    },
    "databaseAccountOfferType": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard"
      ],
      "metadata": {
        "description": "Optional. The offer type for the Cosmos DB database account."
      }
    },
    "locations": {
      "type": "array",
      "metadata": {
        "description": "Required. Locations enabled for the Cosmos DB account."
      }
    },
    "defaultConsistencyLevel": {
      "type": "string",
      "defaultValue": "Session",
      "metadata": {
        "description": "Optional. The default consistency level of the Cosmos DB account."
      },
      "allowedValues": [
        "Eventual",
        "ConsistentPrefix",
        "Session",
        "BoundedStaleness",
        "Strong"
      ]
    },
    "automaticFailover": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable automatic failover for regions"
      }
    },
    "maxStalenessPrefix": {
      "type": "int",
      "defaultValue": 100000,
      "metadata": {
        "description": "Optional. Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 1000000. Multi Region: 100000 to 1000000."
      },
      "maxValue": 2147483647,
      "minValue": 10
    },
    "maxIntervalInSeconds": {
      "type": "int",
      "defaultValue": 300,
      "metadata": {
        "description": "Optional. Max lag time (minutes). Required for BoundedStaleness. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400."
      },
      "maxValue": 86400,
      "minValue": 5
    },
    "serverVersion": {
      "type": "string",
      "defaultValue": "4.0",
      "allowedValues": [
        "3.2",
        "3.6",
        "4.0"
      ],
      "metadata": {
        "description": "Optional. Specifies the MongoDB server version to use."
      }
    },
    "sqlDatabases": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. SQL Databases configurations"
      }
    },
    "mongodbDatabases": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. MongoDB Databases configurations"
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
      }
    },
    "lock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "metadata": {
        "description": "Optional. Specify the type of lock."
      },
      "allowedValues": [
        "CanNotDelete",
        "NotSpecified",
        "ReadOnly"
      ]
    },
    "roleAssignments": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalIds' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or it's fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "maxValue": 365,
      "minValue": 0,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of the Diagnostic Storage Account."
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of Log Analytics."
      }
    },
    "eventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "eventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "logsToEnable": {
      "type": "array",
      "defaultValue": [
        "DataPlaneRequests",
        "MongoRequests",
        "QueryRuntimeStatistics",
        "PartitionKeyStatistics",
        "PartitionKeyRUConsumption",
        "ControlPlaneRequests",
        "CassandraRequests",
        "GremlinRequests",
        "TableApiRequests"
      ],
      "allowedValues": [
        "DataPlaneRequests",
        "MongoRequests",
        "QueryRuntimeStatistics",
        "PartitionKeyStatistics",
        "PartitionKeyRUConsumption",
        "ControlPlaneRequests",
        "CassandraRequests",
        "GremlinRequests",
        "TableApiRequests"
      ],
      "metadata": {
        "description": "Optional. The name of logs that will be streamed."
      }
    },
    "metricsToEnable": {
      "type": "array",
      "defaultValue": [
        "Requests"
      ],
      "allowedValues": [
        "Requests"
      ],
      "metadata": {
        "description": "Optional. The name of metrics that will be streamed."
      }
    }
  },
  "functions": [],
  "variables": {
    "copy": [
      {
        "name": "diagnosticsLogs",
        "count": "[length(parameters('logsToEnable'))]",
        "input": {
          "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      },
      {
        "name": "diagnosticsMetrics",
        "count": "[length(parameters('metricsToEnable'))]",
        "input": {
          "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
          "timeGrain": null,
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      },
      {
        "name": "databaseAccount_locations",
        "count": "[length(parameters('locations'))]",
        "input": {
          "failoverPriority": "[parameters('locations')[copyIndex('databaseAccount_locations')].failoverPriority]",
          "isZoneRedundant": "[parameters('locations')[copyIndex('databaseAccount_locations')].isZoneRedundant]",
          "locationName": "[parameters('locations')[copyIndex('databaseAccount_locations')].locationName]"
        }
      }
    ],
    "identity": {
      "type": "[parameters('managedServiceIdentity')]",
      "userAssignedIdentities": "[if(empty(parameters('userAssignedIdentities')), json('null'), parameters('userAssignedIdentities'))]"
    },
    "consistencyPolicy": {
      "Eventual": {
        "defaultConsistencyLevel": "Eventual"
      },
      "ConsistentPrefix": {
        "defaultConsistencyLevel": "ConsistentPrefix"
      },
      "Session": {
        "defaultConsistencyLevel": "Session"
      },
      "BoundedStaleness": {
        "defaultConsistencyLevel": "BoundedStaleness",
        "maxStalenessPrefix": "[parameters('maxStalenessPrefix')]",
        "maxIntervalInSeconds": "[parameters('maxIntervalInSeconds')]"
      },
      "Strong": {
        "defaultConsistencyLevel": "Strong"
      }
    },
    "builtInRoleNames": {
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Cosmos DB Account Reader Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fbdf93bf-df7d-467e-a4d2-9458aa1360c8')]",
      "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
      "CosmosBackupOperator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db7b14f2-5adf-42da-9f96-f2ee17bab5cb')]",
      "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    },
    "kind": "[if(not(empty(parameters('sqlDatabases'))), 'GlobalDocumentDB', if(not(empty(parameters('mongodbDatabases'))), 'MongoDB', 'Parse'))]",
    "databaseAccount_properties": "[if(not(empty(parameters('sqlDatabases'))), createObject('consistencyPolicy', variables('consistencyPolicy')[parameters('defaultConsistencyLevel')], 'locations', variables('databaseAccount_locations'), 'databaseAccountOfferType', parameters('databaseAccountOfferType'), 'enableAutomaticFailover', parameters('automaticFailover')), createObject('consistencyPolicy', variables('consistencyPolicy')[parameters('defaultConsistencyLevel')], 'locations', variables('databaseAccount_locations'), 'databaseAccountOfferType', parameters('databaseAccountOfferType'), 'apiProperties', createObject('serverVersion', parameters('serverVersion'))))]"
  },
  "resources": [
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2021-06-15",
      "name": "[parameters('databaseAccountName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": "[variables('identity')]",
      "kind": "[variables('kind')]",
      "properties": "[variables('databaseAccount_properties')]"
    },
    {
      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2016-09-01",
      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('databaseAccountName'))]",
      "name": "[format('{0}-{1}-lock', parameters('databaseAccountName'), parameters('lock'))]",
      "properties": {
        "level": "[parameters('lock')]",
        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
      ]
    },
    {
      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('databaseAccountName'))]",
      "name": "[format('{0}-diagnosticsetting', parameters('databaseAccountName'))]",
      "properties": {
        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
        "metrics": "[if(and(and(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId'))), empty(parameters('eventHubAuthorizationRuleId'))), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]",
        "logs": "[if(and(and(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId'))), empty(parameters('eventHubAuthorizationRuleId'))), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('cuaId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('pid-{0}', parameters('cuaId'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "14669053462841078328"
            }
          },
          "functions": [],
          "resources": []
        }
      }
    },
    {
      "copy": {
        "name": "databaseAccount_rbac",
        "count": "[length(parameters('roleAssignments'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "roleAssignmentObj": {
            "value": "[parameters('roleAssignments')[copyIndex()]]"
          },
          "builtInRoleNames": {
            "value": "[variables('builtInRoleNames')]"
          },
          "resourceName": {
            "value": "[parameters('databaseAccountName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "2537468200017444439"
            }
          },
          "parameters": {
            "roleAssignmentObj": {
              "type": "object"
            },
            "builtInRoleNames": {
              "type": "object"
            },
            "resourceName": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "copy": {
                "name": "roleAssigment",
                "count": "[length(parameters('roleAssignmentObj').principalIds)]"
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/providers/roleAssignments",
              "apiVersion": "2021-04-01-preview",
              "name": "[format('{0}/Microsoft.Authorization/{1}', parameters('resourceName'), guid(parameters('resourceName'), parameters('roleAssignmentObj').principalIds[copyIndex()], parameters('roleAssignmentObj').roleDefinitionIdOrName))]",
              "properties": {
                "roleDefinitionId": "[if(contains(parameters('builtInRoleNames'), parameters('roleAssignmentObj').roleDefinitionIdOrName), parameters('builtInRoleNames')[parameters('roleAssignmentObj').roleDefinitionIdOrName], parameters('roleAssignmentObj').roleDefinitionIdOrName)]",
                "principalId": "[parameters('roleAssignmentObj').principalIds[copyIndex()]]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
      ]
    },
    {
      "copy": {
        "name": "sqlDatabases_resource",
        "count": "[length(parameters('sqlDatabases'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}-sqldb-{1}', uniqueString(deployment().name, parameters('location')), parameters('sqlDatabases')[copyIndex()].name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "sqlDatabaseName": {
            "value": "[parameters('sqlDatabases')[copyIndex()].name]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "databaseAccountName": {
            "value": "[parameters('databaseAccountName')]"
          },
          "cuaId": {
            "value": "[parameters('cuaId')]"
          },
          "containers": {
            "value": "[parameters('sqlDatabases')[copyIndex()].containers]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "1490929232305887185"
            }
          },
          "parameters": {
            "databaseAccountName": {
              "type": "string",
              "metadata": {
                "description": "Required. Id of the Cosmos DB database account."
              }
            },
            "sqlDatabaseName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the SQL Database "
              }
            },
            "containers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of containers to deploy in the SQL database."
              }
            },
            "throughput": {
              "type": "int",
              "defaultValue": 400,
              "metadata": {
                "description": "Optional. Request Units per second"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the SQL Database resource."
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2021-06-15",
              "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('sqlDatabaseName'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "resource": {
                  "id": "[parameters('sqlDatabaseName')]"
                },
                "options": {
                  "throughput": "[parameters('throughput')]"
                }
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "14669053462841078328"
                    }
                  },
                  "functions": [],
                  "resources": []
                }
              }
            },
            {
              "copy": {
                "name": "container",
                "count": "[length(parameters('containers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}-sqldb-{1}', uniqueString(deployment().name), parameters('containers')[copyIndex()])]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "sqlDatabaseName": {
                    "value": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('sqlDatabaseName'))]"
                  },
                  "containerName": {
                    "value": "[parameters('containers')[copyIndex()]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "8446273184352045517"
                    }
                  },
                  "parameters": {
                    "sqlDatabaseName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the SQL Database "
                      }
                    },
                    "containerName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the container."
                      }
                    },
                    "throughput": {
                      "type": "int",
                      "defaultValue": 400,
                      "metadata": {
                        "description": "Optional. Request Units per second"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the SQL Database resource."
                      }
                    },
                    "paths": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of paths using which data within the container can be partitioned"
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "Hash",
                      "allowedValues": [
                        "Hash",
                        "MultiHash",
                        "Range"
                      ],
                      "metadata": {
                        "description": "Optional. Indicates the kind of algorithm used for partitioning"
                      }
                    },
                    "cuaId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
                      }
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
                      "apiVersion": "2021-07-01-preview",
                      "name": "[format('{0}/{1}', parameters('sqlDatabaseName'), parameters('containerName'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "resource": {
                          "id": "[parameters('containerName')]",
                          "partitionKey": {
                            "paths": "[parameters('paths')]",
                            "kind": "[parameters('kind')]"
                          }
                        },
                        "options": {
                          "throughput": "[parameters('throughput')]"
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('cuaId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-06-01",
                      "name": "[format('pid-{0}', parameters('cuaId'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {},
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1008.15138",
                              "templateHash": "14669053462841078328"
                            }
                          },
                          "functions": [],
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "containerName": {
                      "type": "string",
                      "value": "[format('{0}/{1}', parameters('sqlDatabaseName'), parameters('containerName'))]",
                      "metadata": {
                        "description": "The name of the container."
                      }
                    },
                    "containerResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', split(format('{0}/{1}', parameters('sqlDatabaseName'), parameters('containerName')), '/')[0], split(format('{0}/{1}', parameters('sqlDatabaseName'), parameters('containerName')), '/')[1], split(format('{0}/{1}', parameters('sqlDatabaseName'), parameters('containerName')), '/')[2])]",
                      "metadata": {
                        "description": "The Resource Id of the container."
                      }
                    },
                    "containerResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the Resource Group the container was created in."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', parameters('databaseAccountName'), parameters('sqlDatabaseName')), '/')[0], split(format('{0}/{1}', parameters('databaseAccountName'), parameters('sqlDatabaseName')), '/')[1])]"
              ]
            }
          ],
          "outputs": {
            "sqlDatabaseName": {
              "type": "string",
              "value": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('sqlDatabaseName'))]",
              "metadata": {
                "description": "The name of the sql database."
              }
            },
            "sqlDatabaseResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', parameters('databaseAccountName'), parameters('sqlDatabaseName')), '/')[0], split(format('{0}/{1}', parameters('databaseAccountName'), parameters('sqlDatabaseName')), '/')[1])]",
              "metadata": {
                "description": "The Resource Id of the sql database."
              }
            },
            "sqlDatabaseResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Resource Group the sql database was created in."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
      ]
    },
    {
      "copy": {
        "name": "mongodbDatabases_resource",
        "count": "[length(parameters('mongodbDatabases'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}-mongodb-{1}', uniqueString(deployment().name, parameters('location')), parameters('mongodbDatabases')[copyIndex()].name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "mongodbDatabaseName": {
            "value": "[parameters('mongodbDatabases')[copyIndex()].name]"
          },
          "collections": {
            "value": "[parameters('mongodbDatabases')[copyIndex()].collections]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "databaseAccountName": {
            "value": "[parameters('databaseAccountName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "5186911110999733162"
            }
          },
          "parameters": {
            "databaseAccountName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Cosmos DB database account."
              }
            },
            "mongodbDatabaseName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the mongodb database"
              }
            },
            "throughput": {
              "type": "int",
              "defaultValue": 400,
              "metadata": {
                "description": "Optional. Name of the mongodb database"
              }
            },
            "collections": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Collections in the mongodb database"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases",
              "apiVersion": "2021-07-01-preview",
              "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('mongodbDatabaseName'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "resource": {
                  "id": "[parameters('mongodbDatabaseName')]"
                },
                "options": {
                  "throughput": "[parameters('throughput')]"
                }
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "14669053462841078328"
                    }
                  },
                  "functions": [],
                  "resources": []
                }
              }
            },
            {
              "copy": {
                "name": "mongodbDatabase_collections",
                "count": "[length(parameters('collections'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}-collection-{1}', uniqueString(deployment().name, format('{0}/{1}', parameters('databaseAccountName'), parameters('mongodbDatabaseName'))), parameters('collections')[copyIndex()].collectionName)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "collectionName": {
                    "value": "[parameters('collections')[copyIndex()].collectionName]"
                  },
                  "databaseAccountName": {
                    "value": "[parameters('databaseAccountName')]"
                  },
                  "indexes": {
                    "value": "[parameters('collections')[copyIndex()].indexes]"
                  },
                  "mongodbDatabaseName": {
                    "value": "[parameters('mongodbDatabaseName')]"
                  },
                  "shardKey": {
                    "value": "[parameters('collections')[copyIndex()].shardKey]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1008.15138",
                      "templateHash": "7240066445764202457"
                    }
                  },
                  "parameters": {
                    "databaseAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Cosmos DB database account."
                      }
                    },
                    "mongodbDatabaseName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the mongodb database"
                      }
                    },
                    "collectionName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the collection"
                      }
                    },
                    "throughput": {
                      "type": "int",
                      "defaultValue": 400,
                      "metadata": {
                        "description": "Optional. Name of the mongodb database"
                      }
                    },
                    "indexes": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. Indexes for the collection"
                      }
                    },
                    "shardKey": {
                      "type": "object",
                      "metadata": {
                        "description": "Required. ShardKey for the collection"
                      }
                    },
                    "cuaId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
                      }
                    }
                  },
                  "functions": [],
                  "resources": [
                    {
                      "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections",
                      "apiVersion": "2021-07-01-preview",
                      "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('collectionName'))]",
                      "properties": {
                        "options": {
                          "throughput": "[parameters('throughput')]"
                        },
                        "resource": {
                          "id": "[parameters('collectionName')]",
                          "indexes": "[parameters('indexes')]",
                          "shardKey": "[parameters('shardKey')]"
                        }
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('cuaId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-06-01",
                      "name": "[format('pid-{0}', parameters('cuaId'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {},
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1008.15138",
                              "templateHash": "14669053462841078328"
                            }
                          },
                          "functions": [],
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "collectionName": {
                      "type": "string",
                      "value": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('collectionName'))]",
                      "metadata": {
                        "description": "The name of the mongodb database."
                      }
                    },
                    "collectionResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections', split(format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('collectionName')), '/')[0], split(format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('collectionName')), '/')[1], split(format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('collectionName')), '/')[2])]",
                      "metadata": {
                        "description": "The Resource Id of the mongodb database."
                      }
                    },
                    "collectionResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the Resource Group the mongodb database was created in."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', split(format('{0}/{1}', parameters('databaseAccountName'), parameters('mongodbDatabaseName')), '/')[0], split(format('{0}/{1}', parameters('databaseAccountName'), parameters('mongodbDatabaseName')), '/')[1])]"
              ]
            }
          ],
          "outputs": {
            "mongodbDatabaseName": {
              "type": "string",
              "value": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('mongodbDatabaseName'))]",
              "metadata": {
                "description": "The name of the mongodb database."
              }
            },
            "mongodbDatabaseResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', split(format('{0}/{1}', parameters('databaseAccountName'), parameters('mongodbDatabaseName')), '/')[0], split(format('{0}/{1}', parameters('databaseAccountName'), parameters('mongodbDatabaseName')), '/')[1])]",
              "metadata": {
                "description": "The Resource Id of the mongodb database."
              }
            },
            "mongodbDatabaseResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Resource Group the mongodb database was created in."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
      ]
    }
  ],
  "outputs": {
    "databaseAccountName": {
      "type": "string",
      "value": "[parameters('databaseAccountName')]",
      "metadata": {
        "description": "The name of the database account."
      }
    },
    "databaseAccountResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]",
      "metadata": {
        "description": "The Resource Id of the database account."
      }
    },
    "databaseAccountResourceGroup": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The name of the Resource Group the database account was created in."
      }
    }
  }
}