{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"recoveryVaultName": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Required. Name of the Azure Recovery Service Vault"
			}
		},
		"enableCRR": {
			"type": "bool",
			"defaultValue": true,
			"metadata": {
				"description": "Optional. Enable CRR (Works if vault has not registered any backup instance)"
			}
		},
		"vaultStorageType": {
			"type": "string",
			"defaultValue": "GeoRedundant",
			"allowedValues": [
				"LocallyRedundant",
				"GeoRedundant"
			],
			"metadata": {
				"description": "Optional. Change Vault Storage Type (Works if vault has not registered any backup instance)"
			}
		},
		"cuaId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
			}
		},
		"location": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]",
			"metadata": {
				"description": "Optional. Location for all resources."
			}
		},
		"backupPolicies": {
			"type": "array",
			"defaultValue": [
			],
			"metadata": {
				"description": "Optional. List of all backup policies."
			}
		},
		"protectionContainers": {
			"type": "array",
			"minLength": 0,
			"defaultValue": [
			],
			"metadata": {
				"description": "Optional. List of all protection containers."
			}
		},
		"diagnosticLogsRetentionInDays": {
			"type": "int",
			"defaultValue": 365,
			"minValue": 0,
			"maxValue": 365,
			"metadata": {
				"description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
			}
		},
		"diagnosticStorageAccountId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optional. Resource identifier of the Diagnostic Storage Account."
			}
		},
		"workspaceId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optional. Resource identifier of Log Analytics."
			}
		},
		"eventHubAuthorizationRuleId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
			}
		},
		"eventHubName": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
			}
		},
		"roleAssignments": {
			"defaultValue": [
			],
			"type": "array",
			"metadata": {
				"description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
			}
		},
		"lockForDeletion": {
			"type": "bool",
			"defaultValue": false,
			"metadata": {
				"description": "Optional. Switch to lock Recovery Service Vault from deletion."
			}
		},
		"tags": {
			"type": "object",
			"defaultValue": {
			},
			"metadata": {
				"description": "Optional. Tags of the Recovery Service Vault resource."
			}
		}
	},
	"variables": {
		"dummyProtectionContainers": {
			"name": "dummyValue"
		},
		"dummyPolicy": {
			"name": "dummyValue"
		},
		"protectionContainers": "[if(greater(length(parameters('protectionContainers')),0),parameters('protectionContainers'), array(variables('dummyProtectionContainers')))]",
		"protectionPolicy": "[if(greater(length(parameters('backupPolicies')),0),parameters('backupPolicies'), array(variables('dummyPolicy')))]",
		"diagnosticsLogs": [
			{
				"category": "AzureBackupReport",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "CoreAzureBackup",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AddonAzureBackupJobs",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AddonAzureBackupAlerts",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AddonAzureBackupPolicy",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AddonAzureBackupStorage",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AddonAzureBackupProtectedInstance",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AzureSiteRecoveryJobs",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AzureSiteRecoveryEvents",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AzureSiteRecoveryReplicatedItems",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AzureSiteRecoveryReplicationStats",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AzureSiteRecoveryRecoveryPoints",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AzureSiteRecoveryReplicationDataUploadRate",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AzureSiteRecoveryProtectedDiskDataChurn",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			}
		],
		"builtInRoleNames": {
			"Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
			"Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','b24988ac-6180-42a0-ab88-20f7382dd24c')]",
			"Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
			"Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','5e467623-bb1f-42f4-a55d-6e525e11384b')]",
			"Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','00c29273-979b-4161-815c-10b084fb9324')]",
			"Backup Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','a795c7a0-d4a2-40c1-ae25-d81f01202912')]",
			"Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
			"Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','73c42c96-874c-492b-b04d-ab87d138a893')]",
			"Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','641177b8-a67a-45b9-a033-47bc880bb21e')]",
			"Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
			"Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
			"Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
			"Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','3913510d-42f4-4e42-8a64-420c390055eb')]",
			"Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
			"Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','36243c78-bf99-498c-9df9-86d9f8d28608')]",
			"Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
			"Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','494ae006-db33-4328-bf46-533a6560a3ca')]",
			"Site Recovery Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','dbaa88c4-0c30-4179-9fb3-46319faa6149')]",
			"User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
			"Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions','9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
		}
	},
	"resources": [
		{
			"condition": "[not(empty(parameters('cuaId')))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2020-06-01",
			"name": "[concat('pid-', parameters('cuaId'))]",
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"resources": [
					]
				}
			}
		},
		{
			"name": "[parameters('recoveryVaultName')]",
			"type": "Microsoft.RecoveryServices/vaults",
			"apiVersion": "2020-10-01",
			"location": "[parameters('location')]",
			"tags": "[parameters('tags')]",
			"sku": {
				"name": "RS0",
				"tier": "Standard"
			},
			"properties": {
			},
			"resources": [
				{
					"type": "providers/locks",
					"apiVersion": "2016-09-01",
					"condition": "[parameters('lockForDeletion')]",
					"name": "Microsoft.Authorization/recoveryServiceVaultDoNotDelete",
					"dependsOn": [
						"[concat('Microsoft.RecoveryServices/vaults/', parameters('recoveryVaultName'))]"
					],
					"comments": "Resource lock on Azure Recovery Service Vault",
					"properties": {
						"level": "CannotDelete"
					}
				},
				{
					"type": "Microsoft.RecoveryServices/vaults/providers/diagnosticsettings",
					"apiVersion": "2017-05-01-preview",
					"name": "[concat(parameters('recoveryVaultName'), '/Microsoft.Insights/service')]",
					"location": "[parameters('location')]",
					"condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
					"dependsOn": [
						"[concat('Microsoft.RecoveryServices/vaults/', parameters('recoveryVaultName'))]"
					],
					"properties": {
						"storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
						"workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
						"eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
						"eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
						"logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
					}
				}
			]
		},
		{
			"type": "Microsoft.RecoveryServices/vaults/backupstorageconfig",
			"apiVersion": "2020-02-02",
			"name": "[concat(parameters('recoveryVaultName'), '/vaultstorageconfig')]",
			"dependsOn": [
				"[resourceId('Microsoft.RecoveryServices/vaults/', parameters('recoveryVaultName'))]"
			],
			"properties": {
				"StorageModelType": "[parameters('vaultStorageType')]",
				"CrossRegionRestoreFlag": "[parameters('enableCRR')]"
			}
		},
		{
			"condition": "[not(empty(array(parameters('backupPolicies'))))]",
			"type": "Microsoft.Resources/deployments",
			"name": "[concat('backupPolicies-', if(empty(parameters('backupPolicies')), 'dummy', copyIndex('policyCopy')))]",
			"apiVersion": "2020-06-01",
			"copy": {
				"name": "policyCopy",
				"count": "[if(not(empty(variables('protectionPolicy'))), length(variables('protectionPolicy')), 1)]"
			},
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"resources": [
						{
							"type": "Microsoft.RecoveryServices/vaults/backupPolicies",
							"name": "[concat(parameters('recoveryVaultName'), '/', variables('protectionPolicy')[copyIndex()].name)]",
							"apiVersion": "2019-06-15",
							"location": "[resourceGroup().location]",
							"properties": "[variables('protectionPolicy')[copyIndex('policyCopy')].properties]"
						}
					]
				}
			},
			"dependsOn": [
				"[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryVaultName'))]"
			]
		},
		{
			"condition": "[not(empty(array(parameters('protectionContainers'))))]",
			"type": "Microsoft.Resources/deployments",
			"name": "[concat('protectionContainers-', if(empty(parameters('protectionContainers')), 'dummy', copyIndex('protectionContainers')))]",
			"apiVersion": "2020-06-01",
			"copy": {
				"name": "protectionContainersCopy",
				"count": "[if(not(empty(variables('protectionContainers'))), length(variables('protectionContainers')), 1)]"
			},
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"resources": [
						{
							"type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers",
							"name": "[concat(parameters('recoveryVaultName'), '/protectionContainers/', variables('protectionContainers')[copyIndex()].name)]",
							"apiVersion": "2016-12-01",
							"location": "[resourceGroup().location]",
							"properties": {
								"sourceResourceId": "[if(empty(variables('protectionContainers')[copyIndex()].sourceResourceId), json('null'), variables('protectionContainers')[copyIndex()].sourceResourceId)]",
								"friendlyName": "[if(empty(variables('protectionContainers')[copyIndex()].friendlyName), json('null'), variables('protectionContainers')[copyIndex()].friendlyName)]",
								"backupManagementType": "[if(empty(variables('protectionContainers')[copyIndex()].backupManagementType), json('null'), variables('protectionContainers')[copyIndex()].backupManagementType)]",
								"containerType": "[if(empty(variables('protectionContainers')[copyIndex()].containerType), json('null'), variables('protectionContainers')[copyIndex()].containerType)]"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryVaultName'))]"
			]
		},
		{
			"name": "[concat('rbac-',deployment().name, copyIndex())]",
			"apiVersion": "2020-06-01",
			"type": "Microsoft.Resources/deployments",
			"condition": "[not(empty(parameters('roleAssignments')))]",
			"dependsOn": [
				"[parameters('recoveryVaultName')]"
			],
			"copy": {
				"name": "rbacDeplCopy",
				"count": "[length(parameters('roleAssignments'))]"
			},
			"properties": {
				"mode": "Incremental",
				"expressionEvaluationOptions": {
					"scope": "inner"
				},
				"parameters": {
					"roleAssignment": {
						"value": "[parameters('roleAssignments')[copyIndex()]]"
					},
					"builtInRoleNames": {
						"value": "[variables('builtInRoleNames')]"
					},
					"recoveryVaultName": {
						"value": "[parameters('recoveryVaultName')]"
					}
				},
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {
						"roleAssignment": {
							"type": "object"
						},
						"builtInRoleNames": {
							"type": "object"
						},
						"recoveryVaultName": {
							"type": "string"
						}
					},
					"resources": [
						{
							"type": "Microsoft.RecoveryServices/vaults/providers/roleAssignments",
							"apiVersion": "2020-04-01-preview",
							"name": "[concat(parameters('recoveryVaultName'), '/Microsoft.Authorization/', guid(uniqueString(concat(parameters('recoveryVaultName'), array(parameters('roleAssignment').principalIds)[copyIndex('innerRbacCopy')], parameters('roleAssignment').roleDefinitionIdOrName ) )))]",
							"dependsOn": [
							],
							"copy": {
								"name": "innerRbacCopy",
								"count": "[length(parameters('roleAssignment').principalIds)]"
							},
							"properties": {
								"roleDefinitionId": "[if(contains(parameters('builtInRoleNames'), parameters('roleAssignment').roleDefinitionIdOrName ), parameters('builtInRoleNames')[parameters('roleAssignment').roleDefinitionIdOrName] , parameters('roleAssignment').roleDefinitionIdOrName )]",
								"principalId": "[array(parameters('roleAssignment').principalIds)[copyIndex()]]"
							}
						}
					]
				}
			}
		}
	],
	"functions": [
	],
	"outputs": {
		"recoveryServicesVaultResourceId": {
			"type": "string",
			"value": "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryVaultName'))]",
			"metadata": {
				"description": "The Resource Id of the Recovery Services Vault."
			}
		},
		"recoveryServicesVaultResourceGroup": {
			"type": "string",
			"value": "[resourceGroup().name]",
			"metadata": {
				"description": "The Resource Group the Recovery Services Vault was deployed to."
			}
		},
		"recoveryServicesVaultName": {
			"type": "string",
			"value": "[parameters('recoveryVaultName')]",
			"metadata": {
				"description": "The Name of the Recovery Services Vault."
			}
		}
	}
}
