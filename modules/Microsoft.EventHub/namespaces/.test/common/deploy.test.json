{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "[format('ms.eventhub.namespaces-{0}-rg', parameters('serviceShort'))]",
      "maxLength": 90,
      "metadata": {
        "description": "Optional. The name of the resource group to deploy for testing purposes."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Optional. The location to deploy resources to."
      }
    },
    "serviceShort": {
      "type": "string",
      "defaultValue": "ehncom",
      "metadata": {
        "description": "Optional. A short identifier for the kind of deployment. Should be kept short to not run into resource-name length-constraints."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[parameters('resourceGroupName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualNetworkName": {
            "value": "[format('dep-<<namePrefix>>-vnet-{0}', parameters('serviceShort'))]"
          },
          "managedIdentityName": {
            "value": "[format('dep-<<namePrefix>>-msi-{0}', parameters('serviceShort'))]"
          },
          "storageAccountName": {
            "value": "[format('dep<<namePrefix>>sa{0}', parameters('serviceShort'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location to deploy to."
              }
            },
            "virtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Virtual Network to create."
              }
            },
            "managedIdentityName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Managed Identity to create."
              }
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Storage Account to create."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', 'privatelink.servicebus.windows.net', format('{0}-vnetlink', parameters('virtualNetworkName')))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.servicebus.windows.net')]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-01-01",
              "name": "[parameters('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/24"
                  ]
                },
                "subnets": [
                  {
                    "name": "defaultSubnet",
                    "properties": {
                      "addressPrefix": "10.0.0.0/24",
                      "serviceEndpoints": [
                        {
                          "service": "Microsoft.EventHub"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "privatelink.servicebus.windows.net",
              "location": "global"
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('managedIdentityName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-05-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2"
            }
          ],
          "outputs": {
            "subnetResourceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2022-01-01').subnets[0].id]",
              "metadata": {
                "description": "The resource ID of the created Virtual Network Subnet."
              }
            },
            "managedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId]",
              "metadata": {
                "description": "The principal ID of the created Managed Identity."
              }
            },
            "managedIdentityResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
              "metadata": {
                "description": "The resource ID of the created Managed Identity."
              }
            },
            "privateDNSZoneResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.servicebus.windows.net')]",
              "metadata": {
                "description": "The resource ID of the created Private DNS Zone."
              }
            },
            "storageAccountResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
              "metadata": {
                "description": "The resource ID of the created Storage Account."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location')))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[format('dep<<namePrefix>>diasa{0}01', parameters('serviceShort'))]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[format('dep-<<namePrefix>>-law-{0}', parameters('serviceShort'))]"
          },
          "eventHubNamespaceEventHubName": {
            "value": "[format('dep-<<namePrefix>>-evh-{0}', parameters('serviceShort'))]"
          },
          "eventHubNamespaceName": {
            "value": "[format('dep-<<namePrefix>>-evhns-{0}', parameters('serviceShort'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Required. The name of the storage account to create."
              }
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the log analytics workspace to create."
              }
            },
            "eventHubNamespaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the event hub namespace to create."
              }
            },
            "eventHubNamespaceEventHubName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the event hub to create inside the event hub namespace."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location to deploy resources to."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}', parameters('eventHubNamespaceName'), parameters('eventHubNamespaceEventHubName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
              ]
            },
            {
              "type": "Microsoft.EventHub/namespaces/authorizationRules",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('eventHubNamespaceName'), 'RootManageSharedAccessKey')]",
              "properties": {
                "rights": [
                  "Listen",
                  "Manage",
                  "Send"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-08-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "Standard_LRS"
              },
              "properties": {
                "allowBlobPublicAccess": false
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-12-01-preview",
              "name": "[parameters('logAnalyticsWorkspaceName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.EventHub/namespaces",
              "apiVersion": "2021-11-01",
              "name": "[parameters('eventHubNamespaceName')]",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "storageAccountResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
              "metadata": {
                "description": "The resource ID of the created Storage Account."
              }
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
              "metadata": {
                "description": "The resource ID of the created Log Analytics Workspace."
              }
            },
            "eventHubNamespaceResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]",
              "metadata": {
                "description": "The resource ID of the created Event Hub Namespace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "value": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', parameters('eventHubNamespaceName'), 'RootManageSharedAccessKey')]",
              "metadata": {
                "description": "The resource ID of the created Event Hub Namespace Authorization Rule."
              }
            },
            "eventHubNamespaceEventHubName": {
              "type": "string",
              "value": "[parameters('eventHubNamespaceEventHubName')]",
              "metadata": {
                "description": "The name of the created Event Hub Namespace Event Hub."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-test-{1}', uniqueString(deployment().name), parameters('serviceShort'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('<<namePrefix>>{0}001', parameters('serviceShort'))]"
          },
          "authorizationRules": {
            "value": [
              {
                "name": "RootManageSharedAccessKey",
                "rights": [
                  "Listen",
                  "Manage",
                  "Send"
                ]
              },
              {
                "name": "SendListenAccess",
                "rights": [
                  "Listen",
                  "Send"
                ]
              }
            ]
          },
          "diagnosticLogsRetentionInDays": {
            "value": 7
          },
          "diagnosticStorageAccountId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.storageAccountResourceId.value]"
          },
          "diagnosticWorkspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.logAnalyticsWorkspaceResourceId.value]"
          },
          "diagnosticEventHubAuthorizationRuleId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.eventHubAuthorizationRuleId.value]"
          },
          "diagnosticEventHubName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.eventHubNamespaceEventHubName.value]"
          },
          "eventHubs": {
            "value": [
              {
                "name": "<<namePrefix>>-az-evh-x-001"
              },
              {
                "authorizationRules": [
                  {
                    "name": "RootManageSharedAccessKey",
                    "rights": [
                      "Listen",
                      "Manage",
                      "Send"
                    ]
                  },
                  {
                    "name": "SendListenAccess",
                    "rights": [
                      "Listen",
                      "Send"
                    ]
                  }
                ],
                "captureDescriptionDestinationArchiveNameFormat": "{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}",
                "captureDescriptionDestinationBlobContainer": "eventhub",
                "captureDescriptionDestinationName": "EventHubArchive.AzureBlockBlob",
                "captureDescriptionDestinationStorageAccountResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.storageAccountResourceId.value]",
                "captureDescriptionEnabled": true,
                "captureDescriptionEncoding": "Avro",
                "captureDescriptionIntervalInSeconds": 300,
                "captureDescriptionSizeLimitInBytes": 314572800,
                "captureDescriptionSkipEmptyArchives": true,
                "consumerGroups": [
                  {
                    "name": "custom",
                    "userMetadata": "customMetadata"
                  }
                ],
                "messageRetentionInDays": 1,
                "name": "<<namePrefix>>-az-evh-x-002",
                "partitionCount": 2,
                "roleAssignments": [
                  {
                    "roleDefinitionIdOrName": "Reader",
                    "principalIds": [
                      "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.managedIdentityPrincipalId.value]"
                    ],
                    "principalType": "ServicePrincipal"
                  }
                ],
                "status": "Active"
              }
            ]
          },
          "lock": {
            "value": "CanNotDelete"
          },
          "networkRuleSets": {
            "value": {
              "defaultAction": "Deny",
              "ipRules": [
                {
                  "action": "Allow",
                  "ipMask": "10.10.10.10"
                }
              ],
              "trustedServiceAccessEnabled": false,
              "virtualNetworkRules": [
                {
                  "ignoreMissingVnetServiceEndpoint": true,
                  "subnetResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.subnetResourceId.value]"
                }
              ]
            }
          },
          "privateEndpoints": {
            "value": [
              {
                "privateDnsZoneGroup": {
                  "privateDNSResourceIds": [
                    "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.privateDNSZoneResourceId.value]"
                  ]
                },
                "service": "namespace",
                "subnetResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.subnetResourceId.value]"
              }
            ]
          },
          "roleAssignments": {
            "value": [
              {
                "roleDefinitionIdOrName": "Reader",
                "principalIds": [
                  "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.managedIdentityPrincipalId.value]"
                ],
                "principalType": "ServicePrincipal"
              }
            ]
          },
          "systemAssignedIdentity": {
            "value": true
          },
          "userAssignedIdentities": {
            "value": {
              "[format('{0}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.managedIdentityResourceId.value)]": {}
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 50,
              "metadata": {
                "description": "Required. The name of the event hub namespace."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Basic",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. event hub plan SKU name."
              }
            },
            "skuCapacity": {
              "type": "int",
              "defaultValue": 1,
              "maxValue": 20,
              "minValue": 1,
              "metadata": {
                "description": "Optional. Event Hub plan scale-out capacity of the resource."
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Switch to make the Event Hub Namespace zone redundant."
              }
            },
            "isAutoInflateEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Switch to enable the Auto Inflate feature of Event Hub."
              }
            },
            "maximumThroughputUnits": {
              "type": "int",
              "defaultValue": 1,
              "maxValue": 20,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Upper limit of throughput units when AutoInflate is enabled, value should be within 0 to 20 throughput units."
              }
            },
            "authorizationRules": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "RootManageSharedAccessKey",
                  "rights": [
                    "Listen",
                    "Manage",
                    "Send"
                  ]
                }
              ],
              "metadata": {
                "description": "Optional. Authorization Rules for the Event Hub namespace."
              }
            },
            "privateEndpoints": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "networkRuleSets": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Configure networking options. This object contains IPs/Subnets to allow or restrict access to private endpoints only. For security reasons, it is recommended to configure this object on the Namespace."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "",
                "CanNotDelete",
                "ReadOnly"
              ]
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
              }
            },
            "eventHubs": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The event hubs to deploy into this namespace."
              }
            },
            "disasterRecoveryConfig": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The disaster recovery config for this namespace."
              }
            },
            "diagnosticLogCategoriesToEnable": {
              "type": "array",
              "allowedValues": [
                "ArchiveLogs",
                "OperationalLogs",
                "AutoScaleLogs",
                "KafkaCoordinatorLogs",
                "KafkaUserErrorLogs",
                "EventHubVNetConnectionEvent",
                "CustomerManagedKeyUserLogs",
                "RuntimeAuditLogs",
                "ApplicationMetricsLogs"
              ],
              "defaultValue": [
                "ArchiveLogs",
                "OperationalLogs",
                "AutoScaleLogs",
                "KafkaCoordinatorLogs",
                "KafkaUserErrorLogs",
                "EventHubVNetConnectionEvent",
                "CustomerManagedKeyUserLogs",
                "RuntimeAuditLogs",
                "ApplicationMetricsLogs"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "diagnosticMetricsToEnable": {
              "type": "array",
              "allowedValues": [
                "AllMetrics"
              ],
              "defaultValue": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "diagnosticSettingsName": {
              "type": "string",
              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "metadata": {
                "description": "Optional. The name of the diagnostic setting, if deployed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                "input": {
                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                "input": {
                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "maximumThroughputUnitsVar": "[if(not(parameters('isAutoInflateEnabled')), 0, parameters('maximumThroughputUnits'))]",
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]",
            "enableReferencedModulesTelemetry": false
          },
          "resources": [
            {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            {
              "type": "Microsoft.EventHub/namespaces",
              "apiVersion": "2021-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('skuName')]",
                "capacity": "[parameters('skuCapacity')]"
              },
              "properties": {
                "zoneRedundant": "[parameters('zoneRedundant')]",
                "isAutoInflateEnabled": "[parameters('isAutoInflateEnabled')]",
                "maximumThroughputUnits": "[variables('maximumThroughputUnitsVar')]"
              }
            },
            {
              "condition": "[not(empty(parameters('lock')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2017-04-01",
              "scope": "[format('Microsoft.EventHub/namespaces/{0}', parameters('name'))]",
              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.EventHub/namespaces/{0}', parameters('name'))]",
              "name": "[parameters('diagnosticSettingsName')]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "eventHubNamespace_authorizationRules",
                "count": "[length(parameters('authorizationRules'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-EvhbNamespace-AuthRule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "namespaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('authorizationRules')[copyIndex()].name]"
                  },
                  "rights": {
                    "value": "[if(contains(parameters('authorizationRules')[copyIndex()], 'rights'), parameters('authorizationRules')[copyIndex()].rights, createArray())]"
                  },
                  "enableDefaultTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "namespaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent event hub namespace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the authorization rule."
                      }
                    },
                    "rights": {
                      "type": "array",
                      "allowedValues": [
                        "Listen",
                        "Manage",
                        "Send"
                      ],
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The rights associated with the rule."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.EventHub/namespaces/authorizationRules",
                      "apiVersion": "2021-11-01",
                      "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('name'))]",
                      "properties": {
                        "rights": "[parameters('rights')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the authorization rule."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', parameters('namespaceName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the authorization rule."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the authorization rule was created in."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('disasterRecoveryConfig')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-EvhbNamespace-DisRecConfig', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "namespaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('disasterRecoveryConfig').name]"
                  },
                  "partnerNamespaceId": {
                    "value": "[if(contains(parameters('disasterRecoveryConfig'), 'partnerNamespaceId'), parameters('disasterRecoveryConfig').partnerNamespaceId, '')]"
                  },
                  "enableDefaultTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "namespaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent event hub namespace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the disaster recovery config."
                      }
                    },
                    "partnerNamespaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the Primary/Secondary event hub namespace name, which is part of GEO DR pairing."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.EventHub/namespaces/disasterRecoveryConfigs",
                      "apiVersion": "2021-11-01",
                      "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('name'))]",
                      "properties": {
                        "partnerNamespace": "[parameters('partnerNamespaceId')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the disaster recovery config."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.EventHub/namespaces/disasterRecoveryConfigs', parameters('namespaceName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the disaster recovery config."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the disaster recovery config was created in."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "eventHubNamespace_eventHubs",
                "count": "[length(parameters('eventHubs'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-EvhbNamespace-EventHub-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "namespaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('eventHubs')[copyIndex()].name]"
                  },
                  "authorizationRules": {
                    "value": "[if(contains(parameters('eventHubs')[copyIndex()], 'authorizationRules'), parameters('eventHubs')[copyIndex()].authorizationRules, createArray(createObject('name', 'RootManageSharedAccessKey', 'rights', createArray('Listen', 'Manage', 'Send'))))]"
                  },
                  "captureDescriptionDestinationArchiveNameFormat": {
                    "value": "[if(contains(parameters('eventHubs')[copyIndex()], 'captureDescriptionDestinationArchiveNameFormat'), parameters('eventHubs')[copyIndex()].captureDescriptionDestinationArchiveNameFormat, '{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}')]"
                  },
                  "captureDescriptionDestinationBlobContainer": {
                    "value": "[if(contains(parameters('eventHubs')[copyIndex()], 'captureDescriptionDestinationBlobContainer'), parameters('eventHubs')[copyIndex()].captureDescriptionDestinationBlobContainer, '')]"
                  },
                  "captureDescriptionDestinationName": {
                    "value": "[if(contains(parameters('eventHubs')[copyIndex()], 'captureDescriptionDestinationName'), parameters('eventHubs')[copyIndex()].captureDescriptionDestinationName, 'EventHubArchive.AzureBlockBlob')]"
                  },
                  "captureDescriptionDestinationStorageAccountResourceId": {
                    "value": "[if(contains(parameters('eventHubs')[copyIndex()], 'captureDescriptionDestinationStorageAccountResourceId'), parameters('eventHubs')[copyIndex()].captureDescriptionDestinationStorageAccountResourceId, '')]"
                  },
                  "captureDescriptionEnabled": {
                    "value": "[if(contains(parameters('eventHubs')[copyIndex()], 'captureDescriptionEnabled'), parameters('eventHubs')[copyIndex()].captureDescriptionEnabled, false())]"
                  },
                  "captureDescriptionEncoding": {
                    "value": "[if(contains(parameters('eventHubs')[copyIndex()], 'captureDescriptionEncoding'), parameters('eventHubs')[copyIndex()].captureDescriptionEncoding, 'Avro')]"
                  },
                  "captureDescriptionIntervalInSeconds": {
                    "value": "[if(contains(parameters('eventHubs')[copyIndex()], 'captureDescriptionIntervalInSeconds'), parameters('eventHubs')[copyIndex()].captureDescriptionIntervalInSeconds, 300)]"
                  },
                  "captureDescriptionSizeLimitInBytes": {
                    "value": "[if(contains(parameters('eventHubs')[copyIndex()], 'captureDescriptionSizeLimitInBytes'), parameters('eventHubs')[copyIndex()].captureDescriptionSizeLimitInBytes, 314572800)]"
                  },
                  "captureDescriptionSkipEmptyArchives": {
                    "value": "[if(contains(parameters('eventHubs')[copyIndex()], 'captureDescriptionSkipEmptyArchives'), parameters('eventHubs')[copyIndex()].captureDescriptionSkipEmptyArchives, false())]"
                  },
                  "consumerGroups": {
                    "value": "[if(contains(parameters('eventHubs')[copyIndex()], 'consumerGroups'), parameters('eventHubs')[copyIndex()].consumerGroups, createArray())]"
                  },
                  "lock": {
                    "value": "[if(contains(parameters('eventHubs')[copyIndex()], 'lock'), parameters('eventHubs')[copyIndex()].lock, '')]"
                  },
                  "messageRetentionInDays": {
                    "value": "[if(contains(parameters('eventHubs')[copyIndex()], 'messageRetentionInDays'), parameters('eventHubs')[copyIndex()].messageRetentionInDays, 1)]"
                  },
                  "partitionCount": {
                    "value": "[if(contains(parameters('eventHubs')[copyIndex()], 'partitionCount'), parameters('eventHubs')[copyIndex()].partitionCount, 2)]"
                  },
                  "roleAssignments": {
                    "value": "[if(contains(parameters('eventHubs')[copyIndex()], 'roleAssignments'), parameters('eventHubs')[copyIndex()].roleAssignments, createArray())]"
                  },
                  "status": {
                    "value": "[if(contains(parameters('eventHubs')[copyIndex()], 'status'), parameters('eventHubs')[copyIndex()].status, 'Active')]"
                  },
                  "enableDefaultTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "namespaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent event hub namespace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the event hub."
                      }
                    },
                    "authorizationRules": {
                      "type": "array",
                      "defaultValue": [
                        {
                          "name": "RootManageSharedAccessKey",
                          "rights": [
                            "Listen",
                            "Manage",
                            "Send"
                          ]
                        }
                      ],
                      "metadata": {
                        "description": "Optional. Authorization Rules for the event hub."
                      }
                    },
                    "messageRetentionInDays": {
                      "type": "int",
                      "defaultValue": 1,
                      "maxValue": 7,
                      "minValue": 1,
                      "metadata": {
                        "description": "Optional. Number of days to retain the events for this Event Hub, value should be 1 to 7 days."
                      }
                    },
                    "partitionCount": {
                      "type": "int",
                      "defaultValue": 2,
                      "maxValue": 32,
                      "minValue": 1,
                      "metadata": {
                        "description": "Optional. Number of partitions created for the Event Hub, allowed values are from 1 to 32 partitions."
                      }
                    },
                    "status": {
                      "type": "string",
                      "defaultValue": "Active",
                      "allowedValues": [
                        "Active",
                        "Creating",
                        "Deleting",
                        "Disabled",
                        "ReceiveDisabled",
                        "Renaming",
                        "Restoring",
                        "SendDisabled",
                        "Unknown"
                      ],
                      "metadata": {
                        "description": "Optional. Enumerates the possible values for the status of the Event Hub."
                      }
                    },
                    "consumerGroups": {
                      "type": "array",
                      "defaultValue": [
                        {
                          "name": "$Default"
                        }
                      ],
                      "metadata": {
                        "description": "Optional. The consumer groups to create in this event hub instance."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "captureDescriptionDestinationName": {
                      "type": "string",
                      "defaultValue": "EventHubArchive.AzureBlockBlob",
                      "metadata": {
                        "description": "Optional. Name for capture destination."
                      }
                    },
                    "captureDescriptionDestinationArchiveNameFormat": {
                      "type": "string",
                      "defaultValue": "{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}",
                      "metadata": {
                        "description": "Optional. Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order."
                      }
                    },
                    "captureDescriptionDestinationBlobContainer": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Blob container Name."
                      }
                    },
                    "captureDescriptionDestinationStorageAccountResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the storage account to be used to create the blobs."
                      }
                    },
                    "captureDescriptionEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. A value that indicates whether capture description is enabled."
                      }
                    },
                    "captureDescriptionEncoding": {
                      "type": "string",
                      "defaultValue": "Avro",
                      "allowedValues": [
                        "Avro",
                        "AvroDeflate"
                      ],
                      "metadata": {
                        "description": "Optional. Enumerates the possible values for the encoding format of capture description. Note: \"AvroDeflate\" will be deprecated in New API Version."
                      }
                    },
                    "captureDescriptionIntervalInSeconds": {
                      "type": "int",
                      "defaultValue": 300,
                      "maxValue": 900,
                      "minValue": 60,
                      "metadata": {
                        "description": "Optional. The time window allows you to set the frequency with which the capture to Azure Blobs will happen."
                      }
                    },
                    "captureDescriptionSizeLimitInBytes": {
                      "type": "int",
                      "defaultValue": 314572800,
                      "maxValue": 524288000,
                      "minValue": 10485760,
                      "metadata": {
                        "description": "Optional. The size window defines the amount of data built up in your Event Hub before an capture operation."
                      }
                    },
                    "captureDescriptionSkipEmptyArchives": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. A value that indicates whether to Skip Empty Archives."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "variables": {
                    "enableReferencedModulesTelemetry": false,
                    "eventHubPropertiesSimple": {
                      "messageRetentionInDays": "[parameters('messageRetentionInDays')]",
                      "partitionCount": "[parameters('partitionCount')]",
                      "status": "[parameters('status')]"
                    },
                    "eventHubPropertiesWithCapture": {
                      "messageRetentionInDays": "[parameters('messageRetentionInDays')]",
                      "partitionCount": "[parameters('partitionCount')]",
                      "status": "[parameters('status')]",
                      "captureDescription": {
                        "destination": {
                          "name": "[parameters('captureDescriptionDestinationName')]",
                          "properties": {
                            "archiveNameFormat": "[parameters('captureDescriptionDestinationArchiveNameFormat')]",
                            "blobContainer": "[parameters('captureDescriptionDestinationBlobContainer')]",
                            "storageAccountResourceId": "[parameters('captureDescriptionDestinationStorageAccountResourceId')]"
                          }
                        },
                        "enabled": "[parameters('captureDescriptionEnabled')]",
                        "encoding": "[parameters('captureDescriptionEncoding')]",
                        "intervalInSeconds": "[parameters('captureDescriptionIntervalInSeconds')]",
                        "sizeLimitInBytes": "[parameters('captureDescriptionSizeLimitInBytes')]",
                        "skipEmptyArchives": "[parameters('captureDescriptionSkipEmptyArchives')]"
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.EventHub/namespaces/eventhubs",
                      "apiVersion": "2021-11-01",
                      "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('name'))]",
                      "properties": "[if(parameters('captureDescriptionEnabled'), variables('eventHubPropertiesWithCapture'), variables('eventHubPropertiesSimple'))]"
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.EventHub/namespaces/{0}/eventhubs/{1}', parameters('namespaceName'), parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('namespaceName'), parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "eventHub_consumergroups",
                        "count": "[length(parameters('consumerGroups'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-ConsumerGroup-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "namespaceName": {
                            "value": "[parameters('namespaceName')]"
                          },
                          "eventHubName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('consumerGroups')[copyIndex()].name]"
                          },
                          "userMetadata": {
                            "value": "[if(contains(parameters('consumerGroups')[copyIndex()], 'userMetadata'), parameters('consumerGroups')[copyIndex()].userMetadata, '')]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "parameters": {
                            "namespaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent event hub namespace. Required if the template is used in a standalone deployment.s."
                              }
                            },
                            "eventHubName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent event hub namespace event hub. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the consumer group."
                              }
                            },
                            "userMetadata": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. User Metadata is a placeholder to store user-defined string data with maximum length 1024. e.g. it can be used to store descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
                              "apiVersion": "2021-11-01",
                              "name": "[format('{0}/{1}/{2}', parameters('namespaceName'), parameters('eventHubName'), parameters('name'))]",
                              "properties": {
                                "userMetadata": "[if(not(empty(parameters('userMetadata'))), parameters('userMetadata'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the consumer group."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.EventHub/namespaces/eventhubs/consumergroups', parameters('namespaceName'), parameters('eventHubName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the consumer group."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group the consumer group was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('namespaceName'), parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "eventHub_authorizationRules",
                        "count": "[length(parameters('authorizationRules'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-AuthRule-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "namespaceName": {
                            "value": "[parameters('namespaceName')]"
                          },
                          "eventHubName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('authorizationRules')[copyIndex()].name]"
                          },
                          "rights": {
                            "value": "[if(contains(parameters('authorizationRules')[copyIndex()], 'rights'), parameters('authorizationRules')[copyIndex()].rights, createArray())]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "parameters": {
                            "namespaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent event hub namespace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "eventHubName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent event hub namespace event hub. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the authorization rule."
                              }
                            },
                            "rights": {
                              "type": "array",
                              "allowedValues": [
                                "Listen",
                                "Manage",
                                "Send"
                              ],
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The rights associated with the rule."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
                              "apiVersion": "2021-11-01",
                              "name": "[format('{0}/{1}/{2}', parameters('namespaceName'), parameters('eventHubName'), parameters('name'))]",
                              "properties": {
                                "rights": "[parameters('rights')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the authorization rule."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', parameters('namespaceName'), parameters('eventHubName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the authorization rule."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group the authorization rule was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('namespaceName'), parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "eventHub_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": {
                            "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), parameters('roleAssignments')[copyIndex()].description, '')]"
                          },
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": {
                            "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), parameters('roleAssignments')[copyIndex()].principalType, '')]"
                          },
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": {
                            "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), parameters('roleAssignments')[copyIndex()].condition, '')]"
                          },
                          "delegatedManagedIdentityResourceId": {
                            "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId, '')]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('namespaceName'), parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Azure Event Hubs Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f526a384-b230-433a-b45c-95f59c4a2dec')]",
                              "Azure Event Hubs Data Receiver": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a638d3c7-ab3a-418d-83e6-5f17a39d4fde')]",
                              "Azure Event Hubs Data Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2b629674-e913-4c01-ae53-ef4638d8f975')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Schema Registry Contributor (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5dffeca3-4936-4216-b2bc-10343a5abb25')]",
                              "Schema Registry Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2c56ea50-c6b3-40a6-83c0-9d98858bc7d2')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.EventHub/namespaces/{0}/eventhubs/{1}', split(format('{0}/{1}}}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[0], split(format('{0}/{1}}}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[1])]",
                              "name": "[guid(split(parameters('resourceId'), '/')[0], split(parameters('resourceId'), '/')[1], parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('namespaceName'), parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the event hub."
                      }
                    },
                    "eventHubId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('namespaceName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the event hub."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the event hub was deployed into."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', parameters('namespaceName'), 'RootManageSharedAccessKey')]",
                      "metadata": {
                        "description": "The authentication rule resource ID of the event hub."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[or(not(empty(parameters('networkRuleSets'))), not(empty(parameters('privateEndpoints'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-EvhbNamespace-NetworkRuleSet', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "namespaceName": {
                    "value": "[parameters('name')]"
                  },
                  "publicNetworkAccess": {
                    "value": "[if(contains(parameters('networkRuleSets'), 'publicNetworkAccess'), parameters('networkRuleSets').publicNetworkAccess, if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkRuleSets'))), 'Disabled', 'Enabled'))]"
                  },
                  "defaultAction": {
                    "value": "[if(contains(parameters('networkRuleSets'), 'defaultAction'), parameters('networkRuleSets').defaultAction, 'Allow')]"
                  },
                  "trustedServiceAccessEnabled": {
                    "value": "[if(contains(parameters('networkRuleSets'), 'trustedServiceAccessEnabled'), parameters('networkRuleSets').trustedServiceAccessEnabled, true())]"
                  },
                  "ipRules": {
                    "value": "[if(contains(parameters('networkRuleSets'), 'ipRules'), parameters('networkRuleSets').ipRules, createArray())]"
                  },
                  "virtualNetworkRules": {
                    "value": "[if(contains(parameters('networkRuleSets'), 'virtualNetworkRules'), parameters('networkRuleSets').virtualNetworkRules, createArray())]"
                  },
                  "enableDefaultTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "namespaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent event hub namespace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "metadata": {
                        "description": "Optional. This determines if traffic is allowed over public network. Default is \"Enabled\". If set to \"Disabled\", traffic to this namespace will be restricted over Private Endpoints only and network rules will not be applied."
                      },
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ]
                    },
                    "defaultAction": {
                      "type": "string",
                      "defaultValue": "Allow",
                      "metadata": {
                        "description": "Optional. Default Action for Network Rule Set. Default is \"Allow\". It will not be set if publicNetworkAccess is \"Disabled\". Otherwise, it will be set to \"Deny\" if ipRules or virtualNetworkRules are being used."
                      },
                      "allowedValues": [
                        "Allow",
                        "Deny"
                      ]
                    },
                    "trustedServiceAccessEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Value that indicates whether Trusted Service Access is enabled or not. Default is \"true\". It will not be set if publicNetworkAccess is \"Disabled\"."
                      },
                      "allowedValues": [
                        true,
                        false
                      ]
                    },
                    "virtualNetworkRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List virtual network rules. It will not be set if publicNetworkAccess is \"Disabled\". Otherwise, when used, defaultAction will be set to \"Deny\"."
                      }
                    },
                    "ipRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of IpRules. It will not be set if publicNetworkAccess is \"Disabled\". Otherwise, when used, defaultAction will be set to \"Deny\"."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "networkRules",
                        "count": "[length(parameters('virtualNetworkRules'))]",
                        "input": {
                          "ignoreMissingVnetServiceEndpoint": "[if(contains(parameters('virtualNetworkRules')[copyIndex('networkRules')], 'ignoreMissingVnetServiceEndpoint'), parameters('virtualNetworkRules')[copyIndex('networkRules')].ignoreMissingVnetServiceEndpoint, null())]",
                          "subnet": "[if(contains(parameters('virtualNetworkRules')[copyIndex('networkRules')], 'subnetResourceId'), createObject('id', parameters('virtualNetworkRules')[copyIndex('networkRules')].subnetResourceId), null())]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.EventHub/namespaces/networkRuleSets",
                      "apiVersion": "2021-11-01",
                      "name": "[format('{0}/{1}', parameters('namespaceName'), 'default')]",
                      "properties": {
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                        "defaultAction": "[if(equals(parameters('publicNetworkAccess'), 'Disabled'), null(), if(or(not(empty(parameters('ipRules'))), not(empty(parameters('virtualNetworkRules')))), 'Deny', parameters('defaultAction')))]",
                        "trustedServiceAccessEnabled": "[if(equals(parameters('publicNetworkAccess'), 'Disabled'), null(), parameters('trustedServiceAccessEnabled'))]",
                        "ipRules": "[if(equals(parameters('publicNetworkAccess'), 'Disabled'), null(), parameters('ipRules'))]",
                        "virtualNetworkRules": "[if(equals(parameters('publicNetworkAccess'), 'Disabled'), null(), variables('networkRules'))]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "default",
                      "metadata": {
                        "description": "The name of the network rule set."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.EventHub/namespaces/networkRuleSets', parameters('namespaceName'), 'default')]",
                      "metadata": {
                        "description": "The resource ID of the network rule set."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the network rule set was created in."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "eventHubNamespace_privateEndpoints",
                "count": "[length(parameters('privateEndpoints'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-EvhbNamespace-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "groupIds": {
                    "value": [
                      "[parameters('privateEndpoints')[copyIndex()].service]"
                    ]
                  },
                  "name": {
                    "value": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'name'), parameters('privateEndpoints')[copyIndex()].name, format('pe-{0}-{1}-{2}', last(split(resourceId('Microsoft.EventHub/namespaces', parameters('name')), '/')), parameters('privateEndpoints')[copyIndex()].service, copyIndex()))]"
                  },
                  "serviceResourceId": {
                    "value": "[resourceId('Microsoft.EventHub/namespaces', parameters('name'))]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('privateEndpoints')[copyIndex()].subnetResourceId]"
                  },
                  "enableDefaultTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  },
                  "location": {
                    "value": "[reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location]"
                  },
                  "lock": {
                    "value": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'lock'), parameters('privateEndpoints')[copyIndex()].lock, parameters('lock'))]"
                  },
                  "privateDnsZoneGroup": {
                    "value": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'privateDnsZoneGroup'), parameters('privateEndpoints')[copyIndex()].privateDnsZoneGroup, createObject())]"
                  },
                  "roleAssignments": {
                    "value": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'roleAssignments'), parameters('privateEndpoints')[copyIndex()].roleAssignments, createArray())]"
                  },
                  "tags": {
                    "value": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'tags'), parameters('privateEndpoints')[copyIndex()].tags, createObject())]"
                  },
                  "manualPrivateLinkServiceConnections": {
                    "value": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'manualPrivateLinkServiceConnections'), parameters('privateEndpoints')[copyIndex()].manualPrivateLinkServiceConnections, createArray())]"
                  },
                  "customDnsConfigs": {
                    "value": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'customDnsConfigs'), parameters('privateEndpoints')[copyIndex()].customDnsConfigs, createArray())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "serviceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the resource that needs to be connected to the network."
                      }
                    },
                    "applicationSecurityGroups": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "groupIds": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
                      }
                    },
                    "privateDnsZoneGroup": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The private DNS zone group configuration used to associate the private endpoint with one or multiple private DNS zones. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Manual PrivateLink Service Connections."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "variables": {
                    "enableReferencedModulesTelemetry": false
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2022-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "applicationSecurityGroups": "[parameters('applicationSecurityGroups')]",
                        "customNetworkInterfaceName": "[parameters('customNetworkInterfaceName')]",
                        "ipConfigurations": "[parameters('ipConfigurations')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('name')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('serviceResourceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ],
                        "manualPrivateLinkServiceConnections": "[parameters('manualPrivateLinkServiceConnections')]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        },
                        "customDnsConfigs": "[parameters('customDnsConfigs')]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDNSResourceIds": {
                            "value": "[parameters('privateDnsZoneGroup').privateDNSResourceIds]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDNSResourceIds": {
                              "type": "array",
                              "maxLength": 5,
                              "minLength": 1,
                              "metadata": {
                                "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigs",
                                "count": "[length(parameters('privateDNSResourceIds'))]",
                                "input": {
                                  "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2022-05-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-PrivateEndpoint-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": {
                            "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), parameters('roleAssignments')[copyIndex()].description, '')]"
                          },
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": {
                            "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), parameters('roleAssignments')[copyIndex()].principalType, '')]"
                          },
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": {
                            "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), parameters('roleAssignments')[copyIndex()].condition, '')]"
                          },
                          "delegatedManagedIdentityResourceId": {
                            "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId, '')]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                              "Azure Kubernetes Service Policy Add-on Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18ed5180-3e48-46fd-8541-4ea054d57064')]",
                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                              "Desktop Virtualization Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                              "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                              "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Traffic Manager Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4b10055-b0c7-44c2-b00f-c7b5b3550cf7')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                              "Windows Admin Center Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a6333a3e-0164-44c3-b281-7a577aff287f')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2022-05-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "eventHubNamespace_roleAssignments",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-EvhbNamespace-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "description": {
                    "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), parameters('roleAssignments')[copyIndex()].description, '')]"
                  },
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "principalType": {
                    "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), parameters('roleAssignments')[copyIndex()].principalType, '')]"
                  },
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "condition": {
                    "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), parameters('roleAssignments')[copyIndex()].condition, '')]"
                  },
                  "delegatedManagedIdentityResourceId": {
                    "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId, '')]"
                  },
                  "resourceId": {
                    "value": "[resourceId('Microsoft.EventHub/namespaces', parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "principalIds": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The IDs of the principals to assign the role to."
                      }
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the resource to apply the role assignment to."
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the role assignment."
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition."
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Id of the delegated managed identity resource."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Azure Event Hubs Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f526a384-b230-433a-b45c-95f59c4a2dec')]",
                      "Azure Event Hubs Data Receiver": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a638d3c7-ab3a-418d-83e6-5f17a39d4fde')]",
                      "Azure Event Hubs Data Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2b629674-e913-4c01-ae53-ef4638d8f975')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "Schema Registry Contributor (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5dffeca3-4936-4216-b2bc-10343a5abb25')]",
                      "Schema Registry Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2c56ea50-c6b3-40a6-83c0-9d98858bc7d2')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.EventHub/namespaces/{0}', last(split(parameters('resourceId'), '/')))]",
                      "name": "[guid(resourceId('Microsoft.EventHub/namespaces', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "description": "[parameters('description')]",
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the eventspace."
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.EventHub/namespaces', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the eventspace."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group where the namespace is deployed."
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.EventHub/namespaces', parameters('name')), '2021-11-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.EventHub/namespaces', parameters('name')), '2021-11-01', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            },
            "location": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.EventHub/namespaces', parameters('name')), '2021-11-01', 'full').location]",
              "metadata": {
                "description": "The location the resource was deployed into."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location'))))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location'))))]"
      ]
    }
  ]
}
