{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "[format('ms.sql.servers-{0}-rg', parameters('serviceShort'))]",
      "maxLength": 80,
      "metadata": {
        "description": "Optional. The name of the resource group to deploy for testing purposes."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Optional. The location to deploy resources to."
      }
    },
    "serviceShort": {
      "type": "string",
      "defaultValue": "sqlscom",
      "metadata": {
        "description": "Optional. A short identifier for the kind of deployment. Should be kept short to not run into resource-name length-constraints."
      }
    },
    "password": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Optional. The password to leverage for the login."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[parameters('resourceGroupName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('location')))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "managedIdentityName": {
            "value": "[format('dep-<<namePrefix>>-msi-{0}', parameters('serviceShort'))]"
          },
          "virtualNetworkName": {
            "value": "[format('dep-<<namePrefix>>-vnet-{0}', parameters('serviceShort'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "managedIdentityName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Managed Identity to create."
              }
            },
            "virtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Virtual Network to create."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location to deploy resources to."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', format('privatelink{0}', environment().suffixes.sqlServerHostname), format('{0}-vnetlink', parameters('virtualNetworkName')))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink{0}', environment().suffixes.sqlServerHostname))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
              ]
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('managedIdentityName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-01-01",
              "name": "[parameters('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/16"
                  ]
                },
                "subnets": [
                  {
                    "name": "sxx-subnet-pe-01",
                    "properties": {
                      "addressPrefix": "10.0.0.0/24"
                    }
                  },
                  {
                    "name": "sxx-subnet-se-01",
                    "properties": {
                      "addressPrefix": "10.0.1.0/24"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[format('privatelink{0}', environment().suffixes.sqlServerHostname)]",
              "location": "global"
            }
          ],
          "outputs": {
            "managedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId]",
              "metadata": {
                "description": "The principal ID of the created managed identity."
              }
            },
            "managedIdentitResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
              "metadata": {
                "description": "The resource ID of the created managed identity."
              }
            },
            "privateEndpointSubnetResourceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2022-01-01').subnets[0].id]",
              "metadata": {
                "description": "The resource ID of the created virtual network subnet for a Private Endpoint."
              }
            },
            "serviceEndpointSubnetResourceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2022-01-01').subnets[1].id]",
              "metadata": {
                "description": "The resource ID of the created virtual network subnet for a Service Endpoint."
              }
            },
            "privateDNSResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', format('privatelink{0}', environment().suffixes.sqlServerHostname))]",
              "metadata": {
                "description": "The resource ID of the created Private DNS Zone."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location')))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[format('dep<<namePrefix>>azsa{0}01', parameters('serviceShort'))]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[format('dep-<<namePrefix>>-law-{0}', parameters('serviceShort'))]"
          },
          "eventHubNamespaceEventHubName": {
            "value": "[format('dep-<<namePrefix>>-evh-{0}', parameters('serviceShort'))]"
          },
          "eventHubNamespaceName": {
            "value": "[format('dep-<<namePrefix>>-evhns-{0}', parameters('serviceShort'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Required. The name of the storage account to create."
              }
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the log analytics workspace to create."
              }
            },
            "eventHubNamespaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the event hub namespace to create."
              }
            },
            "eventHubNamespaceEventHubName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the event hub to create inside the event hub namespace."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location to deploy resources to."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}', parameters('eventHubNamespaceName'), parameters('eventHubNamespaceEventHubName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
              ]
            },
            {
              "type": "Microsoft.EventHub/namespaces/authorizationRules",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('eventHubNamespaceName'), 'RootManageSharedAccessKey')]",
              "properties": {
                "rights": [
                  "Listen",
                  "Manage",
                  "Send"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-08-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "Standard_LRS"
              },
              "properties": {
                "allowBlobPublicAccess": false
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-12-01-preview",
              "name": "[parameters('logAnalyticsWorkspaceName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.EventHub/namespaces",
              "apiVersion": "2021-11-01",
              "name": "[parameters('eventHubNamespaceName')]",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "storageAccountResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
              "metadata": {
                "description": "The resource ID of the created Storage Account."
              }
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
              "metadata": {
                "description": "The resource ID of the created Log Analytics Workspace."
              }
            },
            "eventHubNamespaceResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]",
              "metadata": {
                "description": "The resource ID of the created Event Hub Namespace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "value": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', parameters('eventHubNamespaceName'), 'RootManageSharedAccessKey')]",
              "metadata": {
                "description": "The resource ID of the created Event Hub Namespace Authorization Rule."
              }
            },
            "eventHubNamespaceEventHubName": {
              "type": "string",
              "value": "[parameters('eventHubNamespaceEventHubName')]",
              "metadata": {
                "description": "The name of the created Event Hub Namespace Event Hub."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-test-{1}', uniqueString(deployment().name), parameters('serviceShort'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('<<namePrefix>>-{0}', parameters('serviceShort'))]"
          },
          "lock": {
            "value": "CanNotDelete"
          },
          "administratorLogin": {
            "value": "adminUserName"
          },
          "administratorLoginPassword": {
            "value": "[parameters('password')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "roleAssignments": {
            "value": [
              {
                "roleDefinitionIdOrName": "Reader",
                "principalIds": [
                  "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.managedIdentityPrincipalId.value]"
                ],
                "principalType": "ServicePrincipal"
              }
            ]
          },
          "vulnerabilityAssessmentsObj": {
            "value": {
              "name": "default",
              "emailSubscriptionAdmins": true,
              "recurringScansIsEnabled": true,
              "recurringScansEmails": [
                "test1@contoso.com",
                "test2@contoso.com"
              ],
              "vulnerabilityAssessmentsStorageAccountId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.storageAccountResourceId.value]"
            }
          },
          "elasticPools": {
            "value": [
              {
                "name": "[format('<<namePrefix>>-{0}-ep-001', parameters('serviceShort'))]",
                "skuName": "GP_Gen5",
                "skuTier": "GeneralPurpose",
                "skuCapacity": 10,
                "maintenanceConfigurationId": "[format('{0}/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_WestEurope_DB_1', subscription().id)]"
              }
            ]
          },
          "databases": {
            "value": [
              {
                "name": "[format('<<namePrefix>>-{0}db-001', parameters('serviceShort'))]",
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "skuTier": "GeneralPurpose",
                "skuName": "ElasticPool",
                "capacity": 0,
                "maxSizeBytes": 34359738368,
                "licenseType": "LicenseIncluded",
                "diagnosticLogsRetentionInDays": 7,
                "diagnosticStorageAccountId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.storageAccountResourceId.value]",
                "diagnosticWorkspaceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.logAnalyticsWorkspaceResourceId.value]",
                "diagnosticEventHubAuthorizationRuleId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.eventHubAuthorizationRuleId.value]",
                "diagnosticEventHubName": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.eventHubNamespaceEventHubName.value]",
                "elasticPoolId": "[format('{0}/providers/Microsoft.Sql/servers/<<namePrefix>>-{1}/elasticPools/<<namePrefix>>-{2}-ep-001', subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName')), parameters('serviceShort'), parameters('serviceShort'))]"
              }
            ]
          },
          "firewallRules": {
            "value": [
              {
                "name": "AllowAllWindowsAzureIps",
                "endIpAddress": "0.0.0.0",
                "startIpAddress": "0.0.0.0"
              }
            ]
          },
          "securityAlertPolicies": {
            "value": [
              {
                "name": "Default",
                "state": "Enabled",
                "emailAccountAdmins": true
              }
            ]
          },
          "systemAssignedIdentity": {
            "value": true
          },
          "userAssignedIdentities": {
            "value": {
              "[format('{0}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.managedIdentitResourceId.value)]": {}
            }
          },
          "privateEndpoints": {
            "value": [
              {
                "subnetResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.privateEndpointSubnetResourceId.value]",
                "service": "sqlServer",
                "privateDnsZoneGroup": {
                  "privateDNSResourceIds": [
                    "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.privateDNSResourceId.value]"
                  ]
                }
              }
            ]
          },
          "virtualNetworkRules": {
            "value": [
              {
                "ignoreMissingVnetServiceEndpoint": true,
                "name": "newVnetRule1",
                "virtualNetworkSubnetId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.serviceEndpointSubnetResourceId.value]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "administratorLogin": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. The administrator username for the server. Required if no `administrators` object for AAD authentication is provided."
              }
            },
            "administratorLoginPassword": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. The administrator login password. Required if no `administrators` object for AAD authentication is provided."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the server."
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables system assigned managed identity on the resource."
              }
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The ID(s) to assign to the resource."
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "",
                "CanNotDelete",
                "ReadOnly"
              ]
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
              }
            },
            "databases": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The databases to create in the server."
              }
            },
            "elasticPools": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The Elastic Pools to create in the server."
              }
            },
            "firewallRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The firewall rules to create in the server."
              }
            },
            "virtualNetworkRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The virtual network rules to create in the server."
              }
            },
            "securityAlertPolicies": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The security alert policies to create in the server."
              }
            },
            "administrators": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Conditional. The Azure Active Directory (AAD) administrator authentication. Required if no `administratorLogin` & `administratorLoginPassword` is provided."
              }
            },
            "minimalTlsVersion": {
              "type": "string",
              "defaultValue": "1.2",
              "metadata": {
                "description": "Optional. Minimal TLS version allowed."
              },
              "allowedValues": [
                "1.0",
                "1.1",
                "1.2"
              ]
            },
            "privateEndpoints": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and neither firewall rules nor virtual network rules are set."
              }
            },
            "vulnerabilityAssessmentsObj": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The vulnerability assessment configuration."
              }
            }
          },
          "variables": {
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]",
            "enableReferencedModulesTelemetry": false
          },
          "resources": [
            {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2022-02-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "administratorLogin": "[if(not(empty(parameters('administratorLogin'))), parameters('administratorLogin'), null())]",
                "administratorLoginPassword": "[if(not(empty(parameters('administratorLoginPassword'))), parameters('administratorLoginPassword'), null())]",
                "administrators": "[if(not(empty(parameters('administrators'))), createObject('administratorType', 'ActiveDirectory', 'azureADOnlyAuthentication', parameters('administrators').azureADOnlyAuthentication, 'login', parameters('administrators').login, 'principalType', parameters('administrators').principalType, 'sid', parameters('administrators').sid, 'tenantId', parameters('administrators').tenantId), null())]",
                "version": "12.0",
                "minimalTlsVersion": "[parameters('minimalTlsVersion')]",
                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(and(not(empty(parameters('privateEndpoints'))), empty(parameters('firewallRules'))), empty(parameters('virtualNetworkRules'))), 'Disabled', null()))]"
              }
            },
            {
              "condition": "[not(empty(parameters('lock')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2017-04-01",
              "scope": "[format('Microsoft.Sql/servers/{0}', parameters('name'))]",
              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "server_roleAssignments",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Sql-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "description": {
                    "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), parameters('roleAssignments')[copyIndex()].description, '')]"
                  },
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "principalType": {
                    "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), parameters('roleAssignments')[copyIndex()].principalType, '')]"
                  },
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "condition": {
                    "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), parameters('roleAssignments')[copyIndex()].condition, '')]"
                  },
                  "delegatedManagedIdentityResourceId": {
                    "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId, '')]"
                  },
                  "resourceId": {
                    "value": "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "principalIds": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The IDs of the principals to assign the role to."
                      }
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the resource to apply the role assignment to."
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the role assignment."
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition."
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Id of the delegated managed identity resource."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "SQL DB Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9b7fa17d-e63e-47b0-bb0a-15c516ac86ec')]",
                      "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                      "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                      "SQL Server Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Sql/servers/{0}', last(split(parameters('resourceId'), '/')))]",
                      "name": "[guid(resourceId('Microsoft.Sql/servers', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "description": "[parameters('description')]",
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "server_databases",
                "count": "[length(parameters('databases'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Sql-DB-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('databases')[copyIndex()].name]"
                  },
                  "serverName": {
                    "value": "[parameters('name')]"
                  },
                  "skuTier": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'skuTier'), parameters('databases')[copyIndex()].skuTier, 'GeneralPurpose')]"
                  },
                  "skuName": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'skuName'), parameters('databases')[copyIndex()].skuName, 'GP_Gen5_2')]"
                  },
                  "skuCapacity": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'skuCapacity'), parameters('databases')[copyIndex()].skuCapacity, -1)]"
                  },
                  "skuFamily": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'skuFamily'), parameters('databases')[copyIndex()].skuFamily, '')]"
                  },
                  "skuSize": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'skuSize'), parameters('databases')[copyIndex()].skuSize, '')]"
                  },
                  "collation": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'collation'), parameters('databases')[copyIndex()].collation, 'SQL_Latin1_General_CP1_CI_AS')]"
                  },
                  "maxSizeBytes": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'maxSizeBytes'), parameters('databases')[copyIndex()].maxSizeBytes, json('34359738368'))]"
                  },
                  "autoPauseDelay": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'autoPauseDelay'), parameters('databases')[copyIndex()].autoPauseDelay, '')]"
                  },
                  "diagnosticLogsRetentionInDays": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticLogsRetentionInDays'), parameters('databases')[copyIndex()].diagnosticLogsRetentionInDays, 365)]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticStorageAccountId'), parameters('databases')[copyIndex()].diagnosticStorageAccountId, '')]"
                  },
                  "diagnosticEventHubAuthorizationRuleId": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticEventHubAuthorizationRuleId'), parameters('databases')[copyIndex()].diagnosticEventHubAuthorizationRuleId, '')]"
                  },
                  "diagnosticEventHubName": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticEventHubName'), parameters('databases')[copyIndex()].diagnosticEventHubName, '')]"
                  },
                  "isLedgerOn": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'isLedgerOn'), parameters('databases')[copyIndex()].isLedgerOn, false())]"
                  },
                  "location": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'location'), parameters('databases')[copyIndex()].location, reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2022-02-01-preview', 'full').location)]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticLogCategoriesToEnable'), parameters('databases')[copyIndex()].diagnosticLogCategoriesToEnable, createArray())]"
                  },
                  "licenseType": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'licenseType'), parameters('databases')[copyIndex()].licenseType, '')]"
                  },
                  "maintenanceConfigurationId": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'maintenanceConfigurationId'), parameters('databases')[copyIndex()].maintenanceConfigurationId, '')]"
                  },
                  "minCapacity": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'minCapacity'), parameters('databases')[copyIndex()].minCapacity, '')]"
                  },
                  "diagnosticMetricsToEnable": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticMetricsToEnable'), parameters('databases')[copyIndex()].diagnosticMetricsToEnable, createArray())]"
                  },
                  "highAvailabilityReplicaCount": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'highAvailabilityReplicaCount'), parameters('databases')[copyIndex()].highAvailabilityReplicaCount, 0)]"
                  },
                  "readScale": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'readScale'), parameters('databases')[copyIndex()].readScale, 'Disabled')]"
                  },
                  "requestedBackupStorageRedundancy": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'requestedBackupStorageRedundancy'), parameters('databases')[copyIndex()].requestedBackupStorageRedundancy, '')]"
                  },
                  "sampleName": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'sampleName'), parameters('databases')[copyIndex()].sampleName, '')]"
                  },
                  "tags": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'tags'), parameters('databases')[copyIndex()].tags, createObject())]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticWorkspaceId'), parameters('databases')[copyIndex()].diagnosticWorkspaceId, '')]"
                  },
                  "zoneRedundant": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'zoneRedundant'), parameters('databases')[copyIndex()].zoneRedundant, false())]"
                  },
                  "diagnosticSettingsName": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticSettingsName'), parameters('databases')[copyIndex()].diagnosticSettingsName, format('{0}-diagnosticSettings', parameters('databases')[copyIndex()].name))]"
                  },
                  "elasticPoolId": {
                    "value": "[if(contains(parameters('databases')[copyIndex()], 'elasticPoolId'), parameters('databases')[copyIndex()].elasticPoolId, '')]"
                  },
                  "enableDefaultTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the database."
                      }
                    },
                    "serverName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent SQL Server. Required if the template is used in a standalone deployment."
                      }
                    },
                    "collation": {
                      "type": "string",
                      "defaultValue": "SQL_Latin1_General_CP1_CI_AS",
                      "metadata": {
                        "description": "Optional. The collation of the database."
                      }
                    },
                    "skuTier": {
                      "type": "string",
                      "defaultValue": "GeneralPurpose",
                      "metadata": {
                        "description": "Optional. The skuTier or edition of the particular SKU."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "GP_Gen5_2",
                      "metadata": {
                        "description": "Optional. The name of the SKU."
                      }
                    },
                    "skuCapacity": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Capacity of the particular SKU."
                      }
                    },
                    "skuFamily": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. If the service has different generations of hardware, for the same SKU, then that can be captured here."
                      }
                    },
                    "skuSize": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Size of the particular SKU."
                      }
                    },
                    "maxSizeBytes": {
                      "type": "int",
                      "defaultValue": 34359738368,
                      "metadata": {
                        "description": "Optional. The max size of the database expressed in bytes."
                      }
                    },
                    "sampleName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the sample schema to apply when creating this database."
                      }
                    },
                    "zoneRedundant": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether or not this database is zone redundant."
                      }
                    },
                    "licenseType": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The license type to apply for this database."
                      }
                    },
                    "readScale": {
                      "type": "string",
                      "defaultValue": "Disabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The state of read-only routing."
                      }
                    },
                    "highAvailabilityReplicaCount": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. The number of readonly secondary replicas associated with the database."
                      }
                    },
                    "minCapacity": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Minimal capacity that database will always have allocated."
                      }
                    },
                    "autoPauseDelay": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Time in minutes after which database is automatically paused."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "elasticPoolId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource ID of the elastic pool containing this database."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "allowedValues": [
                        "SQLInsights",
                        "AutomaticTuning",
                        "QueryStoreRuntimeStatistics",
                        "QueryStoreWaitStatistics",
                        "Errors",
                        "DatabaseWaitStatistics",
                        "Timeouts",
                        "Blocks",
                        "Deadlocks",
                        "DevOpsOperationsAudit",
                        "SQLSecurityAuditEvents"
                      ],
                      "defaultValue": [
                        "SQLInsights",
                        "AutomaticTuning",
                        "QueryStoreRuntimeStatistics",
                        "QueryStoreWaitStatistics",
                        "Errors",
                        "DatabaseWaitStatistics",
                        "Timeouts",
                        "Blocks",
                        "Deadlocks",
                        "DevOpsOperationsAudit",
                        "SQLSecurityAuditEvents"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "allowedValues": [
                        "Basic",
                        "InstanceAndAppAdvanced",
                        "WorkloadManagement"
                      ],
                      "defaultValue": [
                        "Basic",
                        "InstanceAndAppAdvanced",
                        "WorkloadManagement"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    },
                    "requestedBackupStorageRedundancy": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "Geo",
                        "Local",
                        "Zone",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The storage account type to be used to store backups for this database."
                      }
                    },
                    "isLedgerOn": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether or not this database is a ledger database, which means all tables in the database are ledger tables. Note: the value of this property cannot be changed after the database has been created."
                      }
                    },
                    "maintenanceConfigurationId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Maintenance configuration ID assigned to the database. This configuration defines the period when the maintenance updates will occur."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "skuVar": "[union(createObject('name', parameters('skuName'), 'tier', parameters('skuTier')), if(not(equals(parameters('skuCapacity'), -1)), createObject('capacity', parameters('skuCapacity')), if(not(empty(parameters('skuFamily'))), createObject('family', parameters('skuFamily')), if(not(empty(parameters('skuSize'))), createObject('size', parameters('skuSize')), createObject()))))]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Sql/servers/databases",
                      "apiVersion": "2021-11-01",
                      "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "collation": "[parameters('collation')]",
                        "maxSizeBytes": "[parameters('maxSizeBytes')]",
                        "sampleName": "[parameters('sampleName')]",
                        "zoneRedundant": "[parameters('zoneRedundant')]",
                        "licenseType": "[parameters('licenseType')]",
                        "readScale": "[parameters('readScale')]",
                        "minCapacity": "[if(not(empty(parameters('minCapacity'))), json(parameters('minCapacity')), 0)]",
                        "autoPauseDelay": "[if(not(empty(parameters('autoPauseDelay'))), json(parameters('autoPauseDelay')), 0)]",
                        "highAvailabilityReplicaCount": "[parameters('highAvailabilityReplicaCount')]",
                        "requestedBackupStorageRedundancy": "[parameters('requestedBackupStorageRedundancy')]",
                        "isLedgerOn": "[parameters('isLedgerOn')]",
                        "maintenanceConfigurationId": "[if(not(empty(parameters('maintenanceConfigurationId'))), parameters('maintenanceConfigurationId'), null())]",
                        "elasticPoolId": "[parameters('elasticPoolId')]"
                      },
                      "sku": "[variables('skuVar')]"
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', parameters('serverName'), parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers/databases', parameters('serverName'), parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed database."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Sql/servers/databases', parameters('serverName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed database."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed database."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Sql/servers/databases', parameters('serverName'), parameters('name')), '2021-11-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]",
                "server_elasticPools"
              ]
            },
            {
              "copy": {
                "name": "server_elasticPools",
                "count": "[length(parameters('elasticPools'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-SQLServer-ElasticPool-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('elasticPools')[copyIndex()].name]"
                  },
                  "serverName": {
                    "value": "[parameters('name')]"
                  },
                  "databaseMaxCapacity": {
                    "value": "[if(contains(parameters('elasticPools')[copyIndex()], 'databaseMaxCapacity'), parameters('elasticPools')[copyIndex()].databaseMaxCapacity, 2)]"
                  },
                  "databaseMinCapacity": {
                    "value": "[if(contains(parameters('elasticPools')[copyIndex()], 'databaseMinCapacity'), parameters('elasticPools')[copyIndex()].databaseMinCapacity, 0)]"
                  },
                  "highAvailabilityReplicaCount": {
                    "value": "[if(contains(parameters('elasticPools')[copyIndex()], 'highAvailabilityReplicaCount'), parameters('elasticPools')[copyIndex()].highAvailabilityReplicaCount, -1)]"
                  },
                  "licenseType": {
                    "value": "[if(contains(parameters('elasticPools')[copyIndex()], 'licenseType'), parameters('elasticPools')[copyIndex()].licenseType, 'LicenseIncluded')]"
                  },
                  "maintenanceConfigurationId": {
                    "value": "[if(contains(parameters('elasticPools')[copyIndex()], 'maintenanceConfigurationId'), parameters('elasticPools')[copyIndex()].maintenanceConfigurationId, '')]"
                  },
                  "maxSizeBytes": {
                    "value": "[if(contains(parameters('elasticPools')[copyIndex()], 'maxSizeBytes'), parameters('elasticPools')[copyIndex()].maxSizeBytes, json('34359738368'))]"
                  },
                  "minCapacity": {
                    "value": "[if(contains(parameters('elasticPools')[copyIndex()], 'minCapacity'), parameters('elasticPools')[copyIndex()].minCapacity, 0)]"
                  },
                  "skuCapacity": {
                    "value": "[if(contains(parameters('elasticPools')[copyIndex()], 'skuCapacity'), parameters('elasticPools')[copyIndex()].skuCapacity, 2)]"
                  },
                  "skuName": {
                    "value": "[if(contains(parameters('elasticPools')[copyIndex()], 'skuName'), parameters('elasticPools')[copyIndex()].skuName, 'GP_Gen5')]"
                  },
                  "skuTier": {
                    "value": "[if(contains(parameters('elasticPools')[copyIndex()], 'skuTier'), parameters('elasticPools')[copyIndex()].skuTier, 'GeneralPurpose')]"
                  },
                  "zoneRedundant": {
                    "value": "[if(contains(parameters('elasticPools')[copyIndex()], 'zoneRedundant'), parameters('elasticPools')[copyIndex()].zoneRedundant, false())]"
                  },
                  "enableDefaultTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  },
                  "location": {
                    "value": "[if(contains(parameters('elasticPools')[copyIndex()], 'location'), parameters('elasticPools')[copyIndex()].location, reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2022-02-01-preview', 'full').location)]"
                  },
                  "tags": {
                    "value": "[if(contains(parameters('elasticPools')[copyIndex()], 'tags'), parameters('elasticPools')[copyIndex()].tags, createObject())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Elastic Pool."
                      }
                    },
                    "serverName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent SQL Server. Required if the template is used in a standalone deployment."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "skuCapacity": {
                      "type": "int",
                      "defaultValue": 2,
                      "metadata": {
                        "description": "Optional. Capacity of the particular SKU."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "GP_Gen5",
                      "metadata": {
                        "description": "Optional. The name of the SKU, typically, a letter + Number code, e.g. P3."
                      }
                    },
                    "skuTier": {
                      "type": "string",
                      "defaultValue": "GeneralPurpose",
                      "metadata": {
                        "description": "Optional. The tier or edition of the particular SKU, e.g. Basic, Premium."
                      }
                    },
                    "highAvailabilityReplicaCount": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. The number of secondary replicas associated with the elastic pool that are used to provide high availability. Applicable only to Hyperscale elastic pools."
                      }
                    },
                    "licenseType": {
                      "type": "string",
                      "defaultValue": "LicenseIncluded",
                      "allowedValues": [
                        "BasePrice",
                        "LicenseIncluded"
                      ],
                      "metadata": {
                        "description": "Optional. The license type to apply for this elastic pool."
                      }
                    },
                    "maintenanceConfigurationId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Maintenance configuration resource ID assigned to the elastic pool. This configuration defines the period when the maintenance updates will will occur."
                      }
                    },
                    "maxSizeBytes": {
                      "type": "int",
                      "defaultValue": 34359738368,
                      "metadata": {
                        "description": "Optional. The storage limit for the database elastic pool in bytes."
                      }
                    },
                    "minCapacity": {
                      "type": "int",
                      "defaultValue": 2,
                      "metadata": {
                        "description": "Optional. Minimal capacity that serverless pool will not shrink below, if not paused."
                      }
                    },
                    "databaseMaxCapacity": {
                      "type": "int",
                      "defaultValue": 2,
                      "metadata": {
                        "description": "Optional. The maximum capacity any one database can consume."
                      }
                    },
                    "databaseMinCapacity": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. The minimum capacity all databases are guaranteed."
                      }
                    },
                    "zoneRedundant": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether or not this elastic pool is zone redundant, which means the replicas of this elastic pool will be spread across multiple availability zones."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Sql/servers/elasticPools",
                      "apiVersion": "2022-02-01-preview",
                      "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "capacity": "[parameters('skuCapacity')]",
                        "name": "[parameters('skuName')]",
                        "tier": "[parameters('skuTier')]"
                      },
                      "properties": {
                        "highAvailabilityReplicaCount": "[if(greater(parameters('highAvailabilityReplicaCount'), -1), parameters('highAvailabilityReplicaCount'), null())]",
                        "licenseType": "[parameters('licenseType')]",
                        "maintenanceConfigurationId": "[parameters('maintenanceConfigurationId')]",
                        "maxSizeBytes": "[parameters('maxSizeBytes')]",
                        "minCapacity": "[parameters('minCapacity')]",
                        "perDatabaseSettings": {
                          "minCapacity": "[parameters('databaseMinCapacity')]",
                          "maxCapacity": "[parameters('databaseMaxCapacity')]"
                        },
                        "zoneRedundant": "[parameters('zoneRedundant')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed Elastic Pool."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Sql/servers/elasticPools', parameters('serverName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed Elastic Pool."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed Elastic Pool."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Sql/servers/elasticPools', parameters('serverName'), parameters('name')), '2022-02-01-preview', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "server_privateEndpoints",
                "count": "[length(parameters('privateEndpoints'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-SQLServer-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "groupIds": {
                    "value": [
                      "[parameters('privateEndpoints')[copyIndex()].service]"
                    ]
                  },
                  "name": {
                    "value": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'name'), parameters('privateEndpoints')[copyIndex()].name, format('pe-{0}-{1}-{2}', last(split(resourceId('Microsoft.Sql/servers', parameters('name')), '/')), parameters('privateEndpoints')[copyIndex()].service, copyIndex()))]"
                  },
                  "serviceResourceId": {
                    "value": "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('privateEndpoints')[copyIndex()].subnetResourceId]"
                  },
                  "enableDefaultTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  },
                  "location": {
                    "value": "[reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location]"
                  },
                  "lock": {
                    "value": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'lock'), parameters('privateEndpoints')[copyIndex()].lock, parameters('lock'))]"
                  },
                  "privateDnsZoneGroup": {
                    "value": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'privateDnsZoneGroup'), parameters('privateEndpoints')[copyIndex()].privateDnsZoneGroup, createObject())]"
                  },
                  "roleAssignments": {
                    "value": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'roleAssignments'), parameters('privateEndpoints')[copyIndex()].roleAssignments, createArray())]"
                  },
                  "tags": {
                    "value": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'tags'), parameters('privateEndpoints')[copyIndex()].tags, createObject())]"
                  },
                  "manualPrivateLinkServiceConnections": {
                    "value": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'manualPrivateLinkServiceConnections'), parameters('privateEndpoints')[copyIndex()].manualPrivateLinkServiceConnections, createArray())]"
                  },
                  "customDnsConfigs": {
                    "value": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'customDnsConfigs'), parameters('privateEndpoints')[copyIndex()].customDnsConfigs, createArray())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "serviceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the resource that needs to be connected to the network."
                      }
                    },
                    "applicationSecurityGroups": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "groupIds": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
                      }
                    },
                    "privateDnsZoneGroup": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The private DNS zone group configuration used to associate the private endpoint with one or multiple private DNS zones. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Manual PrivateLink Service Connections."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "variables": {
                    "enableReferencedModulesTelemetry": false
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2022-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "applicationSecurityGroups": "[parameters('applicationSecurityGroups')]",
                        "customNetworkInterfaceName": "[parameters('customNetworkInterfaceName')]",
                        "ipConfigurations": "[parameters('ipConfigurations')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('name')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('serviceResourceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ],
                        "manualPrivateLinkServiceConnections": "[parameters('manualPrivateLinkServiceConnections')]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        },
                        "customDnsConfigs": "[parameters('customDnsConfigs')]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDNSResourceIds": {
                            "value": "[parameters('privateDnsZoneGroup').privateDNSResourceIds]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDNSResourceIds": {
                              "type": "array",
                              "maxLength": 5,
                              "minLength": 1,
                              "metadata": {
                                "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigs",
                                "count": "[length(parameters('privateDNSResourceIds'))]",
                                "input": {
                                  "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2022-05-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-PrivateEndpoint-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": {
                            "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), parameters('roleAssignments')[copyIndex()].description, '')]"
                          },
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": {
                            "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), parameters('roleAssignments')[copyIndex()].principalType, '')]"
                          },
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": {
                            "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), parameters('roleAssignments')[copyIndex()].condition, '')]"
                          },
                          "delegatedManagedIdentityResourceId": {
                            "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId, '')]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                              "Azure Kubernetes Service Policy Add-on Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18ed5180-3e48-46fd-8541-4ea054d57064')]",
                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                              "Desktop Virtualization Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                              "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                              "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Traffic Manager Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4b10055-b0c7-44c2-b00f-c7b5b3550cf7')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                              "Windows Admin Center Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a6333a3e-0164-44c3-b281-7a577aff287f')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2022-05-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "server_firewallRules",
                "count": "[length(parameters('firewallRules'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Sql-FirewallRules-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('firewallRules')[copyIndex()].name]"
                  },
                  "serverName": {
                    "value": "[parameters('name')]"
                  },
                  "endIpAddress": {
                    "value": "[if(contains(parameters('firewallRules')[copyIndex()], 'endIpAddress'), parameters('firewallRules')[copyIndex()].endIpAddress, '0.0.0.0')]"
                  },
                  "startIpAddress": {
                    "value": "[if(contains(parameters('firewallRules')[copyIndex()], 'startIpAddress'), parameters('firewallRules')[copyIndex()].startIpAddress, '0.0.0.0')]"
                  },
                  "enableDefaultTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Server Firewall Rule."
                      }
                    },
                    "endIpAddress": {
                      "type": "string",
                      "defaultValue": "0.0.0.0",
                      "metadata": {
                        "description": "Optional. The end IP address of the firewall rule. Must be IPv4 format. Must be greater than or equal to startIpAddress. Use value '0.0.0.0' for all Azure-internal IP addresses."
                      }
                    },
                    "startIpAddress": {
                      "type": "string",
                      "defaultValue": "0.0.0.0",
                      "metadata": {
                        "description": "Optional. The start IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' for all Azure-internal IP addresses."
                      }
                    },
                    "serverName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent SQL Server. Required if the template is used in a standalone deployment."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Sql/servers/firewallRules",
                      "apiVersion": "2022-02-01-preview",
                      "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
                      "properties": {
                        "endIpAddress": "[parameters('endIpAddress')]",
                        "startIpAddress": "[parameters('startIpAddress')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed firewall rule."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Sql/servers/firewallRules', parameters('serverName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed firewall rule."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed firewall rule."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "server_virtualNetworkRules",
                "count": "[length(parameters('virtualNetworkRules'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Sql-VirtualNetworkRules-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('virtualNetworkRules')[copyIndex()].name]"
                  },
                  "serverName": {
                    "value": "[parameters('name')]"
                  },
                  "ignoreMissingVnetServiceEndpoint": {
                    "value": "[if(contains(parameters('virtualNetworkRules')[copyIndex()], 'ignoreMissingVnetServiceEndpoint'), parameters('virtualNetworkRules')[copyIndex()].ignoreMissingVnetServiceEndpoint, false())]"
                  },
                  "virtualNetworkSubnetId": {
                    "value": "[parameters('virtualNetworkRules')[copyIndex()].virtualNetworkSubnetId]"
                  },
                  "enableDefaultTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Server Virtual Network Rule."
                      }
                    },
                    "ignoreMissingVnetServiceEndpoint": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Allow creating a firewall rule before the virtual network has vnet service endpoint enabled."
                      }
                    },
                    "virtualNetworkSubnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the virtual network subnet."
                      }
                    },
                    "serverName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent SQL Server. Required if the template is used in a standalone deployment."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Sql/servers/virtualNetworkRules",
                      "apiVersion": "2022-02-01-preview",
                      "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
                      "properties": {
                        "ignoreMissingVnetServiceEndpoint": "[parameters('ignoreMissingVnetServiceEndpoint')]",
                        "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetId')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed virtual network rule."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Sql/servers/virtualNetworkRules', parameters('serverName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed virtual network rule."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed virtual network rule."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "server_securityAlertPolicies",
                "count": "[length(parameters('securityAlertPolicies'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Sql-SecAlertPolicy-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('securityAlertPolicies')[copyIndex()].name]"
                  },
                  "serverName": {
                    "value": "[parameters('name')]"
                  },
                  "disabledAlerts": {
                    "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'disabledAlerts'), parameters('securityAlertPolicies')[copyIndex()].disabledAlerts, createArray())]"
                  },
                  "emailAccountAdmins": {
                    "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'emailAccountAdmins'), parameters('securityAlertPolicies')[copyIndex()].emailAccountAdmins, false())]"
                  },
                  "emailAddresses": {
                    "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'emailAddresses'), parameters('securityAlertPolicies')[copyIndex()].emailAddresses, createArray())]"
                  },
                  "retentionDays": {
                    "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'retentionDays'), parameters('securityAlertPolicies')[copyIndex()].retentionDays, 0)]"
                  },
                  "state": {
                    "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'state'), parameters('securityAlertPolicies')[copyIndex()].state, 'Disabled')]"
                  },
                  "storageAccountAccessKey": {
                    "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'storageAccountAccessKey'), parameters('securityAlertPolicies')[copyIndex()].storageAccountAccessKey, '')]"
                  },
                  "storageEndpoint": {
                    "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'storageEndpoint'), parameters('securityAlertPolicies')[copyIndex()].storageEndpoint, '')]"
                  },
                  "enableDefaultTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Security Alert Policy."
                      }
                    },
                    "disabledAlerts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action, Brute_Force."
                      }
                    },
                    "emailAccountAdmins": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies that the alert is sent to the account administrators."
                      }
                    },
                    "emailAddresses": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies an array of email addresses to which the alert is sent."
                      }
                    },
                    "retentionDays": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days to keep in the Threat Detection audit logs."
                      }
                    },
                    "state": {
                      "type": "string",
                      "defaultValue": "Disabled",
                      "allowedValues": [
                        "Disabled",
                        "Enabled"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database."
                      }
                    },
                    "storageAccountAccessKey": {
                      "type": "secureString",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the identifier key of the Threat Detection audit storage account.."
                      }
                    },
                    "storageEndpoint": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the blob storage endpoint. This blob storage will hold all Threat Detection audit logs."
                      }
                    },
                    "serverName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent SQL Server. Required if the template is used in a standalone deployment."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Sql/servers/securityAlertPolicies",
                      "apiVersion": "2022-02-01-preview",
                      "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
                      "properties": {
                        "disabledAlerts": "[parameters('disabledAlerts')]",
                        "emailAccountAdmins": "[parameters('emailAccountAdmins')]",
                        "emailAddresses": "[parameters('emailAddresses')]",
                        "retentionDays": "[parameters('retentionDays')]",
                        "state": "[parameters('state')]",
                        "storageAccountAccessKey": "[if(empty(parameters('storageAccountAccessKey')), null(), parameters('storageAccountAccessKey'))]",
                        "storageEndpoint": "[if(empty(parameters('storageEndpoint')), null(), parameters('storageEndpoint'))]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed security alert policy."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Sql/servers/securityAlertPolicies', parameters('serverName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed security alert policy."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed security alert policy."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('vulnerabilityAssessmentsObj')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Sql-VulnAssessm', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "serverName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('vulnerabilityAssessmentsObj').name]"
                  },
                  "recurringScansEmails": {
                    "value": "[if(contains(parameters('vulnerabilityAssessmentsObj'), 'recurringScansEmails'), parameters('vulnerabilityAssessmentsObj').recurringScansEmails, createArray())]"
                  },
                  "recurringScansEmailSubscriptionAdmins": {
                    "value": "[if(contains(parameters('vulnerabilityAssessmentsObj'), 'recurringScansEmailSubscriptionAdmins'), parameters('vulnerabilityAssessmentsObj').recurringScansEmailSubscriptionAdmins, false())]"
                  },
                  "recurringScansIsEnabled": {
                    "value": "[if(contains(parameters('vulnerabilityAssessmentsObj'), 'recurringScansIsEnabled'), parameters('vulnerabilityAssessmentsObj').recurringScansIsEnabled, false())]"
                  },
                  "vulnerabilityAssessmentsStorageAccountId": {
                    "value": "[if(contains(parameters('vulnerabilityAssessmentsObj'), 'vulnerabilityAssessmentsStorageAccountId'), parameters('vulnerabilityAssessmentsObj').vulnerabilityAssessmentsStorageAccountId, '')]"
                  },
                  "enableDefaultTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the vulnerability assessment."
                      }
                    },
                    "serverName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Name of SQL Server."
                      }
                    },
                    "recurringScansIsEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Recurring scans state."
                      }
                    },
                    "recurringScansEmailSubscriptionAdmins": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies that the schedule scan notification will be is sent to the subscription administrators."
                      }
                    },
                    "recurringScansEmails": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies an array of email addresses to which the scan notification is sent."
                      }
                    },
                    "vulnerabilityAssessmentsStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. A blob storage to hold the scan results."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-9319755b-f697-4146-b966-4656e0b46cac-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Sql/servers/vulnerabilityAssessments",
                      "apiVersion": "2022-02-01-preview",
                      "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
                      "properties": {
                        "storageContainerPath": "[format('https://{0}.blob.{1}/vulnerability-assessment/', last(split(parameters('vulnerabilityAssessmentsStorageAccountId'), '/')), environment().suffixes.storage)]",
                        "storageAccountAccessKey": "[listKeys(parameters('vulnerabilityAssessmentsStorageAccountId'), '2019-06-01').keys[0].value]",
                        "recurringScans": {
                          "isEnabled": "[parameters('recurringScansIsEnabled')]",
                          "emailSubscriptionAdmins": "[parameters('recurringScansEmailSubscriptionAdmins')]",
                          "emails": "[parameters('recurringScansEmails')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed vulnerability assessment."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Sql/servers/vulnerabilityAssessments', parameters('serverName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed vulnerability assessment."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed vulnerability assessment."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]",
                "server_securityAlertPolicies"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed SQL server."
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Sql/servers', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed SQL server."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group of the deployed SQL server."
              }
            },
            "systemAssignedPrincipalId": {
              "type": "string",
              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2022-02-01-preview', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2022-02-01-preview', 'full').identity.principalId, '')]",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              }
            },
            "location": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2022-02-01-preview', 'full').location]",
              "metadata": {
                "description": "The location the resource was deployed into."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location'))))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-nestedDependencies', uniqueString(deployment().name, parameters('location'))))]"
      ]
    }
  ]
}
