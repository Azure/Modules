{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.12.40.16777",
      "templateHash": "657601592398233463"
    }
  },
  "parameters": {
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "[format('ms.network.connections-{0}-rg', parameters('serviceShort'))]",
      "maxLength": 80,
      "metadata": {
        "description": "Optional. The name of the resource group to deploy for testing purposes."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Optional. The location to deploy resources to."
      }
    },
    "serviceShort": {
      "type": "string",
      "defaultValue": "ncvtv",
      "metadata": {
        "description": "Optional. A short identifier for the kind of deployment. Should be kept short to not run into resource-name length-constraints."
      }
    },
    "password": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Optional. The password to leverage for the login."
      }
    },
    "enableDefaultTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[parameters('resourceGroupName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "primaryPublicIPName": {
            "value": "[format('dep-<<namePrefix>>-pip-{0}-1', parameters('serviceShort'))]"
          },
          "primaryVirtualNetworkName": {
            "value": "[format('dep-<<namePrefix>>-vnet-{0}-1', parameters('serviceShort'))]"
          },
          "primaryVirtualNetworkGatewayName": {
            "value": "[format('dep-<<namePrefix>>-vpn-gw-{0}-1', parameters('serviceShort'))]"
          },
          "secondaryPublicIPName": {
            "value": "[format('dep-<<namePrefix>>-pip-{0}-2', parameters('serviceShort'))]"
          },
          "secondaryVirtualNetworkName": {
            "value": "[format('dep-<<namePrefix>>-vnet-{0}-2', parameters('serviceShort'))]"
          },
          "secondaryVirtualNetworkGatewayName": {
            "value": "[format('dep-<<namePrefix>>-vpn-gw-{0}-2', parameters('serviceShort'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.12.40.16777",
              "templateHash": "1000100516282868331"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location to deploy resources to."
              }
            },
            "primaryPublicIPName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the primary Public IP to create."
              }
            },
            "primaryVirtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the primary VNET to create."
              }
            },
            "primaryVirtualNetworkGatewayName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the primary Virtual Network Gateway to create."
              }
            },
            "secondaryPublicIPName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the secondary Public IP to create."
              }
            },
            "secondaryVirtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the secondary VNET to create."
              }
            },
            "secondaryVirtualNetworkGatewayName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the secondary Virtual Network Gateway to create."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-01-01",
              "name": "[parameters('primaryVirtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/24"
                  ]
                },
                "subnets": [
                  {
                    "name": "GatewaySubnet",
                    "properties": {
                      "addressPrefix": "10.0.0.0/24"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-01-01",
              "name": "[parameters('primaryPublicIPName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Network/virtualNetworkGateways",
              "apiVersion": "2021-08-01",
              "name": "[parameters('primaryVirtualNetworkGatewayName')]",
              "location": "[parameters('location')]",
              "properties": {
                "gatewayType": "Vpn",
                "ipConfigurations": [
                  {
                    "name": "default",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('primaryVirtualNetworkName')), '2022-01-01').subnets[0].id]"
                      },
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('primaryPublicIPName'))]"
                      }
                    }
                  }
                ],
                "vpnType": "RouteBased",
                "vpnGatewayGeneration": "Generation2",
                "sku": {
                  "name": "VpnGw2",
                  "tier": "VpnGw2"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('primaryPublicIPName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('primaryVirtualNetworkName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-01-01",
              "name": "[parameters('secondaryVirtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.1.0/24"
                  ]
                },
                "subnets": [
                  {
                    "name": "GatewaySubnet",
                    "properties": {
                      "addressPrefix": "10.0.1.0/24"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-01-01",
              "name": "[parameters('secondaryPublicIPName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Network/virtualNetworkGateways",
              "apiVersion": "2021-08-01",
              "name": "[parameters('secondaryVirtualNetworkGatewayName')]",
              "location": "[parameters('location')]",
              "properties": {
                "gatewayType": "Vpn",
                "ipConfigurations": [
                  {
                    "name": "default",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('secondaryVirtualNetworkName')), '2022-01-01').subnets[0].id]"
                      },
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('secondaryPublicIPName'))]"
                      }
                    }
                  }
                ],
                "vpnType": "RouteBased",
                "vpnGatewayGeneration": "Generation2",
                "sku": {
                  "name": "VpnGw2",
                  "tier": "VpnGw2"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('secondaryPublicIPName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('secondaryVirtualNetworkName'))]"
              ]
            }
          ],
          "outputs": {
            "primaryVNETGatewayResourceID": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('primaryVirtualNetworkGatewayName'))]",
              "metadata": {
                "description": "The resource ID of the created primary Virtual Network Gateway."
              }
            },
            "secondaryVNETGatewayResourceID": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('secondaryVirtualNetworkGatewayName'))]",
              "metadata": {
                "description": "The resource ID of the created secondary Virtual Network Gateway."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-test-{1}', uniqueString(deployment().name), parameters('serviceShort'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "enableDefaultTelemetry": {
            "value": "[parameters('enableDefaultTelemetry')]"
          },
          "name": {
            "value": "[format('<<namePrefix>>{0}001', parameters('serviceShort'))]"
          },
          "virtualNetworkGateway1": {
            "value": {
              "id": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.primaryVNETGatewayResourceID.value]"
            }
          },
          "enableBgp": {
            "value": false
          },
          "lock": {
            "value": "CanNotDelete"
          },
          "virtualNetworkGateway2": {
            "value": {
              "id": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.secondaryVNETGatewayResourceID.value]"
            }
          },
          "virtualNetworkGatewayConnectionType": {
            "value": "Vnet2Vnet"
          },
          "vpnSharedKey": {
            "value": "[parameters('password')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.12.40.16777",
              "templateHash": "9077899160939439589"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Remote connection name."
              }
            },
            "vpnSharedKey": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies a VPN shared key. The same value has to be specified on both Virtual Network Gateways."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "virtualNetworkGatewayConnectionType": {
              "type": "string",
              "defaultValue": "IPsec",
              "allowedValues": [
                "IPsec",
                "Vnet2Vnet",
                "ExpressRoute",
                "VPNClient"
              ],
              "metadata": {
                "description": "Optional. Gateway connection type."
              }
            },
            "enableBgp": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Value to specify if BGP is enabled or not."
              }
            },
            "usePolicyBasedTrafficSelectors": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable policy-based traffic selectors."
              }
            },
            "customIPSecPolicy": {
              "type": "object",
              "defaultValue": {
                "saLifeTimeSeconds": 0,
                "saDataSizeKilobytes": 0,
                "ipsecEncryption": "",
                "ipsecIntegrity": "",
                "ikeEncryption": "",
                "ikeIntegrity": "",
                "dhGroup": "",
                "pfsGroup": ""
              },
              "metadata": {
                "description": "Optional. The IPSec Policies to be considered by this connection."
              }
            },
            "routingWeight": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "Optional. The weight added to routes learned from this BGP speaker."
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "",
                "CanNotDelete",
                "ReadOnly"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
              }
            },
            "virtualNetworkGateway1": {
              "type": "object",
              "metadata": {
                "description": "Required. The primary Virtual Network Gateway."
              }
            },
            "virtualNetworkGateway2": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The remote Virtual Network Gateway. Used for connection type [Vnet2Vnet]."
              }
            },
            "peer": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The remote peer. Used for connection type [ExpressRoute]."
              }
            },
            "localNetworkGateway2": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The local network gateway. Used for connection type [IPsec]."
              }
            }
          },
          "variables": {
            "customIPSecPolicyVar": [
              {
                "saLifeTimeSeconds": "[parameters('customIPSecPolicy').saLifeTimeSeconds]",
                "saDataSizeKilobytes": "[parameters('customIPSecPolicy').saDataSizeKilobytes]",
                "ipsecEncryption": "[parameters('customIPSecPolicy').ipsecEncryption]",
                "ipsecIntegrity": "[parameters('customIPSecPolicy').ipsecIntegrity]",
                "ikeEncryption": "[parameters('customIPSecPolicy').ikeEncryption]",
                "ikeIntegrity": "[parameters('customIPSecPolicy').ikeIntegrity]",
                "dhGroup": "[parameters('customIPSecPolicy').dhGroup]",
                "pfsGroup": "[parameters('customIPSecPolicy').pfsGroup]"
              }
            ]
          },
          "resources": [
            {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            {
              "type": "Microsoft.Network/connections",
              "apiVersion": "2021-08-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "connectionType": "[parameters('virtualNetworkGatewayConnectionType')]",
                "virtualNetworkGateway1": "[parameters('virtualNetworkGateway1')]",
                "virtualNetworkGateway2": "[if(equals(parameters('virtualNetworkGatewayConnectionType'), 'Vnet2Vnet'), parameters('virtualNetworkGateway2'), null())]",
                "localNetworkGateway2": "[if(equals(parameters('virtualNetworkGatewayConnectionType'), 'IPsec'), parameters('localNetworkGateway2'), null())]",
                "peer": "[if(equals(parameters('virtualNetworkGatewayConnectionType'), 'ExpressRoute'), parameters('peer'), null())]",
                "sharedKey": "[if(not(equals(parameters('virtualNetworkGatewayConnectionType'), 'ExpressRoute')), parameters('vpnSharedKey'), null())]",
                "usePolicyBasedTrafficSelectors": "[parameters('usePolicyBasedTrafficSelectors')]",
                "ipsecPolicies": "[if(not(empty(parameters('customIPSecPolicy').ipsecEncryption)), variables('customIPSecPolicyVar'), parameters('customIPSecPolicy').ipsecEncryption)]",
                "routingWeight": "[if(not(equals(parameters('routingWeight'), -1)), parameters('routingWeight'), null())]",
                "enableBgp": "[parameters('enableBgp')]"
              }
            },
            {
              "condition": "[not(empty(parameters('lock')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2017-04-01",
              "scope": "[format('Microsoft.Network/connections/{0}', parameters('name'))]",
              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/connections', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the remote connection was deployed into."
              }
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the remote connection."
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/connections', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the remote connection."
              }
            },
            "location": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/connections', parameters('name')), '2021-08-01', 'full').location]",
              "metadata": {
                "description": "The location the resource was deployed into."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location'))))]"
      ]
    }
  ]
}