{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. Remote connection name."
      }
    },
    "vpnSharedKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Specifies a VPN shared key. The same value has to be specified on both Virtual Network Gateways."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "virtualNetworkGatewayConnectionType": {
      "type": "string",
      "defaultValue": "IPsec",
      "allowedValues": [
        "IPsec",
        "Vnet2Vnet",
        "ExpressRoute",
        "VPNClient"
      ],
      "metadata": {
        "description": "Optional. Gateway connection type."
      }
    },
    "enableBgp": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Value to specify if BGP is enabled or not."
      }
    },
    "usePolicyBasedTrafficSelectors": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable policy-based traffic selectors."
      }
    },
    "customIPSecPolicy": {
      "type": "object",
      "defaultValue": {
        "saLifeTimeSeconds": 0,
        "saDataSizeKilobytes": 0,
        "ipsecEncryption": "",
        "ipsecIntegrity": "",
        "ikeEncryption": "",
        "ikeIntegrity": "",
        "dhGroup": "",
        "pfsGroup": ""
      },
      "metadata": {
        "description": "Optional. The IPSec Policies to be considered by this connection."
      }
    },
    "routingWeight": {
      "type": "int",
      "defaultValue": -1,
      "metadata": {
        "description": "Optional. The weight added to routes learned from this BGP speaker."
      }
    },
    "lock": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Specify the type of lock."
      },
      "allowedValues": [
        "",
        "CanNotDelete",
        "ReadOnly"
      ]
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "enableDefaultTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
      }
    },
    "virtualNetworkGateway1": {
      "type": "object",
      "metadata": {
        "description": "Required. The primary Virtual Network Gateway."
      }
    },
    "virtualNetworkGateway2": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The remote Virtual Network Gateway. Used for connection type [Vnet2Vnet]."
      }
    },
    "peer": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The remote peer. Used for connection type [ExpressRoute]."
      }
    },
    "localNetworkGateway2": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The local network gateway. Used for connection type [IPsec]."
      }
    }
  },
  "variables": {
    "customIPSecPolicy_var": [
      {
        "saLifeTimeSeconds": "[parameters('customIPSecPolicy').saLifeTimeSeconds]",
        "saDataSizeKilobytes": "[parameters('customIPSecPolicy').saDataSizeKilobytes]",
        "ipsecEncryption": "[parameters('customIPSecPolicy').ipsecEncryption]",
        "ipsecIntegrity": "[parameters('customIPSecPolicy').ipsecIntegrity]",
        "ikeEncryption": "[parameters('customIPSecPolicy').ikeEncryption]",
        "ikeIntegrity": "[parameters('customIPSecPolicy').ikeIntegrity]",
        "dhGroup": "[parameters('customIPSecPolicy').dhGroup]",
        "pfsGroup": "[parameters('customIPSecPolicy').pfsGroup]"
      }
    ]
  },
  "resources": [
    {
      "condition": "[parameters('enableDefaultTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.Network/connections",
      "apiVersion": "2021-08-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "connectionType": "[parameters('virtualNetworkGatewayConnectionType')]",
        "virtualNetworkGateway1": "[parameters('virtualNetworkGateway1')]",
        "virtualNetworkGateway2": "[if(equals(parameters('virtualNetworkGatewayConnectionType'), 'Vnet2Vnet'), parameters('virtualNetworkGateway2'), null())]",
        "localNetworkGateway2": "[if(equals(parameters('virtualNetworkGatewayConnectionType'), 'IPsec'), parameters('localNetworkGateway2'), null())]",
        "peer": "[if(equals(parameters('virtualNetworkGatewayConnectionType'), 'ExpressRoute'), parameters('peer'), null())]",
        "sharedKey": "[if(not(equals(parameters('virtualNetworkGatewayConnectionType'), 'ExpressRoute')), parameters('vpnSharedKey'), null())]",
        "usePolicyBasedTrafficSelectors": "[parameters('usePolicyBasedTrafficSelectors')]",
        "ipsecPolicies": "[if(not(empty(parameters('customIPSecPolicy').ipsecEncryption)), variables('customIPSecPolicy_var'), parameters('customIPSecPolicy').ipsecEncryption)]",
        "routingWeight": "[if(not(equals(parameters('routingWeight'), -1)), parameters('routingWeight'), null())]",
        "enableBgp": "[parameters('enableBgp')]"
      }
    },
    {
      "condition": "[not(empty(parameters('lock')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.Network/connections/{0}', parameters('name'))]",
      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
      "properties": {
        "level": "[parameters('lock')]",
        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/connections', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The resource group the remote connection was deployed into."
      }
    },
    "name": {
      "type": "string",
      "value": "[parameters('name')]",
      "metadata": {
        "description": "The name of the remote connection."
      }
    },
    "resourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/connections', parameters('name'))]",
      "metadata": {
        "description": "The resource ID of the remote connection."
      }
    },
    "location": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/connections', parameters('name')), '2021-08-01', 'full').location]",
      "metadata": {
        "description": "The location the resource was deployed into."
      }
    }
  }
}
