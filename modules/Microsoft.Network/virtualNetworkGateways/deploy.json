{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. Specifies the Virtual Network Gateway name."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "gatewayPipName": {
      "type": "string",
      "defaultValue": "[format('{0}-pip1', parameters('name'))]",
      "metadata": {
        "description": "Optional. Specifies the name of the Public IP used by the Virtual Network Gateway. If it's not provided, a '-pip' suffix will be appended to the gateway's name."
      }
    },
    "activeGatewayPipName": {
      "type": "string",
      "defaultValue": "[format('{0}-pip2', parameters('name'))]",
      "metadata": {
        "description": "Optional. Specifies the name of the Public IP used by the Virtual Network Gateway when active-active configuration is required. If it's not provided, a '-pip' suffix will be appended to the gateway's name."
      }
    },
    "publicIPPrefixResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
      }
    },
    "publicIpZones": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Specifies the zones of the Public IP address. Basic IP SKU does not support Availability Zones."
      }
    },
    "domainNameLabel": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. DNS name(s) of the Public IP resource(s). If you enabled active-active configuration, you need to provide 2 DNS names, if you want to use this feature. A region specific suffix will be appended to it, e.g.: your-DNS-name.westeurope.cloudapp.azure.com."
      }
    },
    "virtualNetworkGatewayType": {
      "type": "string",
      "allowedValues": [
        "Vpn",
        "ExpressRoute"
      ],
      "metadata": {
        "description": "Required. Specifies the gateway type. E.g. VPN, ExpressRoute."
      }
    },
    "virtualNetworkGatewaySku": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "VpnGw1",
        "VpnGw2",
        "VpnGw3",
        "VpnGw1AZ",
        "VpnGw2AZ",
        "VpnGw3AZ",
        "Standard",
        "HighPerformance",
        "UltraPerformance",
        "ErGw1AZ",
        "ErGw2AZ",
        "ErGw3AZ"
      ],
      "metadata": {
        "description": "Required. The SKU of the Gateway."
      }
    },
    "vpnType": {
      "type": "string",
      "defaultValue": "RouteBased",
      "allowedValues": [
        "PolicyBased",
        "RouteBased"
      ],
      "metadata": {
        "description": "Optional. Specifies the VPN type."
      }
    },
    "vNetResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required. Virtual Network resource ID."
      }
    },
    "activeActive": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Value to specify if the Gateway should be deployed in active-active or active-passive configuration."
      }
    },
    "enableBgp": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Value to specify if BGP is enabled or not."
      }
    },
    "asn": {
      "type": "int",
      "defaultValue": 65815,
      "metadata": {
        "description": "Optional. ASN value."
      }
    },
    "vpnClientAddressPoolPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The IP address range from which VPN clients will receive an IP address when connected. Range specified must not overlap with on-premise network."
      }
    },
    "clientRootCertData": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Client root certificate data used to authenticate VPN clients."
      }
    },
    "clientRevokedCertThumbprint": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Thumbprint of the revoked certificate. This would revoke VPN client certificates matching this thumbprint from connecting to the VNet."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "maxValue": 365,
      "minValue": 0,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic storage account."
      }
    },
    "diagnosticWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
      }
    },
    "diagnosticEventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "diagnosticEventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "roleAssignments": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
      }
    },
    "lock": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Specify the type of lock."
      },
      "allowedValues": [
        "",
        "CanNotDelete",
        "ReadOnly"
      ]
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "enableDefaultTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
      }
    },
    "publicIpdiagnosticLogCategoriesToEnable": {
      "type": "array",
      "defaultValue": [
        "DDoSProtectionNotifications",
        "DDoSMitigationFlowLogs",
        "DDoSMitigationReports"
      ],
      "allowedValues": [
        "DDoSProtectionNotifications",
        "DDoSMitigationFlowLogs",
        "DDoSMitigationReports"
      ],
      "metadata": {
        "description": "Optional. The name of logs that will be streamed."
      }
    },
    "virtualNetworkGatewaydiagnosticLogCategoriesToEnable": {
      "type": "array",
      "defaultValue": [
        "GatewayDiagnosticLog",
        "TunnelDiagnosticLog",
        "RouteDiagnosticLog",
        "IKEDiagnosticLog",
        "P2SDiagnosticLog"
      ],
      "allowedValues": [
        "GatewayDiagnosticLog",
        "TunnelDiagnosticLog",
        "RouteDiagnosticLog",
        "IKEDiagnosticLog",
        "P2SDiagnosticLog"
      ],
      "metadata": {
        "description": "Optional. The name of logs that will be streamed."
      }
    },
    "diagnosticMetricsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllMetrics"
      ],
      "allowedValues": [
        "AllMetrics"
      ],
      "metadata": {
        "description": "Optional. The name of metrics that will be streamed."
      }
    },
    "virtualNetworkGatewayDiagnosticSettingsName": {
      "type": "string",
      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
      "metadata": {
        "description": "Optional. The name of the diagnostic setting, if deployed."
      }
    },
    "publicIpDiagnosticSettingsName": {
      "type": "string",
      "defaultValue": "diagnosticSettings",
      "metadata": {
        "description": "Optional. The name of the diagnostic setting, if deployed."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "virtualNetworkGatewayDiagnosticsLogs",
        "count": "[length(parameters('virtualNetworkGatewaydiagnosticLogCategoriesToEnable'))]",
        "input": {
          "category": "[parameters('virtualNetworkGatewaydiagnosticLogCategoriesToEnable')[copyIndex('virtualNetworkGatewayDiagnosticsLogs')]]",
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      },
      {
        "name": "publicIpDiagnosticsLogs",
        "count": "[length(parameters('publicIpdiagnosticLogCategoriesToEnable'))]",
        "input": {
          "category": "[parameters('publicIpdiagnosticLogCategoriesToEnable')[copyIndex('publicIpDiagnosticsLogs')]]",
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      },
      {
        "name": "diagnosticsMetrics",
        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
        "input": {
          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
          "timeGrain": null,
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      }
    ],
    "zoneRedundantSkus": [
      "VpnGw1AZ",
      "VpnGw2AZ",
      "VpnGw3AZ",
      "VpnGw4AZ",
      "VpnGw5AZ",
      "ErGw1AZ",
      "ErGw2AZ",
      "ErGw3AZ"
    ],
    "gatewayPipSku": "[if(contains(variables('zoneRedundantSkus'), parameters('virtualNetworkGatewaySku')), 'Standard', 'Basic')]",
    "gatewayPipAllocationMethod": "[if(contains(variables('zoneRedundantSkus'), parameters('virtualNetworkGatewaySku')), 'Static', 'Dynamic')]",
    "isActiveActiveValid": "[if(not(equals(parameters('virtualNetworkGatewayType'), 'ExpressRoute')), parameters('activeActive'), false())]",
    "virtualGatewayPipName_var": "[if(variables('isActiveActiveValid'), createArray(parameters('gatewayPipName'), parameters('activeGatewayPipName')), createArray(parameters('gatewayPipName')))]",
    "vpnType_var": "[if(not(equals(parameters('virtualNetworkGatewayType'), 'ExpressRoute')), parameters('vpnType'), 'PolicyBased')]",
    "isBgpValid": "[if(not(equals(parameters('virtualNetworkGatewayType'), 'ExpressRoute')), parameters('enableBgp'), false())]",
    "bgpSettings": {
      "asn": "[parameters('asn')]"
    },
    "ipConfiguration": "[if(variables('isActiveActiveValid'), createArray(createObject('properties', createObject('privateIPAllocationMethod', 'Dynamic', 'subnet', createObject('id', format('{0}/subnets/GatewaySubnet', parameters('vNetResourceId'))), 'publicIPAddress', createObject('id', resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPipName')))), 'name', 'vNetGatewayConfig1'), createObject('properties', createObject('privateIPAllocationMethod', 'Dynamic', 'subnet', createObject('id', format('{0}/subnets/GatewaySubnet', parameters('vNetResourceId'))), 'publicIPAddress', createObject('id', if(variables('isActiveActiveValid'), resourceId('Microsoft.Network/publicIPAddresses', parameters('activeGatewayPipName')), resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPipName'))))), 'name', 'vNetGatewayConfig2')), createArray(createObject('properties', createObject('privateIPAllocationMethod', 'Dynamic', 'subnet', createObject('id', format('{0}/subnets/GatewaySubnet', parameters('vNetResourceId'))), 'publicIPAddress', createObject('id', resourceId('Microsoft.Network/publicIPAddresses', parameters('gatewayPipName')))), 'name', 'vNetGatewayConfig1')))]",
    "vpnClientConfiguration": {
      "vpnClientAddressPool": {
        "addressPrefixes": [
          "[parameters('vpnClientAddressPoolPrefix')]"
        ]
      },
      "vpnClientRootCertificates": "[if(not(empty(parameters('clientRootCertData'))), createArray(createObject('name', 'RootCert1', 'properties', createObject('PublicCertData', parameters('clientRootCertData')))), null())]",
      "vpnClientRevokedCertificates": "[if(not(empty(parameters('clientRevokedCertThumbprint'))), createArray(createObject('name', 'RevokedCert1', 'properties', createObject('Thumbprint', parameters('clientRevokedCertThumbprint')))), null())]"
    }
  },
  "resources": [
    {
      "condition": "[parameters('enableDefaultTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "copy": {
        "name": "virtualGatewayPublicIP",
        "count": "[length(variables('virtualGatewayPipName_var'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2021-08-01",
      "name": "[variables('virtualGatewayPipName_var')[copyIndex()]]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[variables('gatewayPipSku')]"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('gatewayPipAllocationMethod')]",
        "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
        "dnsSettings": "[if(equals(length(variables('virtualGatewayPipName_var')), length(parameters('domainNameLabel'))), createObject('domainNameLabel', parameters('domainNameLabel')[copyIndex()]), null())]"
      },
      "zones": "[if(contains(variables('zoneRedundantSkus'), parameters('virtualNetworkGatewaySku')), parameters('publicIpZones'), null())]"
    },
    {
      "condition": "[not(empty(parameters('lock')))]",
      "copy": {
        "name": "virtualGatewayPublicIP_lock",
        "count": "[length(variables('virtualGatewayPipName_var'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', variables('virtualGatewayPipName_var')[copyIndex()])]",
      "name": "[format('{0}-{1}-lock', variables('virtualGatewayPipName_var')[copyIndex()], parameters('lock'))]",
      "properties": {
        "level": "[parameters('lock')]",
        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('virtualGatewayPipName_var')[copyIndex()])]"
      ]
    },
    {
      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
      "copy": {
        "name": "virtualNetworkGatewayPublicIp_diagnosticSettings",
        "count": "[length(variables('virtualGatewayPipName_var'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', variables('virtualGatewayPipName_var')[copyIndex()])]",
      "name": "[format('{0}-{1}', variables('virtualGatewayPipName_var')[copyIndex()], parameters('publicIpDiagnosticSettingsName'))]",
      "properties": {
        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
        "metrics": "[variables('diagnosticsMetrics')]",
        "logs": "[variables('publicIpDiagnosticsLogs')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('virtualGatewayPipName_var')[copyIndex()])]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('virtualGatewayPipName_var')[copyIndex()])]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworkGateways",
      "apiVersion": "2021-08-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "ipConfigurations": "[variables('ipConfiguration')]",
        "activeActive": "[variables('isActiveActiveValid')]",
        "enableBgp": "[variables('isBgpValid')]",
        "bgpSettings": "[if(variables('isBgpValid'), variables('bgpSettings'), null())]",
        "sku": {
          "name": "[parameters('virtualNetworkGatewaySku')]",
          "tier": "[parameters('virtualNetworkGatewaySku')]"
        },
        "gatewayType": "[parameters('virtualNetworkGatewayType')]",
        "vpnType": "[variables('vpnType_var')]",
        "vpnClientConfiguration": "[if(not(empty(parameters('vpnClientAddressPoolPrefix'))), variables('vpnClientConfiguration'), null())]"
      },
      "dependsOn": [
        "virtualGatewayPublicIP"
      ]
    },
    {
      "condition": "[not(empty(parameters('lock')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.Network/virtualNetworkGateways/{0}', parameters('name'))]",
      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
      "properties": {
        "level": "[parameters('lock')]",
        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('name'))]"
      ]
    },
    {
      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Network/virtualNetworkGateways/{0}', parameters('name'))]",
      "name": "[parameters('virtualNetworkGatewayDiagnosticSettingsName')]",
      "properties": {
        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
        "metrics": "[variables('diagnosticsMetrics')]",
        "logs": "[variables('virtualNetworkGatewayDiagnosticsLogs')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('name'))]"
      ]
    },
    {
      "copy": {
        "name": "virtualNetworkGateway_roleAssignments",
        "count": "[length(parameters('roleAssignments'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-VNetGateway-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "description": {
            "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), parameters('roleAssignments')[copyIndex()].description, '')]"
          },
          "principalIds": {
            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
          },
          "principalType": {
            "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), parameters('roleAssignments')[copyIndex()].principalType, '')]"
          },
          "roleDefinitionIdOrName": {
            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
          },
          "resourceId": {
            "value": "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('name'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "principalIds": {
              "type": "array",
              "metadata": {
                "description": "Required. The IDs of the principals to assign the role to."
              }
            },
            "roleDefinitionIdOrName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
              }
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. The resource ID of the resource to apply the role assignment to."
              }
            },
            "principalType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "ServicePrincipal",
                "Group",
                "User",
                "ForeignGroup",
                "Device",
                ""
              ],
              "metadata": {
                "description": "Optional. The principal type of the assigned principal ID."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of the role assignment."
              }
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignment",
                "count": "[length(parameters('principalIds'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworkGateways/{0}', last(split(parameters('resourceId'), '/')))]",
              "name": "[guid(resourceId('Microsoft.Network/virtualNetworkGateways', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
              "properties": {
                "description": "[parameters('description')]",
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                "principalId": "[parameters('principalIds')[copyIndex()]]",
                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The resource group the virtual network gateway was deployed."
      }
    },
    "name": {
      "type": "string",
      "value": "[parameters('name')]",
      "metadata": {
        "description": "The name of the virtual network gateway."
      }
    },
    "resourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('name'))]",
      "metadata": {
        "description": "The resource ID of the virtual network gateway."
      }
    },
    "activeActive": {
      "type": "bool",
      "value": "[reference(resourceId('Microsoft.Network/virtualNetworkGateways', parameters('name'))).activeActive]",
      "metadata": {
        "description": "Shows if the virtual network gateway is configured in active-active mode."
      }
    },
    "location": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/virtualNetworkGateways', parameters('name')), '2021-08-01', 'full').location]",
      "metadata": {
        "description": "The location the resource was deployed into."
      }
    }
  }
}
