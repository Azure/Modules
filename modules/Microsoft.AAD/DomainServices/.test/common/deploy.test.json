{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "[format('ms.aad.domainservices-{0}-rg', parameters('serviceShort'))]",
      "maxLength": 90,
      "metadata": {
        "description": "Optional. The name of the resource group to deploy for testing purposes."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Optional. The location to deploy resources to."
      }
    },
    "serviceShort": {
      "type": "string",
      "defaultValue": "aaddscom",
      "metadata": {
        "description": "Optional. A short identifier for the kind of deployment. Should be kept short to not run into resource-name length-constraints."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[parameters('resourceGroupName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualNetworkName": {
            "value": "[format('dep-<<namePrefix>>-vnet-{0}', parameters('serviceShort'))]"
          },
          "keyVaultName": {
            "value": "[format('dep-<<namePrefix>>-kv-{0}', parameters('serviceShort'))]"
          },
          "managedIdentityName": {
            "value": "[format('dep-<<namePrefix>>-msi-{0}', parameters('serviceShort'))]"
          },
          "certDeploymentScriptName": {
            "value": "[format('dep-<<namePrefix>>-ds-{0}', parameters('serviceShort'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location to deploy to."
              }
            },
            "virtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Virtual Network to create."
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Key Vault to create."
              }
            },
            "managedIdentityName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Managed Identity to create."
              }
            },
            "certDeploymentScriptName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Deployment Script to create for the Certificate generation."
              }
            }
          },
          "variables": {
            "$fxv#0": "param(\r\n    [string] $KeyVaultName,\r\n    [string] $ResourceGroupName,\r\n    [string] $CertPWSecretName,\r\n    [string] $CertSecretName\r\n)\r\n\r\n$password = ConvertTo-SecureString -String \"$ResourceGroupName/$KeyVaultName/$CertSecretName\" -AsPlainText -Force\r\n\r\n# Install open-ssl if not available\r\napt-get install openssl\r\n\r\n# Generate certificate\r\nopenssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout './privateKey.key' -out './certificate.crt' -subj '/CN=*.contoso.onmicrosoft.com/O=contoso/C=US'\r\n\r\n# Sign certificate\r\nopenssl pkcs12 -export -out 'aadds.pfx' -inkey './privateKey.key' -in './certificate.crt' -passout pass:$password\r\n\r\n# Convert certificate to string\r\n$rawCertByteStream = Get-Content './aadds.pfx' -AsByteStream\r\nWrite-Verbose 'Convert to secure string' -Verbose\r\n$pfxCertificate = ConvertTo-SecureString -String ([System.Convert]::ToBase64String($rawCertByteStream)) -AsPlainText -Force\r\n\r\n# Set values\r\n@(\r\n    @{ name = $CertPWSecretName; secretValue = $password }\r\n    @{ name = $CertSecretName; secretValue = $pfxCertificate }\r\n) | ForEach-Object {\r\n    $null = Set-AzKeyVaultSecret -VaultName $KeyVaultName -Name $_.name -SecretValue $_.secretValue\r\n    Write-Verbose ('Added secret [{0}] to key vault [{1}]' -f $_.name, $keyVaultName) -Verbose\r\n}\r\n",
            "certPWSecretName": "pfxCertificatePassword",
            "certSecretName": "pfxBase64Certificate"
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-01-01",
              "name": "[parameters('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/24"
                  ]
                },
                "subnets": [
                  {
                    "name": "defaultSubnet",
                    "properties": {
                      "addressPrefix": "10.0.0.0/24"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "tenantId": "[tenant().tenantId]",
                "enablePurgeProtection": null,
                "enabledForTemplateDeployment": true,
                "enabledForDiskEncryption": true,
                "enabledForDeployment": true,
                "enableRbacAuthorization": true,
                "accessPolicies": []
              }
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('managedIdentityName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(format('msi-{0}-KeyVault-Admin-RoleAssignment', parameters('managedIdentityName')))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[parameters('certDeploymentScriptName')]",
              "location": "[parameters('location')]",
              "kind": "AzurePowerShell",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]": {}
                }
              },
              "properties": {
                "azPowerShellVersion": "3.0",
                "retentionInterval": "P1D",
                "arguments": "[format(' -KeyVaultName \"{0}\" -ResourceGroupName \"{1}\" -CertPWSecretName \"{2}\" -CertSecretName \"{3}\"', parameters('keyVaultName'), resourceGroup().name, variables('certPWSecretName'), variables('certSecretName'))]",
                "scriptContent": "[variables('$fxv#0')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              ]
            }
          ],
          "outputs": {
            "subnetResourceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2022-01-01').subnets[0].id]",
              "metadata": {
                "description": "The resource ID of the created Virtual Network Subnet."
              }
            },
            "keyVaultResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
              "metadata": {
                "description": "The resource ID of the created Key Vault."
              }
            },
            "certPWSecretName": {
              "type": "string",
              "value": "[variables('certPWSecretName')]",
              "metadata": {
                "description": "The name of the certification password secret."
              }
            },
            "certSecretName": {
              "type": "string",
              "value": "[variables('certSecretName')]",
              "metadata": {
                "description": "The name of the certification secret."
              }
            },
            "managedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId]",
              "metadata": {
                "description": "The principal ID of the created Managed Identity."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location')))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[format('dep<<namePrefix>>diasa{0}01', parameters('serviceShort'))]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[format('dep-<<namePrefix>>-law-{0}', parameters('serviceShort'))]"
          },
          "eventHubNamespaceEventHubName": {
            "value": "[format('dep-<<namePrefix>>-evh-{0}', parameters('serviceShort'))]"
          },
          "eventHubNamespaceName": {
            "value": "[format('dep-<<namePrefix>>-evhns-{0}', parameters('serviceShort'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Required. The name of the storage account to create."
              }
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the log analytics workspace to create."
              }
            },
            "eventHubNamespaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the event hub namespace to create."
              }
            },
            "eventHubNamespaceEventHubName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the event hub to create inside the event hub namespace."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location to deploy resources to."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}', parameters('eventHubNamespaceName'), parameters('eventHubNamespaceEventHubName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
              ]
            },
            {
              "type": "Microsoft.EventHub/namespaces/authorizationRules",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('eventHubNamespaceName'), 'RootManageSharedAccessKey')]",
              "properties": {
                "rights": [
                  "Listen",
                  "Manage",
                  "Send"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-08-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "Standard_LRS"
              },
              "properties": {
                "allowBlobPublicAccess": false
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-12-01-preview",
              "name": "[parameters('logAnalyticsWorkspaceName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.EventHub/namespaces",
              "apiVersion": "2021-11-01",
              "name": "[parameters('eventHubNamespaceName')]",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "storageAccountResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
              "metadata": {
                "description": "The resource ID of the created Storage Account."
              }
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
              "metadata": {
                "description": "The resource ID of the created Log Analytics Workspace."
              }
            },
            "eventHubNamespaceResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]",
              "metadata": {
                "description": "The resource ID of the created Event Hub Namespace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "value": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', parameters('eventHubNamespaceName'), 'RootManageSharedAccessKey')]",
              "metadata": {
                "description": "The resource ID of the created Event Hub Namespace Authorization Rule."
              }
            },
            "eventHubNamespaceEventHubName": {
              "type": "string",
              "value": "[parameters('eventHubNamespaceEventHubName')]",
              "metadata": {
                "description": "The name of the created Event Hub Namespace Event Hub."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-test-{1}', uniqueString(deployment().name), parameters('serviceShort'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('<<namePrefix>>{0}001', parameters('serviceShort'))]"
          },
          "domainName": {
            "value": "<<namePrefix>>.onmicrosoft.com"
          },
          "additionalRecipients": {
            "value": [
              "<<namePrefix>>@noreply.github.com"
            ]
          },
          "diagnosticLogsRetentionInDays": {
            "value": 7
          },
          "diagnosticStorageAccountId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.storageAccountResourceId.value]"
          },
          "diagnosticWorkspaceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.logAnalyticsWorkspaceResourceId.value]"
          },
          "diagnosticEventHubAuthorizationRuleId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.eventHubAuthorizationRuleId.value]"
          },
          "diagnosticEventHubName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.eventHubNamespaceEventHubName.value]"
          },
          "lock": {
            "value": "CanNotDelete"
          },
          "pfxCertificate": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', last(split(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.keyVaultResourceId.value, '/')))]"
              },
              "secretName": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.certSecretName.value]"
            }
          },
          "pfxCertificatePassword": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', last(split(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.keyVaultResourceId.value, '/')))]"
              },
              "secretName": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.certPWSecretName.value]"
            }
          },
          "replicaSets": {
            "value": [
              {
                "location": "WestEurope",
                "subnetId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.subnetResourceId.value]"
              }
            ]
          },
          "sku": {
            "value": "Standard"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "[parameters('domainName')]",
              "metadata": {
                "description": "Optional. The name of the AADDS resource. Defaults to the domain name specific to the Azure ADDS service."
              }
            },
            "domainName": {
              "type": "string",
              "metadata": {
                "description": "Required. The domain name specific to the Azure ADDS service."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Standard",
                "Enterprise",
                "Premium"
              ],
              "metadata": {
                "description": "Optional. The name of the SKU specific to Azure ADDS Services."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location to deploy the Azure ADDS Services."
              }
            },
            "replicaSets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Additional replica set for the managed domain."
              }
            },
            "pfxCertificate": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. The certificate required to configure Secure LDAP. Should be a base64encoded representation of the certificate PFX file. Required if secure LDAP is enabled and must be valid more than 30 days."
              }
            },
            "pfxCertificatePassword": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. The password to decrypt the provided Secure LDAP certificate PFX file. Required if secure LDAP is enabled."
              }
            },
            "additionalRecipients": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The email recipient value to receive alerts."
              }
            },
            "domainConfigurationType": {
              "type": "string",
              "defaultValue": "FullySynced",
              "allowedValues": [
                "FullySynced",
                "ResourceTrusting"
              ],
              "metadata": {
                "description": "Optional. The value is to provide domain configuration type."
              }
            },
            "filteredSync": {
              "type": "string",
              "defaultValue": "Enabled",
              "metadata": {
                "description": "Optional. The value is to synchronize scoped users and groups."
              }
            },
            "tlsV1": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The value is to enable clients making request using TLSv1."
              }
            },
            "ntlmV1": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The value is to enable clients making request using NTLM v1."
              }
            },
            "syncNtlmPasswords": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The value is to enable synchronized users to use NTLM authentication."
              }
            },
            "syncOnPremPasswords": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The value is to enable on-premises users to authenticate against managed domain."
              }
            },
            "kerberosRc4Encryption": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The value is to enable Kerberos requests that use RC4 encryption."
              }
            },
            "kerberosArmoring": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The value is to enable to provide a protected channel between the Kerberos client and the KDC."
              }
            },
            "notifyDcAdmins": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The value is to notify the DC Admins."
              }
            },
            "notifyGlobalAdmins": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The value is to notify the Global Admins."
              }
            },
            "externalAccess": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The value is to enable the Secure LDAP for external services of Azure ADDS Services."
              }
            },
            "ldaps": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. A flag to determine whether or not Secure LDAP is enabled or disabled."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "",
                "CanNotDelete",
                "ReadOnly"
              ]
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
              }
            },
            "logsToEnable": {
              "type": "array",
              "allowedValues": [
                "SystemSecurity",
                "AccountManagement",
                "LogonLogoff",
                "ObjectAccess",
                "PolicyChange",
                "PrivilegeUse",
                "DetailTracking",
                "DirectoryServiceAccess",
                "AccountLogon"
              ],
              "defaultValue": [
                "SystemSecurity",
                "AccountManagement",
                "LogonLogoff",
                "ObjectAccess",
                "PolicyChange",
                "PrivilegeUse",
                "DetailTracking",
                "DirectoryServiceAccess",
                "AccountLogon"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ]
          },
          "resources": [
            {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            {
              "type": "Microsoft.AAD/domainServices",
              "apiVersion": "2021-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "domainName": "[parameters('domainName')]",
                "domainConfigurationType": "[parameters('domainConfigurationType')]",
                "filteredSync": "[parameters('filteredSync')]",
                "notificationSettings": {
                  "additionalRecipients": "[parameters('additionalRecipients')]",
                  "notifyDcAdmins": "[parameters('notifyDcAdmins')]",
                  "notifyGlobalAdmins": "[parameters('notifyGlobalAdmins')]"
                },
                "ldapsSettings": {
                  "externalAccess": "[parameters('externalAccess')]",
                  "ldaps": "[parameters('ldaps')]",
                  "pfxCertificate": "[if(not(empty(parameters('pfxCertificate'))), parameters('pfxCertificate'), null())]",
                  "pfxCertificatePassword": "[if(not(empty(parameters('pfxCertificatePassword'))), parameters('pfxCertificatePassword'), null())]"
                },
                "replicaSets": "[parameters('replicaSets')]",
                "domainSecuritySettings": {
                  "tlsV1": "[parameters('tlsV1')]",
                  "ntlmV1": "[parameters('ntlmV1')]",
                  "syncNtlmPasswords": "[parameters('syncNtlmPasswords')]",
                  "syncOnPremPasswords": "[parameters('syncOnPremPasswords')]",
                  "kerberosRc4Encryption": "[parameters('kerberosRc4Encryption')]",
                  "kerberosArmoring": "[parameters('kerberosArmoring')]"
                },
                "sku": "[parameters('sku')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.AAD/domainServices/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.AAD/domainServices', parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('lock')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2017-04-01",
              "scope": "[format('Microsoft.AAD/domainServices/{0}', parameters('name'))]",
              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.AAD/domainServices', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "domainService_roleAssignments",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-VNet-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "description": {
                    "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), parameters('roleAssignments')[copyIndex()].description, '')]"
                  },
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "principalType": {
                    "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), parameters('roleAssignments')[copyIndex()].principalType, '')]"
                  },
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "condition": {
                    "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), parameters('roleAssignments')[copyIndex()].condition, '')]"
                  },
                  "delegatedManagedIdentityResourceId": {
                    "value": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId, '')]"
                  },
                  "resourceId": {
                    "value": "[resourceId('Microsoft.AAD/domainServices', parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "principalIds": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The IDs of the principals to assign the role to."
                      }
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the resource to apply the role assignment to."
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the role assignment."
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition."
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Id of the delegated managed identity resource."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "HDInsight Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8d8d5a11-05d3-4bda-a417-a08778121c7c')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.AAD/domainServices/{0}', last(split(parameters('resourceId'), '/')))]",
                      "name": "[guid(resourceId('Microsoft.AAD/domainServices', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "description": "[parameters('description')]",
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.AAD/domainServices', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The domain name of the Azure Active Directory Domain Services(Azure ADDS)."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the resource group the Azure Active Directory Domain Services(Azure ADDS) was created in."
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.AAD/domainServices', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the Azure Active Directory Domain Services(Azure ADDS)."
              }
            },
            "location": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.AAD/domainServices', parameters('name')), '2021-05-01', 'full').location]",
              "metadata": {
                "description": "The location the resource was deployed into."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-diagnosticDependencies', uniqueString(deployment().name, parameters('location'))))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-paramNested', uniqueString(deployment().name, parameters('location'))))]"
      ]
    }
  ]
}
