name: 'Replace Tokens'
description: 'Replace Tokens in File'

inputs:
  filePath:
    description: 'The path to the file that contains the tokens'
    required: true
  tokenLocation:
    description: 'The location to use for deployment'
    required: false
  tokenResourceGroupName:
    description: 'The resource group to deploy to'
    required: false
  tokenSubscriptionId:
    description: 'The subscriptionId to deploy to'
    required: false
  tokenManagementGroupId:
    description: 'The managementGroupId to deploy to'
    required: false
  tokenTenantId:
    description: 'The managementGroupId to deploy to'
    required: false
  tokenDeploymentSpId:
    description: 'The managementGroupId to deploy to'
    required: false
  remoteTokensKeyVaultName:
    description: 'The managementGroupId to deploy to'
    required: false
  remoteTokensKeyVaultSubscriptionId:
    description: 'The managementGroupId to deploy to'
    required: false

runs:
  using: 'composite'
  steps:
    - name: 'Setup agent'
      shell: pwsh
      run: |
        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

        # Set agent up
        Set-EnvironmentOnAgent

    - if: '${{ inputs.remoteTokensKeyVaultName && inputs.remoteTokensKeyVaultSubscriptionId }}'
      name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ env.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - if: '${{ inputs.remoteTokensKeyVaultName && inputs.remoteTokensKeyVaultSubscriptionId }}'
      name: 'Mask Tokens'
      shell: pwsh
      run: |
        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'tokensReplacement' 'helper' 'Add-Mask.ps1')
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'tokensReplacement' 'helper' 'Get-TokenFromKeyVault.ps1')

        # Load Settings File
        $Settings = Get-Content -Path "settings.json" | ConvertFrom-Json

        $RemoteTokens = Get-TokenFromKeyVault -KeyVaultName '${{ inputs.remoteTokensKeyVaultName }}' -subscriptionId '${{ inputs.remoteTokensKeyVaultSubscriptionId }}' -SecretContentType $Settings.parameterFileTokens.remoteTokens.keyVaultSecretContentType -verbose
        foreach($token in $RemoteTokens){
          $ValueA = ConvertFrom-SecureString -AsPlainText -SecureString $($token.Value)
          write-host "Token Value Before is: $ValueA"
          Add-Mask -Value $($token.Value) -GitHubActions
          $ValueB = ConvertFrom-SecureString -AsPlainText -SecureString $($token.Value)
          write-host "Token Value After is: $ValueB"
        }

    - name: 'Replace Tokens in File [${{ inputs.filePath }}] '
      shell: pwsh
      run: |
        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'tokensReplacement' 'Convert-TokensInParameterFile.ps1')

        # Load Settings File
        $Settings = Get-Content -Path "settings.json" | ConvertFrom-Json

        # Initialize Default Parameter File Tokens
        $DefaultParameterFileTokens = @(
            @{ Name = 'resourceGroupName'; Value = '${{ inputs.tokenResourceGroupName }}' }
            @{ Name = 'subscriptionId'; Value = '${{ inputs.tokenSubscriptionId }}' }
            @{ Name = 'managementGroupId'; Value = '${{ inputs.tokenManagementGroupId }}' }
            @{ Name = "tenantId"; Value = '${{ inputs.tokenTenantId }}' }
            @{ Name = "deploymentSpId"; Value = '${{ inputs.tokenDeploymentSpId }}' }
            @{ Name = "platformKeyVault"; Value = '${{ inputs.remoteTokensKeyVaultName }}' }
        ) | ForEach-Object { [PSCustomObject]$PSItem }

        # Construct Token Function Input
        $ConvertTokensInputs = @{
            ParameterFilePath                 = '${{ inputs.filePath }}'
            DefaultParameterFileTokens        = $DefaultParameterFileTokens
            LocalCustomParameterFileTokens    = $Settings.parameterFileTokens.localTokens.tokens
            TokenPrefix                       = $Settings.parameterFileTokens.tokenPrefix
            TokenSuffix                       = $Settings.parameterFileTokens.tokenSuffix
        }
        # Add Remote Custom Parameter File Tokens
        if ('${{ inputs.remoteTokensKeyVaultName }}' -and '${{ inputs.remoteTokensKeyVaultSubscriptionId }}') {
            $ConvertTokensInputs += @{
                TokensKeyVaultName                 = '${{ inputs.remoteTokensKeyVaultName }}'
                TokensKeyVaultSubscriptionId       = '${{ inputs.remoteTokensKeyVaultSubscriptionId }}'
                TokensKeyVaultSecretContentType    = $Settings.parameterFileTokens.remoteTokens.keyVaultSecretContentType
            }
        }
        # Invoke Token Replacement Functionality
        $null = Convert-TokensInParameterFile @ConvertTokensInputs -Verbose

        get-content -Path '${{ inputs.filePath }}'

    - name: Cache File
      uses: actions/cache@v2
      with:
        path: '${{ inputs.filePath }}'
        key: ${{ hashFiles(inputs.filePath) }}
