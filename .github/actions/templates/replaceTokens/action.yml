name: 'Replace Tokens'
description: 'Replace Tokens in File'

inputs:
  filePath:
    description: 'The path to the file that contains the tokens'
    required: true
  tokenLocation:
    description: 'The location to use for deployment'
    required: false
  tokenResourceGroupName:
    description: 'The resource group to deploy to'
    required: false
  tokenSubscriptionId:
    description: 'The subscriptionId to deploy to'
    required: false
  tokenManagementGroupId:
    description: 'The managementGroupId to deploy to'
    required: false
  tokenTenantId:
    description: 'The managementGroupId to deploy to'
    required: false
  tokenPlatformKeyVault:
    description: 'The managementGroupId to deploy to'
    required: false

runs:
  using: 'composite'
  steps:
    - name: 'Setup agent'
      shell: pwsh
      run: |
        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

        # Set agent up
        Set-EnvironmentOnAgent

    - if: '${{ inputs.tokenPlatformKeyVault }}'
      name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ env.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - name: 'Replace Tokens in File [${{ inputs.filePath }}] '
      shell: pwsh
      run: |
        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'tokensReplacement' 'helper' 'Add-Mask.ps1')
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'tokensReplacement' 'helper' 'Get-TokenFromKeyVault.ps1')
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'tokensReplacement' 'helper' 'Convert-TokenInFile.ps1')

        # Load Settings File
        $Settings = Get-Content -Path "settings.json" | ConvertFrom-Json

        if('${{ inputs.tokenPlatformKeyVault }}' -and '${{ inputs.tokenSubscriptionId }}'){
          $RemoteTokens = Get-TokenFromKeyVault -KeyVaultName '${{ inputs.tokenPlatformKeyVault }}' -subscriptionId '${{ inputs.tokenSubscriptionId }}' -SecretContentType $Settings.parameterFileTokens.remoteTokens.keyVaultSecretContentType -verbose
          foreach($token in $RemoteTokens){
          $ValueA = ConvertFrom-SecureString -AsPlainText -SecureString $($token.Value)
          write-host "Token Value Before is: $ValueA"
          Add-Mask -Value $($token.Value) -GitHubActions
          $ValueB = ConvertFrom-SecureString -AsPlainText -SecureString $($token.Value)
          write-host "Token Value After is: $ValueB"
          }
        }


        get-content -Path '${{ inputs.filePath }}'
