#########################################################
## 'Validate module with PSRule' Composite Action      ##
#########################################################
##
## This composite action contains the logic to validate a module using a set of PSRule tests
##
#########################################################
##
##-------------------------------------------##
## ACTION PARAMETERS                         ##
##-------------------------------------------##
##
##   |==================================================================================================================================================|
##   | Parameter                | Required | Default | Description                          | Example                                                   |
##   |--------------------------|----------|---------|--------------------------------------|-----------------------------------------------------------|
##   | modulePath               | true     | ''      | The path to the module's folder      | 'modules/Microsoft.ApiManagement/service'                 |
##   | moduleTestFilePath       | true     | ''      | The path to the module PSRule tests. | 'utilities/pipelines/staticValidation/module.tests.ps1'   |
##   |==================================================================================================================================================|
##
##---------------------------------------------##

name: 'Execute PSRule module tests'
description: 'Execute PSRule module tests (if any)'

inputs:
  modulePath:
    description: "The path to the module's folder"
    required: true
    default: ''
  moduleTestFilePath:
    description: 'The path to the test file'
    required: true
    default: ''

runs:
  using: 'composite'
  steps:
    - name: 'Setup agent'
      shell: pwsh
      run: |
        # Grouping task logs
        Write-Output '::group::Setup agent'

        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

        # Define PS modules to install on the runner
        $Modules = @(
            # This is the latest tested PSRule version. Uncomment the next line in case of a future breaking change in the default version installed on the runner.
            # @{ Name = 'PSRule'; Version = '5.3.1' }
            @{ Name = 'Az.Resources' }
            @{ Name = 'powershell-yaml'; Version = '0.4.2'}
        )

        # Set agent up
        Set-EnvironmentOnAgent -PSModules $Modules

        Write-Output '::endgroup::'

    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ env.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    # [Module PSRule Test] task(s)
    #-----------------------------
    - name: 'Replace tokens in template file'
      uses: azure/powershell@v1
      with:
        azPSVersion: 'latest'
        inlineScript: |
          $templateFilePath = '${{ env.modulePath }}/${{ matrix.moduleTestFilePaths }}'
          # Grouping task logs
          Write-Output '::group::Replace tokens in template file'

          # Load used functions
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'tokensReplacement' 'Convert-TokensInFileList.ps1')

          # Populate tokens
          $Tokens = @{
            resourceGroupName = '${{ env.resourceGroupName }}'
            subscriptionId    = '${{ secrets.ARM_SUBSCRIPTION_ID }}'
            managementGroupId = '${{ secrets.ARM_MGMTGROUP_ID }}'
            tenantId          = '${{ env.ARM_TENANT_ID }}'
          }

          ## Add local (source control) tokens
          $tokenMap = @{}
          foreach ($token in (Get-ChildItem env: | Where-Object -Property Name -Like "localToken_*")) {
            $tokenMap += @{ $token.Name.Replace('localToken_','','OrdinalIgnoreCase') = $token.value }
          }
          Write-Verbose ('Using local tokens [{0}]' -f ($tokenMap.Keys -join ', ')) -Verbose
          $Tokens += $tokenMap

          ## Swap 'namePrefix' token if empty and provided as a GitHub secret
          if([String]::IsNullOrEmpty($Tokens['namePrefix'])){
            Write-Verbose 'Using [namePrefix] token from GitHub' -Verbose
            $Tokens['namePrefix'] = '${{ env.TOKEN_NAMEPREFIX }}'
          }

          # Construct Token Function Input
          $ConvertTokensInputs = @{
            FilePathList = @($templateFilePath)
            Tokens       = $Tokens
            TokenPrefix  = '${{ env.tokenPrefix }}'
            TokenSuffix  = '${{ env.tokenSuffix }}'
          }

          Write-Verbose "Convert Tokens Input:`n $($ConvertTokensInputs | ConvertTo-Json -Depth 10)" -Verbose

          # Invoke Token Replacement Functionality [For Module]
          $null = Convert-TokensInFileList @ConvertTokensInputs

          Write-Output '::endgroup::'

    # Run analysis by using the PSRule GitHub action.
    - name: Run PSRule analysis
      uses: microsoft/ps-rule@v2.4.0
      # continue-on-error: true # Setting this whilst PSRule gets bedded in, in this project
      with:
        modules: 'PSRule.Rules.Azure'
        inputPath: '${{ env.modulePath }}/${{ matrix.moduleTestFilePaths }}'
        outputFormat: Csv
        outputPath: '${{ env.modulePath }}/${{ matrix.moduleTestFilePaths }}-output.csv'
        option: '${{ env.modulePath }}/.test/vnet-ps-rule.yaml'

    - name: 'Set PSRule Output'
      if: always()
      uses: azure/powershell@v1
      with:
        azPSVersion: 'latest'
        inlineScript: |
          # Grouping task logs
          Write-Output '::group::Setting Output'

          # Load used functions
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'PSRuleValidation' 'Set-PSRuleOutput.ps1')

          # Populate tokens
          $Input = @{
            inputFilePath = '${{ env.modulePath }}/${{ matrix.moduleTestFilePaths }}-output.csv'
            outputFilePath = '${{ env.modulePath }}/${{ matrix.moduleTestFilePaths }}-output.md'
          }

          Write-Verbose "Set PS Rule Output with following parameters:`n $($Input | ConvertTo-Json -Depth 10)" -Verbose

          # Invoke Set PSRule Output Functionality
          $null = Set-PSRuleOutput @Input

          Write-Output '::endgroup::'

    - name: Output to Github summaries
      shell: pwsh
      if: always()
      run: cat '${{ env.modulePath }}/${{ matrix.moduleTestFilePaths }}-output.md' # >> $GITHUB_STEP_SUMMARY

