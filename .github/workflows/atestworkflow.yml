name: "AA test workflow"

on:
  workflow_dispatch:
    inputs:
      removeDeployment:
        description: 'Remove deployed module'
        required: false
        default: 'true'
      versioningOption:
        description: 'The mode to handle the version increments [major|minor|patch|custom]'
        required: false
        default: 'patch'
      customVersion:
        description: 'The version to enforce if [versionOption] is set to [custom]'
        required: false
        default: '0.0.1'
  push:
    branches:
      - main
    # paths:
    #   - '.github/actions/templates/**'
    #   - '.github/workflows/ms.analysisservices.servers.yml'
    #   - 'arm/Microsoft.AnalysisServices/servers/**'
    #   - '!arm/Microsoft.AnalysisServices/servers/readme.md'

env:
  moduleName: 'servers'
  modulePath: 'arm/Microsoft.AnalysisServices/servers'
  workflowPath: '.github/workflows/atestworkflow.yml'
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_MGMTGROUP_ID: ${{ secrets.ARM_MGMTGROUP_ID }}

jobs:
  
  job_set_trigger:
    runs-on: ubuntu-20.04
    name: "Set input parameters to output variables"
    steps:
      # - name: "Checkout"
      #   uses: actions/checkout@v2
      #   with:
      #     fetch-depth: 0
      - run: echo ${{ github.event_name }}
      # - name: Dump GitHub context
      #   env:
      #     GITHUB_CONTEXT: ${{ toJson(github) }}
      #   run: echo "$GITHUB_CONTEXT"
      # - name: Set input parameters
      #   run: |
      #     if ('${{ github.event_name }}' -eq 'workflow_dispatch') {
      #       $removeDeployment='${{ github.event.inputs.removeDeployment }}'
      #       $versioningOption='${{ github.event.inputs.versioningOption }}'
      #       $customVersion='${{ github.event.inputs.customVersion }}'

      #     }
      #     else {
      #       $workflowPath='${{ github.event.workflow }}'
      #       $workflowObj=ConvertFrom-Yaml -Path $workflowPath
      #       $removeDeployment=$workflowObj.on.workflow_dispatch.inputs.removeDeployment.default
      #       $versioningOption=$workflowObj.on.workflow_dispatch.inputs.versioningOption.default
      #       $customVersion=$workflowObj.on.workflow_dispatch.inputs.customVersion.default

      #     }
      #     Write-Host "::set-output name=removeDeployment::$removeDeployment"
      #     Write-Host "::set-output name=versioningOption::$versioningOption"
      #     Write-Host "::set-output name=customVersion::$customVersion"
      #   id: get-trigger
      #   shell: pwsh
      - name: Set input parameters
        run: |

          # When running from workflow_dispatch event get input values
          if ('${{ github.event_name }}' -eq 'workflow_dispatch') {
            $removeDeployment='${{ github.event.inputs.removeDeployment }}'
            $versioningOption='${{ github.event.inputs.versioningOption }}'
            $customVersion='${{ github.event.inputs.customVersion }}'

          }

          # Otherwise retrieve default values
          else {
            $templateFile='${{ env.workflowPath }}'
            $content = Get-Content $templateFile
            $removeDeploymentRowIndex = ((0..($content.Count-1)) | Where-Object {$content[$_] -like '*removeDeployment:*'})[0]
            $removeDeployment = $content[$removeDeploymentRowIndex+3].trim().Split(':')[1].Trim().Replace("'","").Replace('"','')
            $removeDeployment
            $versioningOptionRowIndex = ((0..($content.Count-1)) | Where-Object {$content[$_] -like "*versioningOption:*" })[0]
            $versioningOption = $content[$versioningOptionRowIndex+3].trim().Split(':')[1].Trim().Replace("'","").Replace('"','')
            $versioningOption
            $customVersionRowIndex = ((0..($content.Count-1)) | Where-Object {$content[$_] -like "*customVersion:*" })[0]
            $customVersion = $content[$customVersionRowIndex+3].trim().Split(':')[1].Trim().Replace("'","").Replace('"','')
            $customVersion
          }

          # Output values to be accessed by next jobs
          echo "::set-output name=removeDeployment::$removeDeployment"
          echo "::set-output name=versioningOption::$versioningOption"
          echo "::set-output name=customVersion::$customVersion"
        id: get-trigger
        shell: pwsh
        
      - name: Access values within the job
        run: |
          echo "The removeDeployment is ${{ steps.get-trigger.outputs.removeDeployment }}"
          echo "The versioningOption is ${{ steps.get-trigger.outputs.versioningOption }}"
          echo "The customVersion is ${{ steps.get-trigger.outputs.customVersion }}"
    outputs:
      removeDeployment: ${{ steps.get-trigger.outputs.removeDeployment }}
      versioningOption: ${{ steps.get-trigger.outputs.versioningOption }}
      customVersion: ${{ steps.get-trigger.outputs.customVersion }}
  
  job_get_trigger:
    runs-on: ubuntu-20.04
    needs: job_set_trigger
    name: "Get job output variables"
    steps:
      - name: Access values from another job
        run: |
          echo "The trigger is ${{ needs.job_set_trigger.outputs.TRIGGER}}"
          echo "The removeDeployment is ${{ needs.job_set_trigger.outputs.removeDeployment}}"
          echo "The versioningOption is ${{ needs.job_set_trigger.outputs.versioningOption}}"
          echo "The customVersion is ${{ needs.job_set_trigger.outputs.customVersion}}"
      - name: Dump set trigger
        env:
          jobContext: ${{ toJson(needs.job_set_trigger) }}
        run: echo "$jobContext"