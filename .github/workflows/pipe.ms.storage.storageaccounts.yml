name: "Storage Account - Test Pipeline"

on:
  workflow_dispatch:
    inputs:
      removeDeployment:
        description: 'Remove deployed module'
        required: false
        default: 'true' 
      versioningOption:
        description: 'The mode to handle the version increments [major|minor|patch|custom]'
        required: false
        default: 'patch' 
      customVersion:
        description: 'The version to enforce if [versionOption] is set to [custom]'
        required: false
        default: '1.0.0' 

env:
  moduleName: 'storageAccounts'
  modulePath: 'arm/Microsoft.Storage/storageAccounts'

jobs:
  #############
  #   TESTS   #
  #############
  # Individual tests
  # ----------------
  job_tests_module_individual:
    runs-on: ubuntu-20.04
    name: "Run individual module tests"
    steps:
    - name: "Test module"
      uses: ./.github/actions/templates/validateModuleIndividual
      with:
        modulePath: '${{ env.modulePath }}'
        moduleName: '${{ env.moduleName}}'

  # Global tests
  # ------------
  job_tests_module_global:
    runs-on: ubuntu-20.04
    name: "Run global module tests"
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    steps:
    - name: "Test module"
      uses: ./.github/actions/templates/validateModuleGeneral
      with:
        modulePath: '${{ env.modulePath }}'
        moduleName: '${{ env.moduleName}}'

  # Global API tests
  # ----------------
  job_tests_module_global_api:
    runs-on: ubuntu-20.04
    name: "Run global API module tests"
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    steps:
    - name: "Test module"
      uses: ./.github/actions/templates/validateModuleApis
      with:
        modulePath: '${{ env.modulePath }}'
        moduleName: '${{ env.moduleName}}'

  # Validate deployment module tests
  # --------------------------------
  job_tests_module_deploy_validate:
    runs-on: ubuntu-20.04
    name: "Run deployment validation module tests"
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    strategy:
      matrix:
        parameterFilePaths: ['noname.parameters.json','parameters.json']
    steps:
    - name: "Test module"
      uses: ./.github/actions/templates/validateModuleDeploy
      with:
        templateFilePath: '${{ env.modulePath }}/deploy.json'
        parameterFilePath: '${{ env.modulePath }}/parameters/${{ matrix.parameterFilePaths }}'
        location: '${{ env.defaultLocation }}'
        resourceGroupName: '${{ env.resourceGroupName }}'
        subscriptionId: '${{ env.subscriptionId }}'
        managementGroupId: '${{ env.managementGroupId }}'

  ##############
  #   DEPLOY   #
  ##############
  job_deploy_module:
    runs-on: ubuntu-20.04
    name: "Deploy module"
    needs:
    - job_tests_module_individual
    - job_tests_module_global
    - job_tests_module_global_api
    - job_tests_module_deploy_validate
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    strategy:
      matrix:
        parameterFilePaths: ['noname.parameters.json','parameters.json']
    steps:
    - name: "Deploy module"
      uses: ./.github/actions/templates/deployModule
      with:
        moduleName: '${{ env.moduleName }}'
        templateFilePath: '${{ env.modulePath }}/deploy.json'
        parameterFilePath: '${{ env.modulePath }}/parameters/${{ matrix.parameterFilePaths }}'
        location: '${{ env.defaultLocation }}'
        resourceGroupName: '${{ env.resourceGroupName }}'
        subscriptionId: '${{ env.subscriptionId }}'
        managementGroupId: '${{ env.managementGroupId }}'
        removeDeployment: '${{ github.event.inputs.removeDeployment }}'

  ###############
  #   PUBLISH   #
  ###############
  job_publish_module:
    runs-on: ubuntu-20.04
    name: "Publish module"
    needs: 
    - job_deploy_module
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    steps:
    - name: "Publish module"
      uses: ./.github/actions/templates/publishModule
      with:
        templateFilePath: '${{ env.modulePath }}/deploy.json'
        componentTemplateSpecRGName: '${{ env.componentTemplateSpecRGName }}'
        componentTemplateSpecRGLocation: '${{ env.componentTemplateSpecRGLocation }}'
        componentTemplateSpecName: '${{ env.moduleName }}'
        componentTemplateSpecDescription: '${{ env.componentTemplateSpecDescription }}'
        publishToTemplateSpec: '${{ env.publishToTemplateSpec }}'
        versioningOption: '${{ github.event.inputs.versioningOption }}'
        customVersion: '${{ github.event.inputs.customVersion }}'

  ##############
  #   REMOVE   #
  ##############
  job_remove_module:
    runs-on: ubuntu-20.04
    name: "Remove module"
    if: ${{ github.event.inputs.removeDeployment == 'true' }}
    needs: 
    - job_deploy_module
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    steps:
    - name: "Remove module"
      uses: ./.github/actions/templates/removeModule
      with:
        moduleName: '${{ env.moduleName }}'
        templateFilePath: '${{ env.modulePath }}/deploy.json'
        resourceGroupName: '${{ env.resourceGroupName }}'