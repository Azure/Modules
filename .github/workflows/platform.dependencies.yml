name: '.Platform: Dependencies'

on:
  workflow_dispatch:

  # push:
  #   branches:
  #     - main
  #   paths:
  #     - '.github/actions/templates/**'
  #     - '.github/workflows/platform.dependencies.yml'
  #     - 'dependencies/**'

env:
  defaultLocation: 'WestEurope'
  resourceGroupName: 'validation-rg'
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_MGMTGROUP_ID: ${{ secrets.ARM_MGMTGROUP_ID }}

jobs:
  job_deploy_rg:
    runs-on: ubuntu-20.04
    name: 'Deploy resource group'
    env:
      moduleName: resourceGroups
      namespace: 'Microsoft.Resources\resourceGroups'
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths:
          ['artifacts.parameters.json', 'validation.parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/deployModule
        with:
          moduleName: '${{ env.moduleName }}'
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: 'dependencies/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.defaultLocation }}'
          resourceGroupName: '${{ env.resourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'

  job_deploy_msi:
    runs-on: ubuntu-20.04
    name: 'Deploy user assigned identity'
    env:
      moduleName: userAssignedIdentities
      namespace: 'Microsoft.ManagedIdentity\userAssignedIdentities'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/deployModule
        with:
          moduleName: '${{ env.moduleName }}'
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: 'dependencies/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.defaultLocation }}'
          resourceGroupName: '${{ env.resourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'

  job_deploy_law:
    runs-on: ubuntu-20.04
    name: 'Deploy log analytics workspace'
    env:
      moduleName: workspaces
      namespace: 'Microsoft.OperationalInsights\workspaces'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/deployModule
        with:
          moduleName: '${{ env.moduleName }}'
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: 'dependencies/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.defaultLocation }}'
          resourceGroupName: '${{ env.resourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'

  job_deploy_sa:
    runs-on: ubuntu-20.04
    name: 'Deploy storage account'
    env:
      moduleName: storageAccounts
      namespace: 'Microsoft.Storage\storageAccounts'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['fa.parameters.json', 'parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/deployModule
        with:
          moduleName: '${{ env.moduleName }}'
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: 'dependencies/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.defaultLocation }}'
          resourceGroupName: '${{ env.resourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'

  job_deploy_evhns:
    runs-on: ubuntu-20.04
    name: 'Deploy eventhub namespace'
    env:
      moduleName: namespaces
      namespace: 'Microsoft.EventHub\namespaces'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/deployModule
        with:
          moduleName: '${{ env.moduleName }}'
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: 'dependencies/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.defaultLocation }}'
          resourceGroupName: '${{ env.resourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'

  job_deploy_sig:
    runs-on: ubuntu-20.04
    name: 'Deploy shared image gallery'
    env:
      moduleName: galleries
      namespace: 'Microsoft.Compute\galleries'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/deployModule
        with:
          moduleName: '${{ env.moduleName }}'
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: 'dependencies/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.defaultLocation }}'
          resourceGroupName: '${{ env.resourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'

  job_deploy_nw:
    runs-on: ubuntu-20.04
    name: 'Deploy network watchers'
    env:
      moduleName: networkWatchers
      namespace: 'Microsoft.Network\networkWatchers'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/deployModule
        with:
          moduleName: '${{ env.moduleName }}'
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: 'dependencies/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.defaultLocation }}'
          resourceGroupName: '${{ env.resourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'

  job_deploy_ag:
    runs-on: ubuntu-20.04
    name: 'Deploy action groups'
    env:
      moduleName: actionGroups
      namespace: 'Microsoft.Insights\actionGroups'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/deployModule
        with:
          moduleName: '${{ env.moduleName }}'
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: 'dependencies/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.defaultLocation }}'
          resourceGroupName: '${{ env.resourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'

  job_deploy_asg:
    runs-on: ubuntu-20.04
    name: 'Deploy application security groups'
    env:
      moduleName: applicationSecurityGroups
      namespace: 'Microsoft.Network\applicationSecurityGroups'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/deployModule
        with:
          moduleName: '${{ env.moduleName }}'
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: 'dependencies/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.defaultLocation }}'
          resourceGroupName: '${{ env.resourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'

  job_deploy_asp:
    runs-on: ubuntu-20.04
    name: 'Deploy serverfarms'
    env:
      moduleName: serverfarms
      namespace: 'Microsoft.Web\serverfarms'
    needs:
      - job_deploy_rg
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/deployModule
        with:
          moduleName: '${{ env.moduleName }}'
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: 'dependencies/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.defaultLocation }}'
          resourceGroupName: '${{ env.resourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'

  job_deploy_nsg:
    runs-on: ubuntu-20.04
    name: 'Deploy network security groups'
    env:
      moduleName: networkSecurityGroups
      namespace: 'Microsoft.Network\networkSecurityGroups'
    needs:
      - job_deploy_sa
      - job_deploy_evhns
      - job_deploy_law
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths:
          [
            'apgw.parameters.json',
            'ase.parameters.json',
            'bastion.parameters.json',
            'parameters.json',
          ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/deployModule
        with:
          moduleName: '${{ env.moduleName }}'
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: 'dependencies/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.defaultLocation }}'
          resourceGroupName: '${{ env.resourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'

  job_deploy_pip:
    runs-on: ubuntu-20.04
    name: 'Deploy public IP addresses'
    env:
      moduleName: publicIPAddresses
      namespace: 'Microsoft.Network\publicIPAddresses'
    needs:
      - job_deploy_sa
      - job_deploy_evhns
      - job_deploy_law
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths:
          ['apgw.parameters.json', 'bas.parameters.json', 'lb.parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/deployModule
        with:
          moduleName: '${{ env.moduleName }}'
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: 'dependencies/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.defaultLocation }}'
          resourceGroupName: '${{ env.resourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'

  job_deploy_kv:
    runs-on: ubuntu-20.04
    name: 'Deploy key vaults'
    env:
      moduleName: vaults
      namespace: 'Microsoft.KeyVault\vaults'
    needs:
      - job_deploy_sa
      - job_deploy_evhns
      - job_deploy_law
    strategy:
      fail-fast: false
      matrix:
        parameterFilePaths: ['parameters.json']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Deploy module'
        uses: ./.github/actions/templates/deployModule
        with:
          moduleName: '${{ env.moduleName }}'
          templateFilePath: 'arm/${{ env.namespace }}/deploy.bicep'
          parameterFilePath: 'dependencies/${{ env.namespace }}/parameters/${{ matrix.parameterFilePaths }}'
          location: '${{ env.defaultLocation }}'
          resourceGroupName: '${{ env.resourceGroupName }}'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'

  # Create Secrets and Keys
  # job_deploy_kvSecrets:
  #   runs-on: ubuntu-20.04
  #   name: 'Create key vault secrets and keys'
  #   env:
  #     moduleName: vaults
  #     namespace: 'Microsoft.KeyVault\vaults'
  #   needs:
  #     - job_deploy_kv
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       parameterFilePaths: ['parameters.json']
  #   steps:
  #     - name: 'Checkout'
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - name: 'Run script'
  #       uses: azure/CLI@v1
  #       with:
  #         inlineScript: |
  #           $username = (-join ((65..90) + (97..122) | Get-Random -Count 9 -SetSeed 1 | % {[char]$_ + "$_"})).substring(0,19) # max length
  #           $password = (New-Guid).Guid.SubString(0,19)
  #           $vpnSharedKey =  (New-Guid).Guid.SubString(0,32)
  #           # VirtualMachines and VMSS
  #           az keyvault secret set --vault-name "adp-sxx-az-kv-weu-x-001" --name "adminUsername" --value "$username"
  #           az keyvault secret set --vault-name "adp-sxx-az-kv-weu-x-001" --name "adminPassword" --value "$password"
  #           # Azure SQLServer and SQLManagedInstances
  #           az keyvault secret set --vault-name "adp-sxx-az-kv-weu-x-001" --name "administratorLogin" --value "$username"
  #           az keyvault secret set --vault-name "adp-sxx-az-kv-weu-x-001" --name "administratorLoginPassword" --value "$password"
  #           # API management
  #           az keyvault secret set --vault-name "adp-sxx-az-kv-weu-x-001" --name "apimClientId" --value "$username"
  #           az keyvault secret set --vault-name "adp-sxx-az-kv-weu-x-001" --name "apimClientSecret" --value "$password"
  #           # VirtualNetworkGateway
  #           az keyvault secret set --vault-name "adp-sxx-az-kv-weu-x-001" --name "vpnSharedKey" --value "$vpnSharedKey"
  #           # DiskEncryptionSet, VirtualMachines and VMSS
  #           az keyvault key create --vault-name "adp-sxx-az-kv-weu-x-001" --name "keyEncryptionKey"
  #           az keyvault key create --vault-name "adp-sxx-az-kv-weu-x-001" --name "keyEncryptionKeySqlMi"
