name: '.Template: Module Pipeline'

on:
  workflow_call:
    inputs:
      removeDeployment:
        type: string
        description: 'Remove deployed module'
        required: true
      prerelease:
        type: boolean
        description: 'Publish prerelease module'
        required: false
        default: false
      modulePath:
        type: string
        description: 'Relative path to the module folder'
        required: true
      moduleTestFilePaths:
        type: string
        description: 'Relative path to the module folder'
        required: true
    secrets:
      AZURE_CREDENTIALS:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_MGMTGROUP_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      TOKEN_NAMEPREFIX:
        required: true

env:
  variablesPath: 'settings.yml'
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  ARM_SUBSCRIPTION_ID: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
  ARM_MGMTGROUP_ID: '${{ secrets.ARM_MGMTGROUP_ID }}'
  ARM_TENANT_ID: '${{ secrets.ARM_TENANT_ID }}'
  TOKEN_NAMEPREFIX: '${{ secrets.TOKEN_NAMEPREFIX }}'

jobs:

  #########################
  #   Static validation   #
  #########################
  job_module_pester_validation:
    runs-on: ubuntu-20.04
    name: 'Static validation'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set environment variables
        uses: ./.github/actions/templates/setEnvironmentVariables
        with:
          variablesPath: ${{ env.variablesPath }}
      - name: 'Run tests'
        uses: ./.github/actions/templates/validateModulePester
        with:
          modulePath: '${{ inputs.modulePath }}'
          moduleTestFilePath: '${{ env.moduleTestFilePath }}'

  # #############################
  # #   Deployment validation   #
  # #############################
  # job_module_deploy_validation:
  #   runs-on: ubuntu-20.04
  #   name: 'Deployment validation'
  #   needs:
  #     - job_module_pester_validation
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       moduleTestFilePaths: ${{ fromJson(needs.job_initialize_pipeline.outputs.moduleTestFilePaths) }}
  #   steps:
  #     - name: 'Checkout'
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Set environment variables
  #       uses: ./.github/actions/templates/setEnvironmentVariables
  #       with:
  #         variablesPath: ${{ env.variablesPath }}
  #     - name: 'Using test file [${{ matrix.moduleTestFilePaths }}]'
  #       uses: ./.github/actions/templates/validateModuleDeployment
  #       with:
  #         templateFilePath: '${{ inputs.modulePath }}/${{ matrix.moduleTestFilePaths }}'
  #         location: '${{ env.location }}'
  #         subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
  #         managementGroupId: '${{ secrets.ARM_MGMTGROUP_ID }}'
  #         removeDeployment: '${{ inputs.removeDeployment }}'

  # ##################
  # #   Publishing   #
  # ##################
  # job_publish_module:
  #   name: 'Publishing'
  #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event.inputs.prerelease == 'true'
  #   # if: contains(fromJson('["refs/heads/main", "refs/heads/master"]'), github.ref)
  #   runs-on: ubuntu-20.04
  #   needs:
  #     - job_module_deploy_validation
  #   steps:
  #     - name: 'Checkout'
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Set environment variables
  #       uses: ./.github/actions/templates/setEnvironmentVariables
  #       with:
  #         variablesPath: ${{ env.variablesPath }}
  #     - name: 'Publishing'
  #       uses: ./.github/actions/templates/publishModule
  #       with:
  #         templateFilePath: '${{ inputs.modulePath }}/deploy.bicep'
  #         templateSpecsRGName: '${{ env.templateSpecsRGName }}'
  #         templateSpecsRGLocation: '${{ env.templateSpecsRGLocation }}'
  #         templateSpecsDescription: '${{ env.templateSpecsDescription }}'
  #         templateSpecsDoPublish: '${{ env.templateSpecsDoPublish }}'
  #         bicepRegistryName: '${{ env.bicepRegistryName }}'
  #         bicepRegistryRGName: '${{ env.bicepRegistryRGName }}'
  #         bicepRegistryRgLocation: '${{ env.bicepRegistryRgLocation }}'
  #         bicepRegistryDoPublish: '${{ env.bicepRegistryDoPublish }}'
  #         publishLatest: '${{ env.publishLatest }}'
