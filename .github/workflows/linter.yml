name: '.Platform: Linter'

on: [pull_request]

env:
  variablesPath: 'settings.yml'
  modulesPath: 'modules'

jobs:
  build:
    name: Linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: Lint Code Base
        uses: docker://ghcr.io/github/super-linter:slim-v4
        # uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_MARKDOWN: false
          VALIDATE_ARM: false
          VALIDATE_JSON: false
          VALIDATE_YAML: false
          VALIDATE_GITHUB_ACTIONS: false
          if: ${{ github.event_name == 'pull_request' }}
          DEFAULT_BRANCH: ${{ github.base_ref }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FILTER_REGEX_EXCLUDE: '[module.tests.ps1|Get\-ModulesAsMarkdownTable.ps1|.*yml]'

  psrule:
    name: PSRule
    runs-on: ubuntu-latest
    steps:
      # Analyze repository with PSRule
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set environment variables
        uses: ./.github/actions/templates/setEnvironmentVariables
        with:
          variablesPath: ${{ env.variablesPath }}
      - name: Run PSRule analysis
        uses: microsoft/ps-rule@v2.4.0
        continue-on-error: true # Setting this whilst PSRule gets bedded in, in this project
        with:
          modules: 'PSRule.Rules.Azure'
          inputPath: '${{ env.modulesPath }}/'
          outputFormat: Csv
          outputPath: '${{ env.modulesPath }}/PSRule-output.csv'
      - name: 'Parse CSV content'
        uses: azure/powershell@v1
        with:
          azPSVersion: 'latest'
          inlineScript: |
            # Grouping task logs
            Write-Output '::group::Replace tokens in template file'

            # Load used functions
            . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'PSRuleValidation' 'Set-PSRuleOutput.ps1')

            # Populate parameter input
            $ParameterInput = @{
              inputFilePath   = '${{ env.modulesPath }}/PSRule-output.csv'
              outputFilePath  = '${{ env.modulesPath }}/PSRule-output.md'
            }

            # Invoke function
            $null = Set-PSRuleOutput @ParameterInput

            Write-Output '::endgroup::'
      - name: Output to GitHub job summaries
        if: always()
        run: cat '${{ env.modulesPath }}/PSRule-output.md' >> $GITHUB_STEP_SUMMARY
